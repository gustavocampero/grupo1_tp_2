
grupo_1_tp_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008230  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08008400  08008400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b0c  08008b0c  0000a08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b0c  08008b0c  00009b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b14  08008b14  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b14  08008b14  00009b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b18  08008b18  00009b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008b1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004418  2000008c  08008ba8  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044a4  08008ba8  0000a4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016384  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bef  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00024030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8c  00000000  00000000  00025458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a87  00000000  00000000  000263e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab21  00000000  00000000  0004be6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db3be  00000000  00000000  0006698c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141d4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef8  00000000  00000000  00141d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00147c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083e8 	.word	0x080083e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	080083e8 	.word	0x080083e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationIdleHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <vApplicationGetIdleTaskMemory+0x2c>)
 800060c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	4a06      	ldr	r2, [pc, #24]	@ (800062c <vApplicationGetIdleTaskMemory+0x30>)
 8000612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2280      	movs	r2, #128	@ 0x80
 8000618:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200000a8 	.word	0x200000a8
 800062c:	2000010c 	.word	0x2000010c

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000634:	f006 fd2c 	bl	8007090 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fb50 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f812 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f8f4 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000644:	f000 f8c8 	bl	80007d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000648:	f000 f87a 	bl	8000740 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <main+0x30>)
 800064e:	f001 fc99 	bl	8001f84 <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 8000652:	f004 fb97 	bl	8004d84 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000656:	f002 fb79 	bl	8002d4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0x2a>
 800065e:	bf00      	nop
 8000660:	2000030c 	.word	0x2000030c

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 ff97 	bl	80075a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemClock_Config+0xd4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	4a29      	ldr	r2, [pc, #164]	@ (8000738 <SystemClock_Config+0xd4>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	@ 0x40
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemClock_Config+0xd4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <SystemClock_Config+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b0:	4a22      	ldr	r2, [pc, #136]	@ (800073c <SystemClock_Config+0xd8>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b20      	ldr	r3, [pc, #128]	@ (800073c <SystemClock_Config+0xd8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d8:	2310      	movs	r3, #16
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 f958 	bl	80019a8 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fe:	f000 f939 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2102      	movs	r1, #2
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fdc6 	bl	80012b0 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800072a:	f000 f923 	bl	8000974 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075c:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_TIM2_Init+0x94>)
 800075e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000766:	2201      	movs	r2, #1
 8000768:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_TIM2_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000772:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_TIM2_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000784:	4813      	ldr	r0, [pc, #76]	@ (80007d4 <MX_TIM2_Init+0x94>)
 8000786:	f001 fbad 	bl	8001ee4 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000790:	f000 f8f0 	bl	8000974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <MX_TIM2_Init+0x94>)
 80007a2:	f001 fd4f 	bl	8002244 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007ac:	f000 f8e2 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_TIM2_Init+0x94>)
 80007be:	f001 ff71 	bl	80026a4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007c8:	f000 f8d4 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000030c 	.word	0x2000030c

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f001 ffd8 	bl	80027c4 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f8ab 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000354 	.word	0x20000354
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b2d      	ldr	r3, [pc, #180]	@ (80008fc <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a2c      	ldr	r2, [pc, #176]	@ (80008fc <MX_GPIO_Init+0xd0>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b2a      	ldr	r3, [pc, #168]	@ (80008fc <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a25      	ldr	r2, [pc, #148]	@ (80008fc <MX_GPIO_Init+0xd0>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a1e      	ldr	r2, [pc, #120]	@ (80008fc <MX_GPIO_Init+0xd0>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	4812      	ldr	r0, [pc, #72]	@ (8000900 <MX_GPIO_Init+0xd4>)
 80008b8:	f000 fce0 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <MX_GPIO_Init+0xd8>)
 80008d4:	f000 fb26 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d8:	2320      	movs	r3, #32
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_GPIO_Init+0xd4>)
 80008f0:	f000 fb18 	bl	8000f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800

08000908 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 800090c:	4b03      	ldr	r3, [pc, #12]	@ (800091c <configureTimerForRunTimeStats+0x14>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	2000039c 	.word	0x2000039c

08000920 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <getRunTimeCounterValue+0x14>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	2000039c 	.word	0x2000039c

08000938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a09      	ldr	r2, [pc, #36]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d101      	bne.n	800094e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094a:	f000 f9e9 	bl	8000d20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000956:	d104      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000960:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010000 	.word	0x40010000
 8000970:	2000039c 	.word	0x2000039c

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <HAL_MspInit+0x54>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_MspInit+0x54>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	f06f 0001 	mvn.w	r0, #1
 80009c6:	f000 fa83 	bl	8000ed0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009e8:	d115      	bne.n	8000a16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HAL_TIM_Base_MspInit+0x48>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <HAL_TIM_Base_MspInit+0x48>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_TIM_Base_MspInit+0x48>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2105      	movs	r1, #5
 8000a0a:	201c      	movs	r0, #28
 8000a0c:	f000 fa60 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a10:	201c      	movs	r0, #28
 8000a12:	f000 fa79 	bl	8000f08 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a19      	ldr	r2, [pc, #100]	@ (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d12b      	bne.n	8000a9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a17      	ldr	r2, [pc, #92]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_UART_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <HAL_UART_MspInit+0x8c>)
 8000a9a:	f000 fa43 	bl	8000f24 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	@ 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b84 <HAL_InitTick+0xd0>)
 8000aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000acc:	4a2d      	ldr	r2, [pc, #180]	@ (8000b84 <HAL_InitTick+0xd0>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <HAL_InitTick+0xd0>)
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae0:	f107 020c 	add.w	r2, r7, #12
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fcfa 	bl	80014e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000af0:	f000 fce4 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 8000af4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af8:	4a23      	ldr	r2, [pc, #140]	@ (8000b88 <HAL_InitTick+0xd4>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	3b01      	subs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b06:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <HAL_InitTick+0xdc>)
 8000b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b2a:	4818      	ldr	r0, [pc, #96]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b2c:	f001 f9da 	bl	8001ee4 <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d11b      	bne.n	8000b76 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b3e:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <HAL_InitTick+0xd8>)
 8000b40:	f001 fa20 	bl	8001f84 <HAL_TIM_Base_Start_IT>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d111      	bne.n	8000b76 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b52:	2019      	movs	r0, #25
 8000b54:	f000 f9d8 	bl	8000f08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d808      	bhi.n	8000b70 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	2019      	movs	r0, #25
 8000b64:	f000 f9b4 	bl	8000ed0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b68:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_InitTick+0xe0>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e002      	b.n	8000b76 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3730      	adds	r7, #48	@ 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	200003a0 	.word	0x200003a0
 8000b90:	40010000 	.word	0x40010000
 8000b94:	20000004 	.word	0x20000004

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <NMI_Handler+0x4>

08000ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <MemManage_Handler+0x4>

08000bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bd6:	f001 fa45 	bl	8002064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200003a0 	.word	0x200003a0

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <TIM2_IRQHandler+0x10>)
 8000bea:	f001 fa3b 	bl	8002064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000030c 	.word	0x2000030c

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f006 fd0c 	bl	8007644 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20020000 	.word	0x20020000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	200003e8 	.word	0x200003e8
 8000c60:	200044a8 	.word	0x200044a8

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f006 fccb 	bl	8007650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fcb9 	bl	8000630 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000ccc:	08008b1c 	.word	0x08008b1c
  ldr r2, =_sbss
 8000cd0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000cd4:	200044a4 	.word	0x200044a4

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f8d8 	bl	8000eba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f7ff fed2 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fe36 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	200003ec 	.word	0x200003ec

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200003ec 	.word	0x200003ec

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	@ (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff4c 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee2:	f7ff ff61 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000ee6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	6978      	ldr	r0, [r7, #20]
 8000eee:	f7ff ffb1 	bl	8000e54 <NVIC_EncodePriority>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff80 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff54 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	e165      	b.n	800120c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8154 	bne.w	8001206 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d017      	beq.n	8001014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80ae 	beq.w	8001206 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001224 <HAL_GPIO_Init+0x300>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001224 <HAL_GPIO_Init+0x300>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001224 <HAL_GPIO_Init+0x300>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c6:	4a58      	ldr	r2, [pc, #352]	@ (8001228 <HAL_GPIO_Init+0x304>)
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4f      	ldr	r2, [pc, #316]	@ (800122c <HAL_GPIO_Init+0x308>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x21a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001230 <HAL_GPIO_Init+0x30c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x216>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001234 <HAL_GPIO_Init+0x310>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x212>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4c      	ldr	r2, [pc, #304]	@ (8001238 <HAL_GPIO_Init+0x314>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x20e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	@ (800123c <HAL_GPIO_Init+0x318>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x20a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4a      	ldr	r2, [pc, #296]	@ (8001240 <HAL_GPIO_Init+0x31c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x206>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	@ (8001244 <HAL_GPIO_Init+0x320>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x202>
 8001122:	2306      	movs	r3, #6
 8001124:	e00c      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 8001126:	2307      	movs	r3, #7
 8001128:	e00a      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 800112a:	2305      	movs	r3, #5
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 800112e:	2304      	movs	r3, #4
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 800113e:	2300      	movs	r3, #0
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4935      	ldr	r1, [pc, #212]	@ (8001228 <HAL_GPIO_Init+0x304>)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b3a      	ldr	r3, [pc, #232]	@ (8001248 <HAL_GPIO_Init+0x324>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001182:	4a31      	ldr	r2, [pc, #196]	@ (8001248 <HAL_GPIO_Init+0x324>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001188:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <HAL_GPIO_Init+0x324>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ac:	4a26      	ldr	r2, [pc, #152]	@ (8001248 <HAL_GPIO_Init+0x324>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b2:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <HAL_GPIO_Init+0x324>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <HAL_GPIO_Init+0x324>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_GPIO_Init+0x324>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001200:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <HAL_GPIO_Init+0x324>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3301      	adds	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	f67f ae96 	bls.w	8000f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40013800 	.word	0x40013800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	40020800 	.word	0x40020800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40021400 	.word	0x40021400
 8001244:	40021800 	.word	0x40021800
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	4013      	ands	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e001      	b.n	800126e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001298:	e003      	b.n	80012a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0cc      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012c4:	4b68      	ldr	r3, [pc, #416]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d90c      	bls.n	80012ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012da:	4b63      	ldr	r3, [pc, #396]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0b8      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001304:	4b59      	ldr	r3, [pc, #356]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a58      	ldr	r2, [pc, #352]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800130e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800131c:	4b53      	ldr	r3, [pc, #332]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a52      	ldr	r2, [pc, #328]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001328:	4b50      	ldr	r3, [pc, #320]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	494d      	ldr	r1, [pc, #308]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d044      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d107      	bne.n	800135e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4b47      	ldr	r3, [pc, #284]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e07f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d003      	beq.n	800136e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800136a:	2b03      	cmp	r3, #3
 800136c:	d107      	bne.n	800137e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136e:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e06f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137e:	4b3b      	ldr	r3, [pc, #236]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e067      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800138e:	4b37      	ldr	r3, [pc, #220]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f023 0203 	bic.w	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4934      	ldr	r1, [pc, #208]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	4313      	orrs	r3, r2
 800139e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013a0:	f7ff fcd2 	bl	8000d48 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	e00a      	b.n	80013be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a8:	f7ff fcce 	bl	8000d48 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e04f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 020c 	and.w	r2, r3, #12
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d1eb      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013d0:	4b25      	ldr	r3, [pc, #148]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d20c      	bcs.n	80013f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e032      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4916      	ldr	r1, [pc, #88]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	4313      	orrs	r3, r2
 8001414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	490e      	ldr	r1, [pc, #56]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001436:	f000 f887 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 800143a:	4602      	mov	r2, r0
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	490a      	ldr	r1, [pc, #40]	@ (8001470 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	5ccb      	ldrb	r3, [r1, r3]
 800144a:	fa22 f303 	lsr.w	r3, r2, r3
 800144e:	4a09      	ldr	r2, [pc, #36]	@ (8001474 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_RCC_ClockConfig+0x1c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fb2c 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00
 800146c:	40023800 	.word	0x40023800
 8001470:	08008aa0 	.word	0x08008aa0
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_RCC_GetHCLKFreq+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000

08001494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001498:	f7ff fff0 	bl	800147c <HAL_RCC_GetHCLKFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	0a9b      	lsrs	r3, r3, #10
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	4903      	ldr	r1, [pc, #12]	@ (80014b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014aa:	5ccb      	ldrb	r3, [r1, r3]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	08008ab0 	.word	0x08008ab0

080014bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014c0:	f7ff ffdc 	bl	800147c <HAL_RCC_GetHCLKFreq>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	0b5b      	lsrs	r3, r3, #13
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4903      	ldr	r1, [pc, #12]	@ (80014e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08008ab0 	.word	0x08008ab0

080014e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	220f      	movs	r2, #15
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <HAL_RCC_GetClockConfig+0x60>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 020f 	and.w	r2, r3, #15
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800154c:	b0ae      	sub	sp, #184	@ 0xb8
 800154e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800156e:	4bcb      	ldr	r3, [pc, #812]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b0c      	cmp	r3, #12
 8001578:	f200 8206 	bhi.w	8001988 <HAL_RCC_GetSysClockFreq+0x440>
 800157c:	a201      	add	r2, pc, #4	@ (adr r2, 8001584 <HAL_RCC_GetSysClockFreq+0x3c>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	080015b9 	.word	0x080015b9
 8001588:	08001989 	.word	0x08001989
 800158c:	08001989 	.word	0x08001989
 8001590:	08001989 	.word	0x08001989
 8001594:	080015c1 	.word	0x080015c1
 8001598:	08001989 	.word	0x08001989
 800159c:	08001989 	.word	0x08001989
 80015a0:	08001989 	.word	0x08001989
 80015a4:	080015c9 	.word	0x080015c9
 80015a8:	08001989 	.word	0x08001989
 80015ac:	08001989 	.word	0x08001989
 80015b0:	08001989 	.word	0x08001989
 80015b4:	080017b9 	.word	0x080017b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b8:	4bb9      	ldr	r3, [pc, #740]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015be:	e1e7      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015c0:	4bb8      	ldr	r3, [pc, #736]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015c6:	e1e3      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c8:	4bb4      	ldr	r3, [pc, #720]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d4:	4bb1      	ldr	r3, [pc, #708]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d071      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e0:	4bae      	ldr	r3, [pc, #696]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	099b      	lsrs	r3, r3, #6
 80015e6:	2200      	movs	r2, #0
 80015e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001606:	4622      	mov	r2, r4
 8001608:	462b      	mov	r3, r5
 800160a:	f04f 0000 	mov.w	r0, #0
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	0159      	lsls	r1, r3, #5
 8001614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001618:	0150      	lsls	r0, r2, #5
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4621      	mov	r1, r4
 8001620:	1a51      	subs	r1, r2, r1
 8001622:	6439      	str	r1, [r7, #64]	@ 0x40
 8001624:	4629      	mov	r1, r5
 8001626:	eb63 0301 	sbc.w	r3, r3, r1
 800162a:	647b      	str	r3, [r7, #68]	@ 0x44
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001638:	4649      	mov	r1, r9
 800163a:	018b      	lsls	r3, r1, #6
 800163c:	4641      	mov	r1, r8
 800163e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001642:	4641      	mov	r1, r8
 8001644:	018a      	lsls	r2, r1, #6
 8001646:	4641      	mov	r1, r8
 8001648:	1a51      	subs	r1, r2, r1
 800164a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800164c:	4649      	mov	r1, r9
 800164e:	eb63 0301 	sbc.w	r3, r3, r1
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001660:	4649      	mov	r1, r9
 8001662:	00cb      	lsls	r3, r1, #3
 8001664:	4641      	mov	r1, r8
 8001666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800166a:	4641      	mov	r1, r8
 800166c:	00ca      	lsls	r2, r1, #3
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	4603      	mov	r3, r0
 8001674:	4622      	mov	r2, r4
 8001676:	189b      	adds	r3, r3, r2
 8001678:	633b      	str	r3, [r7, #48]	@ 0x30
 800167a:	462b      	mov	r3, r5
 800167c:	460a      	mov	r2, r1
 800167e:	eb42 0303 	adc.w	r3, r2, r3
 8001682:	637b      	str	r3, [r7, #52]	@ 0x34
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001690:	4629      	mov	r1, r5
 8001692:	024b      	lsls	r3, r1, #9
 8001694:	4621      	mov	r1, r4
 8001696:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800169a:	4621      	mov	r1, r4
 800169c:	024a      	lsls	r2, r1, #9
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016a6:	2200      	movs	r2, #0
 80016a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80016b4:	f7fe fe04 	bl	80002c0 <__aeabi_uldivmod>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4613      	mov	r3, r2
 80016be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016c2:	e067      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4b75      	ldr	r3, [pc, #468]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016de:	2300      	movs	r3, #0
 80016e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016e6:	4622      	mov	r2, r4
 80016e8:	462b      	mov	r3, r5
 80016ea:	f04f 0000 	mov.w	r0, #0
 80016ee:	f04f 0100 	mov.w	r1, #0
 80016f2:	0159      	lsls	r1, r3, #5
 80016f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f8:	0150      	lsls	r0, r2, #5
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4621      	mov	r1, r4
 8001700:	1a51      	subs	r1, r2, r1
 8001702:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001704:	4629      	mov	r1, r5
 8001706:	eb63 0301 	sbc.w	r3, r3, r1
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001718:	4649      	mov	r1, r9
 800171a:	018b      	lsls	r3, r1, #6
 800171c:	4641      	mov	r1, r8
 800171e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001722:	4641      	mov	r1, r8
 8001724:	018a      	lsls	r2, r1, #6
 8001726:	4641      	mov	r1, r8
 8001728:	ebb2 0a01 	subs.w	sl, r2, r1
 800172c:	4649      	mov	r1, r9
 800172e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800173e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001746:	4692      	mov	sl, r2
 8001748:	469b      	mov	fp, r3
 800174a:	4623      	mov	r3, r4
 800174c:	eb1a 0303 	adds.w	r3, sl, r3
 8001750:	623b      	str	r3, [r7, #32]
 8001752:	462b      	mov	r3, r5
 8001754:	eb4b 0303 	adc.w	r3, fp, r3
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001766:	4629      	mov	r1, r5
 8001768:	028b      	lsls	r3, r1, #10
 800176a:	4621      	mov	r1, r4
 800176c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001770:	4621      	mov	r1, r4
 8001772:	028a      	lsls	r2, r1, #10
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800177c:	2200      	movs	r2, #0
 800177e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001780:	677a      	str	r2, [r7, #116]	@ 0x74
 8001782:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001786:	f7fe fd9b 	bl	80002c0 <__aeabi_uldivmod>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4613      	mov	r3, r2
 8001790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001794:	4b41      	ldr	r3, [pc, #260]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80017a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017b6:	e0eb      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b8:	4b38      	ldr	r3, [pc, #224]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c4:	4b35      	ldr	r3, [pc, #212]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d06b      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <HAL_RCC_GetSysClockFreq+0x354>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	2200      	movs	r2, #0
 80017d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80017e4:	2300      	movs	r3, #0
 80017e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80017e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017ec:	4622      	mov	r2, r4
 80017ee:	462b      	mov	r3, r5
 80017f0:	f04f 0000 	mov.w	r0, #0
 80017f4:	f04f 0100 	mov.w	r1, #0
 80017f8:	0159      	lsls	r1, r3, #5
 80017fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017fe:	0150      	lsls	r0, r2, #5
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4621      	mov	r1, r4
 8001806:	1a51      	subs	r1, r2, r1
 8001808:	61b9      	str	r1, [r7, #24]
 800180a:	4629      	mov	r1, r5
 800180c:	eb63 0301 	sbc.w	r3, r3, r1
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800181e:	4659      	mov	r1, fp
 8001820:	018b      	lsls	r3, r1, #6
 8001822:	4651      	mov	r1, sl
 8001824:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001828:	4651      	mov	r1, sl
 800182a:	018a      	lsls	r2, r1, #6
 800182c:	4651      	mov	r1, sl
 800182e:	ebb2 0801 	subs.w	r8, r2, r1
 8001832:	4659      	mov	r1, fp
 8001834:	eb63 0901 	sbc.w	r9, r3, r1
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001844:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001848:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800184c:	4690      	mov	r8, r2
 800184e:	4699      	mov	r9, r3
 8001850:	4623      	mov	r3, r4
 8001852:	eb18 0303 	adds.w	r3, r8, r3
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	462b      	mov	r3, r5
 800185a:	eb49 0303 	adc.w	r3, r9, r3
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800186c:	4629      	mov	r1, r5
 800186e:	024b      	lsls	r3, r1, #9
 8001870:	4621      	mov	r1, r4
 8001872:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001876:	4621      	mov	r1, r4
 8001878:	024a      	lsls	r2, r1, #9
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001882:	2200      	movs	r2, #0
 8001884:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001886:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001888:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800188c:	f7fe fd18 	bl	80002c0 <__aeabi_uldivmod>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4613      	mov	r3, r2
 8001896:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800189a:	e065      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x420>
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a8:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	2200      	movs	r2, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	4611      	mov	r1, r2
 80018b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80018ba:	2300      	movs	r3, #0
 80018bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80018be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018c2:	4642      	mov	r2, r8
 80018c4:	464b      	mov	r3, r9
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0159      	lsls	r1, r3, #5
 80018d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d4:	0150      	lsls	r0, r2, #5
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4641      	mov	r1, r8
 80018dc:	1a51      	subs	r1, r2, r1
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	4649      	mov	r1, r9
 80018e2:	eb63 0301 	sbc.w	r3, r3, r1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018f4:	4659      	mov	r1, fp
 80018f6:	018b      	lsls	r3, r1, #6
 80018f8:	4651      	mov	r1, sl
 80018fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fe:	4651      	mov	r1, sl
 8001900:	018a      	lsls	r2, r1, #6
 8001902:	4651      	mov	r1, sl
 8001904:	1a54      	subs	r4, r2, r1
 8001906:	4659      	mov	r1, fp
 8001908:	eb63 0501 	sbc.w	r5, r3, r1
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	00eb      	lsls	r3, r5, #3
 8001916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800191a:	00e2      	lsls	r2, r4, #3
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	4643      	mov	r3, r8
 8001922:	18e3      	adds	r3, r4, r3
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	464b      	mov	r3, r9
 8001928:	eb45 0303 	adc.w	r3, r5, r3
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193a:	4629      	mov	r1, r5
 800193c:	028b      	lsls	r3, r1, #10
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001944:	4621      	mov	r1, r4
 8001946:	028a      	lsls	r2, r1, #10
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001950:	2200      	movs	r2, #0
 8001952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001954:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001956:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800195a:	f7fe fcb1 	bl	80002c0 <__aeabi_uldivmod>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4613      	mov	r3, r2
 8001964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001968:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	0f1b      	lsrs	r3, r3, #28
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800197a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001986:	e003      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800198a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800198e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001990:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001994:	4618      	mov	r0, r3
 8001996:	37b8      	adds	r7, #184	@ 0xb8
 8001998:	46bd      	mov	sp, r7
 800199a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400

080019a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e28d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8083 	beq.w	8001ace <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019c8:	4b94      	ldr	r3, [pc, #592]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d019      	beq.n	8001a08 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019d4:	4b91      	ldr	r3, [pc, #580]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019e0:	4b8e      	ldr	r3, [pc, #568]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ec:	d00c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d112      	bne.n	8001a20 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fa:	4b88      	ldr	r3, [pc, #544]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a06:	d10b      	bne.n	8001a20 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05b      	beq.n	8001acc <HAL_RCC_OscConfig+0x124>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d157      	bne.n	8001acc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e25a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a28:	d106      	bne.n	8001a38 <HAL_RCC_OscConfig+0x90>
 8001a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7b      	ldr	r2, [pc, #492]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xcc>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0xb4>
 8001a42:	4b76      	ldr	r3, [pc, #472]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a75      	ldr	r2, [pc, #468]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b73      	ldr	r3, [pc, #460]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a72      	ldr	r2, [pc, #456]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xcc>
 8001a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6e      	ldr	r2, [pc, #440]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b6c      	ldr	r3, [pc, #432]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6b      	ldr	r2, [pc, #428]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f964 	bl	8000d48 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff f960 	bl	8000d48 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	@ 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e21f      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b61      	ldr	r3, [pc, #388]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xdc>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f950 	bl	8000d48 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff f94c 	bl	8000d48 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	@ 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e20b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b57      	ldr	r3, [pc, #348]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x104>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06f      	beq.n	8001bba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ada:	4b50      	ldr	r3, [pc, #320]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d017      	beq.n	8001b16 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
        || \
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d105      	bne.n	8001afe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001af2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afe:	4b47      	ldr	r3, [pc, #284]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d11c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	4b41      	ldr	r3, [pc, #260]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x186>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e1d3      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4937      	ldr	r1, [pc, #220]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	e03a      	b.n	8001bba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4c:	4b34      	ldr	r3, [pc, #208]	@ (8001c20 <HAL_RCC_OscConfig+0x278>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff f8f9 	bl	8000d48 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f8f5 	bl	8000d48 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1b4      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4925      	ldr	r1, [pc, #148]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b24      	ldr	r3, [pc, #144]	@ (8001c20 <HAL_RCC_OscConfig+0x278>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f8d8 	bl	8000d48 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f8d4 	bl	8000d48 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e193      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d036      	beq.n	8001c34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d016      	beq.n	8001bfc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_RCC_OscConfig+0x27c>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f8b8 	bl	8000d48 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f8b4 	bl	8000d48 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e173      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x234>
 8001bfa:	e01b      	b.n	8001c34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff f8a1 	bl	8000d48 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	e00e      	b.n	8001c28 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f89d 	bl	8000d48 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d907      	bls.n	8001c28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e15c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470000 	.word	0x42470000
 8001c24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b8a      	ldr	r3, [pc, #552]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ea      	bne.n	8001c0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8097 	beq.w	8001d70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b83      	ldr	r3, [pc, #524]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b7f      	ldr	r3, [pc, #508]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b7c      	ldr	r3, [pc, #496]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b79      	ldr	r3, [pc, #484]	@ (8001e58 <HAL_RCC_OscConfig+0x4b0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b76      	ldr	r3, [pc, #472]	@ (8001e58 <HAL_RCC_OscConfig+0x4b0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a75      	ldr	r2, [pc, #468]	@ (8001e58 <HAL_RCC_OscConfig+0x4b0>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f85d 	bl	8000d48 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff f859 	bl	8000d48 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e118      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e58 <HAL_RCC_OscConfig+0x4b0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x31e>
 8001cb8:	4b66      	ldr	r3, [pc, #408]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbc:	4a65      	ldr	r2, [pc, #404]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x358>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x340>
 8001cce:	4b61      	ldr	r3, [pc, #388]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd2:	4a60      	ldr	r2, [pc, #384]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cda:	4b5e      	ldr	r3, [pc, #376]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cde:	4a5d      	ldr	r2, [pc, #372]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0x358>
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cec:	4a59      	ldr	r2, [pc, #356]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf4:	4b57      	ldr	r3, [pc, #348]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf8:	4a56      	ldr	r2, [pc, #344]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d015      	beq.n	8001d34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff f81e 	bl	8000d48 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7ff f81a 	bl	8000d48 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0d7      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	4b4b      	ldr	r3, [pc, #300]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ee      	beq.n	8001d10 <HAL_RCC_OscConfig+0x368>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f808 	bl	8000d48 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f804 	bl	8000d48 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0c1      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	4b40      	ldr	r3, [pc, #256]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ee      	bne.n	8001d3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b3b      	ldr	r3, [pc, #236]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	4a3a      	ldr	r2, [pc, #232]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80ad 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d7a:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d060      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d145      	bne.n	8001e1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <HAL_RCC_OscConfig+0x4b4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe ffd8 	bl	8000d48 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe ffd4 	bl	8000d48 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e093      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	071b      	lsls	r3, r3, #28
 8001de6:	491b      	ldr	r1, [pc, #108]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_RCC_OscConfig+0x4b4>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7fe ffa9 	bl	8000d48 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe ffa5 	bl	8000d48 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e064      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x452>
 8001e18:	e05c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_RCC_OscConfig+0x4b4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe ff92 	bl	8000d48 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe ff8e 	bl	8000d48 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e04d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x480>
 8001e46:	e045      	b.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e040      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <HAL_RCC_OscConfig+0x538>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d030      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d129      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d122      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d119      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d10f      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e041      	b.n	8001f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fd64 	bl	80009d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f000 fa7e 	bl	8002424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d001      	beq.n	8001f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e04e      	b.n	800203a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a23      	ldr	r2, [pc, #140]	@ (8002048 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d022      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc6:	d01d      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800204c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d018      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00e      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	@ (800205c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a18      	ldr	r2, [pc, #96]	@ (8002060 <HAL_TIM_Base_Start_IT+0xdc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d111      	bne.n	8002028 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d010      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002026:	e007      	b.n	8002038 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40010400 	.word	0x40010400
 800205c:	40014000 	.word	0x40014000
 8002060:	40001800 	.word	0x40001800

08002064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d020      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0202 	mvn.w	r2, #2
 8002098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f999 	bl	80023e6 <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f98b 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f99c 	bl	80023fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d020      	beq.n	8002114 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01b      	beq.n	8002114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0204 	mvn.w	r2, #4
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f973 	bl	80023e6 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f965 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f976 	bl	80023fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d020      	beq.n	8002160 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0208 	mvn.w	r2, #8
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2204      	movs	r2, #4
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f94d 	bl	80023e6 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f93f 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f950 	bl	80023fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d020      	beq.n	80021ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0210 	mvn.w	r2, #16
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2208      	movs	r2, #8
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f927 	bl	80023e6 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f919 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f92a 	bl	80023fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0201 	mvn.w	r2, #1
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fbb4 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fade 	bl	80027b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8fb 	bl	800240e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00c      	beq.n	800223c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0220 	mvn.w	r2, #32
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fab0 	bl	800279c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_TIM_ConfigClockSource+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e0b4      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x186>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800227e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002298:	d03e      	beq.n	8002318 <HAL_TIM_ConfigClockSource+0xd4>
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800229e:	f200 8087 	bhi.w	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022a6:	f000 8086 	beq.w	80023b6 <HAL_TIM_ConfigClockSource+0x172>
 80022aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ae:	d87f      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022b0:	2b70      	cmp	r3, #112	@ 0x70
 80022b2:	d01a      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0xa6>
 80022b4:	2b70      	cmp	r3, #112	@ 0x70
 80022b6:	d87b      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022b8:	2b60      	cmp	r3, #96	@ 0x60
 80022ba:	d050      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x11a>
 80022bc:	2b60      	cmp	r3, #96	@ 0x60
 80022be:	d877      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c0:	2b50      	cmp	r3, #80	@ 0x50
 80022c2:	d03c      	beq.n	800233e <HAL_TIM_ConfigClockSource+0xfa>
 80022c4:	2b50      	cmp	r3, #80	@ 0x50
 80022c6:	d873      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c8:	2b40      	cmp	r3, #64	@ 0x40
 80022ca:	d058      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x13a>
 80022cc:	2b40      	cmp	r3, #64	@ 0x40
 80022ce:	d86f      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d0:	2b30      	cmp	r3, #48	@ 0x30
 80022d2:	d064      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x15a>
 80022d4:	2b30      	cmp	r3, #48	@ 0x30
 80022d6:	d86b      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d060      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x15a>
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d867      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d05c      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x15a>
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d05a      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	e062      	b.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022fa:	f000 f9b3 	bl	8002664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800230c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	609a      	str	r2, [r3, #8]
      break;
 8002316:	e04f      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002328:	f000 f99c 	bl	8002664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800233a:	609a      	str	r2, [r3, #8]
      break;
 800233c:	e03c      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	461a      	mov	r2, r3
 800234c:	f000 f910 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2150      	movs	r1, #80	@ 0x50
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f969 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 800235c:	e02c      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800236a:	461a      	mov	r2, r3
 800236c:	f000 f92f 	bl	80025ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2160      	movs	r1, #96	@ 0x60
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f959 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 800237c:	e01c      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	461a      	mov	r2, r3
 800238c:	f000 f8f0 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2140      	movs	r1, #64	@ 0x40
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f949 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 800239c:	e00c      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f000 f940 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 80023ae:	e003      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      break;
 80023b4:	e000      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a43      	ldr	r2, [pc, #268]	@ (8002544 <TIM_Base_SetConfig+0x120>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d013      	beq.n	8002464 <TIM_Base_SetConfig+0x40>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002442:	d00f      	beq.n	8002464 <TIM_Base_SetConfig+0x40>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a40      	ldr	r2, [pc, #256]	@ (8002548 <TIM_Base_SetConfig+0x124>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00b      	beq.n	8002464 <TIM_Base_SetConfig+0x40>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3f      	ldr	r2, [pc, #252]	@ (800254c <TIM_Base_SetConfig+0x128>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <TIM_Base_SetConfig+0x40>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3e      	ldr	r2, [pc, #248]	@ (8002550 <TIM_Base_SetConfig+0x12c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_Base_SetConfig+0x40>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3d      	ldr	r2, [pc, #244]	@ (8002554 <TIM_Base_SetConfig+0x130>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d108      	bne.n	8002476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800246a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a32      	ldr	r2, [pc, #200]	@ (8002544 <TIM_Base_SetConfig+0x120>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02b      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002484:	d027      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2f      	ldr	r2, [pc, #188]	@ (8002548 <TIM_Base_SetConfig+0x124>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d023      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a2e      	ldr	r2, [pc, #184]	@ (800254c <TIM_Base_SetConfig+0x128>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01f      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a2d      	ldr	r2, [pc, #180]	@ (8002550 <TIM_Base_SetConfig+0x12c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01b      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002554 <TIM_Base_SetConfig+0x130>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d017      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002558 <TIM_Base_SetConfig+0x134>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a2a      	ldr	r2, [pc, #168]	@ (800255c <TIM_Base_SetConfig+0x138>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00f      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a29      	ldr	r2, [pc, #164]	@ (8002560 <TIM_Base_SetConfig+0x13c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00b      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a28      	ldr	r2, [pc, #160]	@ (8002564 <TIM_Base_SetConfig+0x140>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a27      	ldr	r2, [pc, #156]	@ (8002568 <TIM_Base_SetConfig+0x144>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d003      	beq.n	80024d6 <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a26      	ldr	r2, [pc, #152]	@ (800256c <TIM_Base_SetConfig+0x148>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d108      	bne.n	80024e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <TIM_Base_SetConfig+0x120>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d003      	beq.n	8002516 <TIM_Base_SetConfig+0xf2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a10      	ldr	r2, [pc, #64]	@ (8002554 <TIM_Base_SetConfig+0x130>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d103      	bne.n	800251e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f043 0204 	orr.w	r2, r3, #4
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	601a      	str	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40010000 	.word	0x40010000
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40010400 	.word	0x40010400
 8002558:	40014000 	.word	0x40014000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800
 8002564:	40001800 	.word	0x40001800
 8002568:	40001c00 	.word	0x40001c00
 800256c:	40002000 	.word	0x40002000

08002570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0201 	bic.w	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800259a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f023 030a 	bic.w	r3, r3, #10
 80025ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b087      	sub	sp, #28
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f023 0210 	bic.w	r2, r3, #16
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	031b      	lsls	r3, r3, #12
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800260a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	621a      	str	r2, [r3, #32]
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	f043 0307 	orr.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800267e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	021a      	lsls	r2, r3, #8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	431a      	orrs	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e05a      	b.n	8002772 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d022      	beq.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002708:	d01d      	beq.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1d      	ldr	r2, [pc, #116]	@ (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d018      	beq.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1b      	ldr	r2, [pc, #108]	@ (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1a      	ldr	r2, [pc, #104]	@ (800278c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d00e      	beq.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d009      	beq.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a17      	ldr	r2, [pc, #92]	@ (8002794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a15      	ldr	r2, [pc, #84]	@ (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10c      	bne.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800274c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	4313      	orrs	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40010000 	.word	0x40010000
 8002784:	40000400 	.word	0x40000400
 8002788:	40000800 	.word	0x40000800
 800278c:	40000c00 	.word	0x40000c00
 8002790:	40010400 	.word	0x40010400
 8002794:	40014000 	.word	0x40014000
 8002798:	40001800 	.word	0x40001800

0800279c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e042      	b.n	800285c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe f91a 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2224      	movs	r2, #36	@ 0x24
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f82b 	bl	8002864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800281c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800282c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800283c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b0c0      	sub	sp, #256	@ 0x100
 800286a:	af00      	add	r7, sp, #0
 800286c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	68d9      	ldr	r1, [r3, #12]
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	ea40 0301 	orr.w	r3, r0, r1
 800288c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028bc:	f021 010c 	bic.w	r1, r1, #12
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028ca:	430b      	orrs	r3, r1
 80028cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028de:	6999      	ldr	r1, [r3, #24]
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	ea40 0301 	orr.w	r3, r0, r1
 80028ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <UART_SetConfig+0x2cc>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d005      	beq.n	8002904 <UART_SetConfig+0xa0>
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002b34 <UART_SetConfig+0x2d0>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d104      	bne.n	800290e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002904:	f7fe fdda 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 8002908:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800290c:	e003      	b.n	8002916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800290e:	f7fe fdc1 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8002912:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002920:	f040 810c 	bne.w	8002b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002928:	2200      	movs	r2, #0
 800292a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800292e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002936:	4622      	mov	r2, r4
 8002938:	462b      	mov	r3, r5
 800293a:	1891      	adds	r1, r2, r2
 800293c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800293e:	415b      	adcs	r3, r3
 8002940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002946:	4621      	mov	r1, r4
 8002948:	eb12 0801 	adds.w	r8, r2, r1
 800294c:	4629      	mov	r1, r5
 800294e:	eb43 0901 	adc.w	r9, r3, r1
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800295e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002966:	4690      	mov	r8, r2
 8002968:	4699      	mov	r9, r3
 800296a:	4623      	mov	r3, r4
 800296c:	eb18 0303 	adds.w	r3, r8, r3
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002974:	462b      	mov	r3, r5
 8002976:	eb49 0303 	adc.w	r3, r9, r3
 800297a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800298a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800298e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002992:	460b      	mov	r3, r1
 8002994:	18db      	adds	r3, r3, r3
 8002996:	653b      	str	r3, [r7, #80]	@ 0x50
 8002998:	4613      	mov	r3, r2
 800299a:	eb42 0303 	adc.w	r3, r2, r3
 800299e:	657b      	str	r3, [r7, #84]	@ 0x54
 80029a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029a8:	f7fd fc8a 	bl	80002c0 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4b61      	ldr	r3, [pc, #388]	@ (8002b38 <UART_SetConfig+0x2d4>)
 80029b2:	fba3 2302 	umull	r2, r3, r3, r2
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	011c      	lsls	r4, r3, #4
 80029ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029be:	2200      	movs	r2, #0
 80029c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029cc:	4642      	mov	r2, r8
 80029ce:	464b      	mov	r3, r9
 80029d0:	1891      	adds	r1, r2, r2
 80029d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029d4:	415b      	adcs	r3, r3
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029dc:	4641      	mov	r1, r8
 80029de:	eb12 0a01 	adds.w	sl, r2, r1
 80029e2:	4649      	mov	r1, r9
 80029e4:	eb43 0b01 	adc.w	fp, r3, r1
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fc:	4692      	mov	sl, r2
 80029fe:	469b      	mov	fp, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	eb1a 0303 	adds.w	r3, sl, r3
 8002a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	18db      	adds	r3, r3, r3
 8002a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a2e:	4613      	mov	r3, r2
 8002a30:	eb42 0303 	adc.w	r3, r2, r3
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a3e:	f7fd fc3f 	bl	80002c0 <__aeabi_uldivmod>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2264      	movs	r2, #100	@ 0x64
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	1acb      	subs	r3, r1, r3
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a5e:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002a60:	fba3 2302 	umull	r2, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a6c:	441c      	add	r4, r3
 8002a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a80:	4642      	mov	r2, r8
 8002a82:	464b      	mov	r3, r9
 8002a84:	1891      	adds	r1, r2, r2
 8002a86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a88:	415b      	adcs	r3, r3
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a90:	4641      	mov	r1, r8
 8002a92:	1851      	adds	r1, r2, r1
 8002a94:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a96:	4649      	mov	r1, r9
 8002a98:	414b      	adcs	r3, r1
 8002a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002aa8:	4659      	mov	r1, fp
 8002aaa:	00cb      	lsls	r3, r1, #3
 8002aac:	4651      	mov	r1, sl
 8002aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab2:	4651      	mov	r1, sl
 8002ab4:	00ca      	lsls	r2, r1, #3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	4642      	mov	r2, r8
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	460a      	mov	r2, r1
 8002ac8:	eb42 0303 	adc.w	r3, r2, r3
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002adc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	18db      	adds	r3, r3, r3
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aea:	4613      	mov	r3, r2
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002afa:	f7fd fbe1 	bl	80002c0 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002b04:	fba3 1302 	umull	r1, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	2164      	movs	r1, #100	@ 0x64
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	3332      	adds	r3, #50	@ 0x32
 8002b16:	4a08      	ldr	r2, [pc, #32]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	f003 0207 	and.w	r2, r3, #7
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4422      	add	r2, r4
 8002b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b2c:	e106      	b.n	8002d3c <UART_SetConfig+0x4d8>
 8002b2e:	bf00      	nop
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b4e:	4642      	mov	r2, r8
 8002b50:	464b      	mov	r3, r9
 8002b52:	1891      	adds	r1, r2, r2
 8002b54:	6239      	str	r1, [r7, #32]
 8002b56:	415b      	adcs	r3, r3
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b5e:	4641      	mov	r1, r8
 8002b60:	1854      	adds	r4, r2, r1
 8002b62:	4649      	mov	r1, r9
 8002b64:	eb43 0501 	adc.w	r5, r3, r1
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	00eb      	lsls	r3, r5, #3
 8002b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b76:	00e2      	lsls	r2, r4, #3
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4643      	mov	r3, r8
 8002b7e:	18e3      	adds	r3, r4, r3
 8002b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b84:	464b      	mov	r3, r9
 8002b86:	eb45 0303 	adc.w	r3, r5, r3
 8002b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002baa:	4629      	mov	r1, r5
 8002bac:	008b      	lsls	r3, r1, #2
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	008a      	lsls	r2, r1, #2
 8002bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bbc:	f7fd fb80 	bl	80002c0 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4b60      	ldr	r3, [pc, #384]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	011c      	lsls	r4, r3, #4
 8002bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002be0:	4642      	mov	r2, r8
 8002be2:	464b      	mov	r3, r9
 8002be4:	1891      	adds	r1, r2, r2
 8002be6:	61b9      	str	r1, [r7, #24]
 8002be8:	415b      	adcs	r3, r3
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	1851      	adds	r1, r2, r1
 8002bf4:	6139      	str	r1, [r7, #16]
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	414b      	adcs	r3, r1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c08:	4659      	mov	r1, fp
 8002c0a:	00cb      	lsls	r3, r1, #3
 8002c0c:	4651      	mov	r1, sl
 8002c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c12:	4651      	mov	r1, sl
 8002c14:	00ca      	lsls	r2, r1, #3
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c24:	464b      	mov	r3, r9
 8002c26:	460a      	mov	r2, r1
 8002c28:	eb42 0303 	adc.w	r3, r2, r3
 8002c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c48:	4649      	mov	r1, r9
 8002c4a:	008b      	lsls	r3, r1, #2
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c52:	4641      	mov	r1, r8
 8002c54:	008a      	lsls	r2, r1, #2
 8002c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c5a:	f7fd fb31 	bl	80002c0 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002c66:	fba3 2301 	umull	r2, r3, r3, r1
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2264      	movs	r2, #100	@ 0x64
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	1acb      	subs	r3, r1, r3
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	3332      	adds	r3, #50	@ 0x32
 8002c78:	4a33      	ldr	r2, [pc, #204]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c84:	441c      	add	r4, r3
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c94:	4642      	mov	r2, r8
 8002c96:	464b      	mov	r3, r9
 8002c98:	1891      	adds	r1, r2, r2
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	415b      	adcs	r3, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	1851      	adds	r1, r2, r1
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	4649      	mov	r1, r9
 8002cac:	414b      	adcs	r3, r1
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	00cb      	lsls	r3, r1, #3
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	00ca      	lsls	r2, r1, #3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	189b      	adds	r3, r3, r2
 8002cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	460a      	mov	r2, r1
 8002cda:	eb42 0303 	adc.w	r3, r2, r3
 8002cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cea:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	008b      	lsls	r3, r1, #2
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d02:	4641      	mov	r1, r8
 8002d04:	008a      	lsls	r2, r1, #2
 8002d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d0a:	f7fd fad9 	bl	80002c0 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	@ 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	3332      	adds	r3, #50	@ 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d42:	46bd      	mov	sp, r7
 8002d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d50:	f000 fee4 	bl	8003b1c <vTaskStartScheduler>
  
  return osOK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f103 0208 	add.w	r2, r3, #8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0208 	add.w	r2, r3, #8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f103 0208 	add.w	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d103      	bne.n	8002e1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e00c      	b.n	8002e36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3308      	adds	r3, #8
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	e002      	b.n	8002e2a <vListInsert+0x2e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d2f6      	bcs.n	8002e24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6852      	ldr	r2, [r2, #4]
 8002e8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d103      	bne.n	8002ea2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1e5a      	subs	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ef0:	f001 fc7a 	bl	80047e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	441a      	add	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	3b01      	subs	r3, #1
 8002f22:	68f9      	ldr	r1, [r7, #12]
 8002f24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	441a      	add	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	22ff      	movs	r2, #255	@ 0xff
 8002f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	22ff      	movs	r2, #255	@ 0xff
 8002f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d114      	bne.n	8002f70 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01a      	beq.n	8002f84 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3310      	adds	r3, #16
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 f84a 	bl	8003fec <xTaskRemoveFromEventList>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d012      	beq.n	8002f84 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <xQueueGenericReset+0xd0>)
 8002f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	e009      	b.n	8002f84 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3310      	adds	r3, #16
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fef0 	bl	8002d5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3324      	adds	r3, #36	@ 0x24
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff feeb 	bl	8002d5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f84:	f001 fc62 	bl	800484c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f88:	2301      	movs	r3, #1
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	e000ed04 	.word	0xe000ed04

08002f98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	@ 0x28
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	613b      	str	r3, [r7, #16]
}
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3350      	adds	r3, #80	@ 0x50
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fce8 	bl	80049a8 <pvPortMalloc>
 8002fd8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d011      	beq.n	8003004 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	3350      	adds	r3, #80	@ 0x50
 8002fe8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff2:	79fa      	ldrb	r2, [r7, #7]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f805 	bl	800300e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003004:	69bb      	ldr	r3, [r7, #24]
	}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e002      	b.n	8003030 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800303c:	2101      	movs	r1, #1
 800303e:	69b8      	ldr	r0, [r7, #24]
 8003040:	f7ff ff40 	bl	8002ec4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	@ 0x38
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <xQueueGenericSend+0x34>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <xQueueGenericSend+0x42>
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <xQueueGenericSend+0x46>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <xQueueGenericSend+0x48>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10b      	bne.n	80030b8 <xQueueGenericSend+0x64>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030b2:	bf00      	nop
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d103      	bne.n	80030c6 <xQueueGenericSend+0x72>
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <xQueueGenericSend+0x76>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <xQueueGenericSend+0x78>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <xQueueGenericSend+0x94>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	623b      	str	r3, [r7, #32]
}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030e8:	f001 f942 	bl	8004370 <xTaskGetSchedulerState>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <xQueueGenericSend+0xa4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <xQueueGenericSend+0xa8>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <xQueueGenericSend+0xaa>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10b      	bne.n	800311a <xQueueGenericSend+0xc6>
	__asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	61fb      	str	r3, [r7, #28]
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	e7fd      	b.n	8003116 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800311a:	f001 fb65 	bl	80047e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <xQueueGenericSend+0xdc>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d129      	bne.n	8003184 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003136:	f000 f971 	bl	800341c <prvCopyDataToQueue>
 800313a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d010      	beq.n	8003166 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	3324      	adds	r3, #36	@ 0x24
 8003148:	4618      	mov	r0, r3
 800314a:	f000 ff4f 	bl	8003fec <xTaskRemoveFromEventList>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003154:	4b3f      	ldr	r3, [pc, #252]	@ (8003254 <xQueueGenericSend+0x200>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	e00a      	b.n	800317c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800316c:	4b39      	ldr	r3, [pc, #228]	@ (8003254 <xQueueGenericSend+0x200>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800317c:	f001 fb66 	bl	800484c <vPortExitCritical>
				return pdPASS;
 8003180:	2301      	movs	r3, #1
 8003182:	e063      	b.n	800324c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800318a:	f001 fb5f 	bl	800484c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800318e:	2300      	movs	r3, #0
 8003190:	e05c      	b.n	800324c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4618      	mov	r0, r3
 800319e:	f000 ff89 	bl	80040b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031a6:	f001 fb51 	bl	800484c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031aa:	f000 fd1b 	bl	8003be4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031ae:	f001 fb1b 	bl	80047e8 <vPortEnterCritical>
 80031b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d103      	bne.n	80031c8 <xQueueGenericSend+0x174>
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d103      	bne.n	80031de <xQueueGenericSend+0x18a>
 80031d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031de:	f001 fb35 	bl	800484c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031e2:	1d3a      	adds	r2, r7, #4
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 ff78 	bl	80040e0 <xTaskCheckForTimeOut>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d124      	bne.n	8003240 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031f8:	f000 fa08 	bl	800360c <prvIsQueueFull>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d018      	beq.n	8003234 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	3310      	adds	r3, #16
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fec8 	bl	8003fa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003212:	f000 f993 	bl	800353c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003216:	f000 fcf3 	bl	8003c00 <xTaskResumeAll>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f af7c 	bne.w	800311a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003222:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <xQueueGenericSend+0x200>)
 8003224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	e772      	b.n	800311a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003236:	f000 f981 	bl	800353c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800323a:	f000 fce1 	bl	8003c00 <xTaskResumeAll>
 800323e:	e76c      	b.n	800311a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003242:	f000 f97b 	bl	800353c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003246:	f000 fcdb 	bl	8003c00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800324a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800324c:	4618      	mov	r0, r3
 800324e:	3738      	adds	r7, #56	@ 0x38
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	e000ed04 	.word	0xe000ed04

08003258 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	@ 0x30
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003264:	2300      	movs	r3, #0
 8003266:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10b      	bne.n	800328a <xQueueReceive+0x32>
	__asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	623b      	str	r3, [r7, #32]
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	e7fd      	b.n	8003286 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <xQueueReceive+0x40>
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <xQueueReceive+0x44>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <xQueueReceive+0x46>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <xQueueReceive+0x62>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	61fb      	str	r3, [r7, #28]
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	e7fd      	b.n	80032b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ba:	f001 f859 	bl	8004370 <xTaskGetSchedulerState>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <xQueueReceive+0x72>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <xQueueReceive+0x76>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <xQueueReceive+0x78>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <xQueueReceive+0x94>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	61bb      	str	r3, [r7, #24]
}
 80032e6:	bf00      	nop
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ec:	f001 fa7c 	bl	80047e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01f      	beq.n	800333c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003300:	f000 f8f6 	bl	80034f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00f      	beq.n	8003334 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	3310      	adds	r3, #16
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fe67 	bl	8003fec <xTaskRemoveFromEventList>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003324:	4b3c      	ldr	r3, [pc, #240]	@ (8003418 <xQueueReceive+0x1c0>)
 8003326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003334:	f001 fa8a 	bl	800484c <vPortExitCritical>
				return pdPASS;
 8003338:	2301      	movs	r3, #1
 800333a:	e069      	b.n	8003410 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003342:	f001 fa83 	bl	800484c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003346:	2300      	movs	r3, #0
 8003348:	e062      	b.n	8003410 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800334a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fead 	bl	80040b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800335a:	2301      	movs	r3, #1
 800335c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800335e:	f001 fa75 	bl	800484c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003362:	f000 fc3f 	bl	8003be4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003366:	f001 fa3f 	bl	80047e8 <vPortEnterCritical>
 800336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003370:	b25b      	sxtb	r3, r3
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d103      	bne.n	8003380 <xQueueReceive+0x128>
 8003378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003382:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003386:	b25b      	sxtb	r3, r3
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d103      	bne.n	8003396 <xQueueReceive+0x13e>
 800338e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003396:	f001 fa59 	bl	800484c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800339a:	1d3a      	adds	r2, r7, #4
 800339c:	f107 0310 	add.w	r3, r7, #16
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fe9c 	bl	80040e0 <xTaskCheckForTimeOut>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d123      	bne.n	80033f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b0:	f000 f916 	bl	80035e0 <prvIsQueueEmpty>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	3324      	adds	r3, #36	@ 0x24
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fdec 	bl	8003fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ca:	f000 f8b7 	bl	800353c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033ce:	f000 fc17 	bl	8003c00 <xTaskResumeAll>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d189      	bne.n	80032ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80033d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <xQueueReceive+0x1c0>)
 80033da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	e780      	b.n	80032ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ec:	f000 f8a6 	bl	800353c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033f0:	f000 fc06 	bl	8003c00 <xTaskResumeAll>
 80033f4:	e77a      	b.n	80032ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033f8:	f000 f8a0 	bl	800353c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033fc:	f000 fc00 	bl	8003c00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003402:	f000 f8ed 	bl	80035e0 <prvIsQueueEmpty>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	f43f af6f 	beq.w	80032ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800340e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003410:	4618      	mov	r0, r3
 8003412:	3730      	adds	r7, #48	@ 0x30
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	e000ed04 	.word	0xe000ed04

0800341c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d14d      	bne.n	80034de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 ffb0 	bl	80043ac <xTaskPriorityDisinherit>
 800344c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	e043      	b.n	80034de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d119      	bne.n	8003490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6858      	ldr	r0, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	461a      	mov	r2, r3
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	f004 f919 	bl	800769e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	441a      	add	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d32b      	bcc.n	80034de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	e026      	b.n	80034de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68d8      	ldr	r0, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	461a      	mov	r2, r3
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	f004 f8ff 	bl	800769e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	425b      	negs	r3, r3
 80034aa:	441a      	add	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d207      	bcs.n	80034cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	425b      	negs	r3, r3
 80034c6:	441a      	add	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d105      	bne.n	80034de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	3b01      	subs	r3, #1
 80034dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d018      	beq.n	8003534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	d303      	bcc.n	8003524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68d9      	ldr	r1, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	461a      	mov	r2, r3
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	f004 f8b5 	bl	800769e <memcpy>
	}
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003544:	f001 f950 	bl	80047e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800354e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003550:	e011      	b.n	8003576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3324      	adds	r3, #36	@ 0x24
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd44 	bl	8003fec <xTaskRemoveFromEventList>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800356a:	f000 fe1d 	bl	80041a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	3b01      	subs	r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	dce9      	bgt.n	8003552 <prvUnlockQueue+0x16>
 800357e:	e000      	b.n	8003582 <prvUnlockQueue+0x46>
					break;
 8003580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	22ff      	movs	r2, #255	@ 0xff
 8003586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800358a:	f001 f95f 	bl	800484c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800358e:	f001 f92b 	bl	80047e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800359a:	e011      	b.n	80035c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3310      	adds	r3, #16
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fd1f 	bl	8003fec <xTaskRemoveFromEventList>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035b4:	f000 fdf8 	bl	80041a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035b8:	7bbb      	ldrb	r3, [r7, #14]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	dce9      	bgt.n	800359c <prvUnlockQueue+0x60>
 80035c8:	e000      	b.n	80035cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	22ff      	movs	r2, #255	@ 0xff
 80035d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80035d4:	f001 f93a 	bl	800484c <vPortExitCritical>
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035e8:	f001 f8fe 	bl	80047e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e001      	b.n	80035fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035fe:	f001 f925 	bl	800484c <vPortExitCritical>

	return xReturn;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003614:	f001 f8e8 	bl	80047e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	429a      	cmp	r2, r3
 8003622:	d102      	bne.n	800362a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e001      	b.n	800362e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800362e:	f001 f90d 	bl	800484c <vPortExitCritical>

	return xReturn;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	@ 0x38
 8003640:	af04      	add	r7, sp, #16
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800364a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	623b      	str	r3, [r7, #32]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <xTaskCreateStatic+0x4a>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	61fb      	str	r3, [r7, #28]
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003686:	2364      	movs	r3, #100	@ 0x64
 8003688:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b64      	cmp	r3, #100	@ 0x64
 800368e:	d00b      	beq.n	80036a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61bb      	str	r3, [r7, #24]
}
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01e      	beq.n	80036ee <xTaskCreateStatic+0xb2>
 80036b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01b      	beq.n	80036ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036c8:	2300      	movs	r3, #0
 80036ca:	9303      	str	r3, [sp, #12]
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f850 	bl	8003786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036e8:	f000 f8e4 	bl	80038b4 <prvAddNewTaskToReadyList>
 80036ec:	e001      	b.n	80036f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036f2:	697b      	ldr	r3, [r7, #20]
	}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3728      	adds	r7, #40	@ 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	@ 0x30
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f949 	bl	80049a8 <pvPortMalloc>
 8003716:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800371e:	2064      	movs	r0, #100	@ 0x64
 8003720:	f001 f942 	bl	80049a8 <pvPortMalloc>
 8003724:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
 8003732:	e005      	b.n	8003740 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f001 fa05 	bl	8004b44 <vPortFree>
 800373a:	e001      	b.n	8003740 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d017      	beq.n	8003776 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	2300      	movs	r3, #0
 8003752:	9303      	str	r3, [sp, #12]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f80e 	bl	8003786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800376a:	69f8      	ldr	r0, [r7, #28]
 800376c:	f000 f8a2 	bl	80038b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003770:	2301      	movs	r3, #1
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e002      	b.n	800377c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295
 800377a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800377c:	69bb      	ldr	r3, [r7, #24]
	}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	461a      	mov	r2, r3
 800379e:	21a5      	movs	r1, #165	@ 0xa5
 80037a0:	f003 ff01 	bl	80075a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037ae:	3b01      	subs	r3, #1
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	617b      	str	r3, [r7, #20]
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01f      	beq.n	800382c <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	e012      	b.n	8003818 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	7819      	ldrb	r1, [r3, #0]
 80037fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	3334      	adds	r3, #52	@ 0x34
 8003802:	460a      	mov	r2, r1
 8003804:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3301      	adds	r3, #1
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b0f      	cmp	r3, #15
 800381c:	d9e9      	bls.n	80037f2 <prvInitialiseNewTask+0x6c>
 800381e:	e000      	b.n	8003822 <prvInitialiseNewTask+0x9c>
			{
				break;
 8003820:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800382a:	e003      	b.n	8003834 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	2b06      	cmp	r3, #6
 8003838:	d901      	bls.n	800383e <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800383a:	2306      	movs	r3, #6
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003842:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003848:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	2200      	movs	r2, #0
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	3304      	adds	r3, #4
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff faa0 	bl	8002d9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385c:	3318      	adds	r3, #24
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fa9b 	bl	8002d9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003868:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	f1c3 0207 	rsb	r2, r3, #7
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387c:	2200      	movs	r2, #0
 800387e:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003882:	2200      	movs	r2, #0
 8003884:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	69b8      	ldr	r0, [r7, #24]
 8003894:	f000 fe78 	bl	8004588 <pxPortInitialiseStack>
 8003898:	4602      	mov	r2, r0
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038aa:	bf00      	nop
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038bc:	f000 ff94 	bl	80047e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003974 <prvAddNewTaskToReadyList+0xc0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003974 <prvAddNewTaskToReadyList+0xc0>)
 80038c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003978 <prvAddNewTaskToReadyList+0xc4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038d2:	4a29      	ldr	r2, [pc, #164]	@ (8003978 <prvAddNewTaskToReadyList+0xc4>)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038d8:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <prvAddNewTaskToReadyList+0xc0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d110      	bne.n	8003902 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038e0:	f000 fc88 	bl	80041f4 <prvInitialiseTaskLists>
 80038e4:	e00d      	b.n	8003902 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038e6:	4b25      	ldr	r3, [pc, #148]	@ (800397c <prvAddNewTaskToReadyList+0xc8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ee:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <prvAddNewTaskToReadyList+0xc4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d802      	bhi.n	8003902 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <prvAddNewTaskToReadyList+0xc4>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003902:	4b1f      	ldr	r3, [pc, #124]	@ (8003980 <prvAddNewTaskToReadyList+0xcc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	4a1d      	ldr	r2, [pc, #116]	@ (8003980 <prvAddNewTaskToReadyList+0xcc>)
 800390a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800390c:	4b1c      	ldr	r3, [pc, #112]	@ (8003980 <prvAddNewTaskToReadyList+0xcc>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	2201      	movs	r2, #1
 800391a:	409a      	lsls	r2, r3
 800391c:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <prvAddNewTaskToReadyList+0xd0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <prvAddNewTaskToReadyList+0xd0>)
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4a15      	ldr	r2, [pc, #84]	@ (8003988 <prvAddNewTaskToReadyList+0xd4>)
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7ff fa39 	bl	8002db4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003942:	f000 ff83 	bl	800484c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <prvAddNewTaskToReadyList+0xc8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00e      	beq.n	800396c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800394e:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <prvAddNewTaskToReadyList+0xc4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	429a      	cmp	r2, r3
 800395a:	d207      	bcs.n	800396c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <prvAddNewTaskToReadyList+0xd8>)
 800395e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200004f0 	.word	0x200004f0
 8003978:	200003f0 	.word	0x200003f0
 800397c:	200004fc 	.word	0x200004fc
 8003980:	2000050c 	.word	0x2000050c
 8003984:	200004f8 	.word	0x200004f8
 8003988:	200003f4 	.word	0x200003f4
 800398c:	e000ed04 	.word	0xe000ed04

08003990 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003998:	f000 ff26 	bl	80047e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <vTaskDelete+0x18>
 80039a2:	4b39      	ldr	r3, [pc, #228]	@ (8003a88 <vTaskDelete+0xf8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	e000      	b.n	80039aa <vTaskDelete+0x1a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fa5c 	bl	8002e6e <uxListRemove>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d115      	bne.n	80039e8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c0:	4932      	ldr	r1, [pc, #200]	@ (8003a8c <vTaskDelete+0xfc>)
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10a      	bne.n	80039e8 <vTaskDelete+0x58>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	2201      	movs	r2, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43da      	mvns	r2, r3
 80039de:	4b2c      	ldr	r3, [pc, #176]	@ (8003a90 <vTaskDelete+0x100>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4013      	ands	r3, r2
 80039e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a90 <vTaskDelete+0x100>)
 80039e6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3318      	adds	r3, #24
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fa3a 	bl	8002e6e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80039fa:	4b26      	ldr	r3, [pc, #152]	@ (8003a94 <vTaskDelete+0x104>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	4a24      	ldr	r2, [pc, #144]	@ (8003a94 <vTaskDelete+0x104>)
 8003a02:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003a04:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <vTaskDelete+0xf8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d10b      	bne.n	8003a26 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4820      	ldr	r0, [pc, #128]	@ (8003a98 <vTaskDelete+0x108>)
 8003a16:	f7ff f9cd 	bl	8002db4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003a1a:	4b20      	ldr	r3, [pc, #128]	@ (8003a9c <vTaskDelete+0x10c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	4a1e      	ldr	r2, [pc, #120]	@ (8003a9c <vTaskDelete+0x10c>)
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e009      	b.n	8003a3a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003a26:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <vTaskDelete+0x110>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <vTaskDelete+0x110>)
 8003a2e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fc4d 	bl	80042d0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003a36:	f000 fc7b 	bl	8004330 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003a3a:	f000 ff07 	bl	800484c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003a3e:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <vTaskDelete+0x114>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01c      	beq.n	8003a80 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8003a46:	4b10      	ldr	r3, [pc, #64]	@ (8003a88 <vTaskDelete+0xf8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d117      	bne.n	8003a80 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003a50:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <vTaskDelete+0x118>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00b      	beq.n	8003a70 <vTaskDelete+0xe0>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	60bb      	str	r3, [r7, #8]
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	e7fd      	b.n	8003a6c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003a70:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <vTaskDelete+0x11c>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	200003f0 	.word	0x200003f0
 8003a8c:	200003f4 	.word	0x200003f4
 8003a90:	200004f8 	.word	0x200004f8
 8003a94:	2000050c 	.word	0x2000050c
 8003a98:	200004c4 	.word	0x200004c4
 8003a9c:	200004d8 	.word	0x200004d8
 8003aa0:	200004f0 	.word	0x200004f0
 8003aa4:	200004fc 	.word	0x200004fc
 8003aa8:	20000518 	.word	0x20000518
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ac2:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <vTaskDelay+0x64>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <vTaskDelay+0x32>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	60bb      	str	r3, [r7, #8]
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	e7fd      	b.n	8003ade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ae2:	f000 f87f 	bl	8003be4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fce7 	bl	80044bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003aee:	f000 f887 	bl	8003c00 <xTaskResumeAll>
 8003af2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d107      	bne.n	8003b0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003afa:	4b07      	ldr	r3, [pc, #28]	@ (8003b18 <vTaskDelay+0x68>)
 8003afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000518 	.word	0x20000518
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b2a:	463a      	mov	r2, r7
 8003b2c:	1d39      	adds	r1, r7, #4
 8003b2e:	f107 0308 	add.w	r3, r7, #8
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fc fd62 	bl	80005fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b38:	6839      	ldr	r1, [r7, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	9202      	str	r2, [sp, #8]
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	2300      	movs	r3, #0
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2300      	movs	r3, #0
 8003b48:	460a      	mov	r2, r1
 8003b4a:	4920      	ldr	r1, [pc, #128]	@ (8003bcc <vTaskStartScheduler+0xb0>)
 8003b4c:	4820      	ldr	r0, [pc, #128]	@ (8003bd0 <vTaskStartScheduler+0xb4>)
 8003b4e:	f7ff fd75 	bl	800363c <xTaskCreateStatic>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd4 <vTaskStartScheduler+0xb8>)
 8003b56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b58:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd4 <vTaskStartScheduler+0xb8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b60:	2301      	movs	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e001      	b.n	8003b6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d118      	bne.n	8003ba2 <vTaskStartScheduler+0x86>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	613b      	str	r3, [r7, #16]
}
 8003b82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b84:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <vTaskStartScheduler+0xbc>)
 8003b86:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b8c:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <vTaskStartScheduler+0xc0>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b92:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <vTaskStartScheduler+0xc4>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003b98:	f7fc feb6 	bl	8000908 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b9c:	f000 fd80 	bl	80046a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ba0:	e00f      	b.n	8003bc2 <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d10b      	bne.n	8003bc2 <vTaskStartScheduler+0xa6>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	60fb      	str	r3, [r7, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <vTaskStartScheduler+0xa2>
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	08008400 	.word	0x08008400
 8003bd0:	080041c1 	.word	0x080041c1
 8003bd4:	20000514 	.word	0x20000514
 8003bd8:	20000510 	.word	0x20000510
 8003bdc:	200004fc 	.word	0x200004fc
 8003be0:	200004f4 	.word	0x200004f4

08003be4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003be8:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <vTaskSuspendAll+0x18>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a03      	ldr	r2, [pc, #12]	@ (8003bfc <vTaskSuspendAll+0x18>)
 8003bf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	20000518 	.word	0x20000518

08003c00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c0e:	4b42      	ldr	r3, [pc, #264]	@ (8003d18 <xTaskResumeAll+0x118>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10b      	bne.n	8003c2e <xTaskResumeAll+0x2e>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	603b      	str	r3, [r7, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	e7fd      	b.n	8003c2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c2e:	f000 fddb 	bl	80047e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c32:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <xTaskResumeAll+0x118>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	4a37      	ldr	r2, [pc, #220]	@ (8003d18 <xTaskResumeAll+0x118>)
 8003c3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3c:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <xTaskResumeAll+0x118>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d161      	bne.n	8003d08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c44:	4b35      	ldr	r3, [pc, #212]	@ (8003d1c <xTaskResumeAll+0x11c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d05d      	beq.n	8003d08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c4c:	e02e      	b.n	8003cac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c4e:	4b34      	ldr	r3, [pc, #208]	@ (8003d20 <xTaskResumeAll+0x120>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3318      	adds	r3, #24
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff f907 	bl	8002e6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff f902 	bl	8002e6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	2201      	movs	r2, #1
 8003c70:	409a      	lsls	r2, r3
 8003c72:	4b2c      	ldr	r3, [pc, #176]	@ (8003d24 <xTaskResumeAll+0x124>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <xTaskResumeAll+0x124>)
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4a27      	ldr	r2, [pc, #156]	@ (8003d28 <xTaskResumeAll+0x128>)
 8003c8a:	441a      	add	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f7ff f88e 	bl	8002db4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9c:	4b23      	ldr	r3, [pc, #140]	@ (8003d2c <xTaskResumeAll+0x12c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ca6:	4b22      	ldr	r3, [pc, #136]	@ (8003d30 <xTaskResumeAll+0x130>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cac:	4b1c      	ldr	r3, [pc, #112]	@ (8003d20 <xTaskResumeAll+0x120>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1cc      	bne.n	8003c4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cba:	f000 fb39 	bl	8004330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003d34 <xTaskResumeAll+0x134>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d010      	beq.n	8003cec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cca:	f000 f837 	bl	8003d3c <xTaskIncrementTick>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003cd4:	4b16      	ldr	r3, [pc, #88]	@ (8003d30 <xTaskResumeAll+0x130>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f1      	bne.n	8003cca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ce6:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <xTaskResumeAll+0x134>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cec:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <xTaskResumeAll+0x130>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <xTaskResumeAll+0x138>)
 8003cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d08:	f000 fda0 	bl	800484c <vPortExitCritical>

	return xAlreadyYielded;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000518 	.word	0x20000518
 8003d1c:	200004f0 	.word	0x200004f0
 8003d20:	200004b0 	.word	0x200004b0
 8003d24:	200004f8 	.word	0x200004f8
 8003d28:	200003f4 	.word	0x200003f4
 8003d2c:	200003f0 	.word	0x200003f0
 8003d30:	20000504 	.word	0x20000504
 8003d34:	20000500 	.word	0x20000500
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d46:	4b4f      	ldr	r3, [pc, #316]	@ (8003e84 <xTaskIncrementTick+0x148>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 808f 	bne.w	8003e6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d50:	4b4d      	ldr	r3, [pc, #308]	@ (8003e88 <xTaskIncrementTick+0x14c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d58:	4a4b      	ldr	r2, [pc, #300]	@ (8003e88 <xTaskIncrementTick+0x14c>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d121      	bne.n	8003da8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d64:	4b49      	ldr	r3, [pc, #292]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	e7fd      	b.n	8003d82 <xTaskIncrementTick+0x46>
 8003d86:	4b41      	ldr	r3, [pc, #260]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	4b40      	ldr	r3, [pc, #256]	@ (8003e90 <xTaskIncrementTick+0x154>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a3e      	ldr	r2, [pc, #248]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4a3e      	ldr	r2, [pc, #248]	@ (8003e90 <xTaskIncrementTick+0x154>)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <xTaskIncrementTick+0x158>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	4a3c      	ldr	r2, [pc, #240]	@ (8003e94 <xTaskIncrementTick+0x158>)
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	f000 fac4 	bl	8004330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003da8:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <xTaskIncrementTick+0x15c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d348      	bcc.n	8003e44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db2:	4b36      	ldr	r3, [pc, #216]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbc:	4b36      	ldr	r3, [pc, #216]	@ (8003e98 <xTaskIncrementTick+0x15c>)
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc2:	601a      	str	r2, [r3, #0]
					break;
 8003dc4:	e03e      	b.n	8003e44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc6:	4b31      	ldr	r3, [pc, #196]	@ (8003e8c <xTaskIncrementTick+0x150>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d203      	bcs.n	8003de6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dde:	4a2e      	ldr	r2, [pc, #184]	@ (8003e98 <xTaskIncrementTick+0x15c>)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003de4:	e02e      	b.n	8003e44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff f83f 	bl	8002e6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	3318      	adds	r3, #24
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff f836 	bl	8002e6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	2201      	movs	r2, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <xTaskIncrementTick+0x160>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <xTaskIncrementTick+0x160>)
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <xTaskIncrementTick+0x164>)
 8003e22:	441a      	add	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f7fe ffc2 	bl	8002db4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <xTaskIncrementTick+0x168>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d3b9      	bcc.n	8003db2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e42:	e7b6      	b.n	8003db2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e44:	4b17      	ldr	r3, [pc, #92]	@ (8003ea4 <xTaskIncrementTick+0x168>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4a:	4915      	ldr	r1, [pc, #84]	@ (8003ea0 <xTaskIncrementTick+0x164>)
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d901      	bls.n	8003e60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e60:	4b11      	ldr	r3, [pc, #68]	@ (8003ea8 <xTaskIncrementTick+0x16c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e004      	b.n	8003e78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003eac <xTaskIncrementTick+0x170>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	4a0d      	ldr	r2, [pc, #52]	@ (8003eac <xTaskIncrementTick+0x170>)
 8003e76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e78:	697b      	ldr	r3, [r7, #20]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000518 	.word	0x20000518
 8003e88:	200004f4 	.word	0x200004f4
 8003e8c:	200004a8 	.word	0x200004a8
 8003e90:	200004ac 	.word	0x200004ac
 8003e94:	20000508 	.word	0x20000508
 8003e98:	20000510 	.word	0x20000510
 8003e9c:	200004f8 	.word	0x200004f8
 8003ea0:	200003f4 	.word	0x200003f4
 8003ea4:	200003f0 	.word	0x200003f0
 8003ea8:	20000504 	.word	0x20000504
 8003eac:	20000500 	.word	0x20000500

08003eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb6:	4b33      	ldr	r3, [pc, #204]	@ (8003f84 <vTaskSwitchContext+0xd4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ebe:	4b32      	ldr	r3, [pc, #200]	@ (8003f88 <vTaskSwitchContext+0xd8>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec4:	e059      	b.n	8003f7a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8003ec6:	4b30      	ldr	r3, [pc, #192]	@ (8003f88 <vTaskSwitchContext+0xd8>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003ecc:	f7fc fd28 	bl	8000920 <getRunTimeCounterValue>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8003f8c <vTaskSwitchContext+0xdc>)
 8003ed4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f8c <vTaskSwitchContext+0xdc>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b2d      	ldr	r3, [pc, #180]	@ (8003f90 <vTaskSwitchContext+0xe0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d909      	bls.n	8003ef6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f94 <vTaskSwitchContext+0xe4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8003ee8:	4a28      	ldr	r2, [pc, #160]	@ (8003f8c <vTaskSwitchContext+0xdc>)
 8003eea:	6810      	ldr	r0, [r2, #0]
 8003eec:	4a28      	ldr	r2, [pc, #160]	@ (8003f90 <vTaskSwitchContext+0xe0>)
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	1a82      	subs	r2, r0, r2
 8003ef2:	440a      	add	r2, r1
 8003ef4:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8003ef6:	4b25      	ldr	r3, [pc, #148]	@ (8003f8c <vTaskSwitchContext+0xdc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a25      	ldr	r2, [pc, #148]	@ (8003f90 <vTaskSwitchContext+0xe0>)
 8003efc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efe:	4b26      	ldr	r3, [pc, #152]	@ (8003f98 <vTaskSwitchContext+0xe8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	f1c3 031f 	rsb	r3, r3, #31
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	4921      	ldr	r1, [pc, #132]	@ (8003f9c <vTaskSwitchContext+0xec>)
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <vTaskSwitchContext+0x90>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	607b      	str	r3, [r7, #4]
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <vTaskSwitchContext+0x8c>
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4a14      	ldr	r2, [pc, #80]	@ (8003f9c <vTaskSwitchContext+0xec>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3308      	adds	r3, #8
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d104      	bne.n	8003f70 <vTaskSwitchContext+0xc0>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	4a07      	ldr	r2, [pc, #28]	@ (8003f94 <vTaskSwitchContext+0xe4>)
 8003f78:	6013      	str	r3, [r2, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000518 	.word	0x20000518
 8003f88:	20000504 	.word	0x20000504
 8003f8c:	20000520 	.word	0x20000520
 8003f90:	2000051c 	.word	0x2000051c
 8003f94:	200003f0 	.word	0x200003f0
 8003f98:	200004f8 	.word	0x200004f8
 8003f9c:	200003f4 	.word	0x200003f4

08003fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	60fb      	str	r3, [r7, #12]
}
 8003fc2:	bf00      	nop
 8003fc4:	bf00      	nop
 8003fc6:	e7fd      	b.n	8003fc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fc8:	4b07      	ldr	r3, [pc, #28]	@ (8003fe8 <vTaskPlaceOnEventList+0x48>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3318      	adds	r3, #24
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fe ff13 	bl	8002dfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	6838      	ldr	r0, [r7, #0]
 8003fda:	f000 fa6f 	bl	80044bc <prvAddCurrentTaskToDelayedList>
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200003f0 	.word	0x200003f0

08003fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	60fb      	str	r3, [r7, #12]
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	3318      	adds	r3, #24
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe ff25 	bl	8002e6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <xTaskRemoveFromEventList+0xb0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d11c      	bne.n	8004066 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	3304      	adds	r3, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe ff1c 	bl	8002e6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	2201      	movs	r2, #1
 800403c:	409a      	lsls	r2, r3
 800403e:	4b18      	ldr	r3, [pc, #96]	@ (80040a0 <xTaskRemoveFromEventList+0xb4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	4a16      	ldr	r2, [pc, #88]	@ (80040a0 <xTaskRemoveFromEventList+0xb4>)
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <xTaskRemoveFromEventList+0xb8>)
 8004056:	441a      	add	r2, r3
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f7fe fea8 	bl	8002db4 <vListInsertEnd>
 8004064:	e005      	b.n	8004072 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3318      	adds	r3, #24
 800406a:	4619      	mov	r1, r3
 800406c:	480e      	ldr	r0, [pc, #56]	@ (80040a8 <xTaskRemoveFromEventList+0xbc>)
 800406e:	f7fe fea1 	bl	8002db4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004076:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <xTaskRemoveFromEventList+0xc0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	429a      	cmp	r2, r3
 800407e:	d905      	bls.n	800408c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004084:	4b0a      	ldr	r3, [pc, #40]	@ (80040b0 <xTaskRemoveFromEventList+0xc4>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e001      	b.n	8004090 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004090:	697b      	ldr	r3, [r7, #20]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000518 	.word	0x20000518
 80040a0:	200004f8 	.word	0x200004f8
 80040a4:	200003f4 	.word	0x200003f4
 80040a8:	200004b0 	.word	0x200004b0
 80040ac:	200003f0 	.word	0x200003f0
 80040b0:	20000504 	.word	0x20000504

080040b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040bc:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <vTaskInternalSetTimeOutState+0x24>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <vTaskInternalSetTimeOutState+0x28>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	20000508 	.word	0x20000508
 80040dc:	200004f4 	.word	0x200004f4

080040e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	613b      	str	r3, [r7, #16]
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	60fb      	str	r3, [r7, #12]
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	e7fd      	b.n	8004122 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004126:	f000 fb5f 	bl	80047e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800412a:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <xTaskCheckForTimeOut+0xc0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004142:	d102      	bne.n	800414a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	e023      	b.n	8004192 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <xTaskCheckForTimeOut+0xc4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d007      	beq.n	8004166 <xTaskCheckForTimeOut+0x86>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004160:	2301      	movs	r3, #1
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e015      	b.n	8004192 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	429a      	cmp	r2, r3
 800416e:	d20b      	bcs.n	8004188 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1ad2      	subs	r2, r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff99 	bl	80040b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e004      	b.n	8004192 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800418e:	2301      	movs	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004192:	f000 fb5b 	bl	800484c <vPortExitCritical>

	return xReturn;
 8004196:	69fb      	ldr	r3, [r7, #28]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3720      	adds	r7, #32
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	200004f4 	.word	0x200004f4
 80041a4:	20000508 	.word	0x20000508

080041a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041ac:	4b03      	ldr	r3, [pc, #12]	@ (80041bc <vTaskMissedYield+0x14>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
}
 80041b2:	bf00      	nop
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	20000504 	.word	0x20000504

080041c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041c8:	f000 f854 	bl	8004274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041cc:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <prvIdleTask+0x2c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d907      	bls.n	80041e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80041d4:	4b06      	ldr	r3, [pc, #24]	@ (80041f0 <prvIdleTask+0x30>)
 80041d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80041e4:	f7fc fa02 	bl	80005ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80041e8:	e7ee      	b.n	80041c8 <prvIdleTask+0x8>
 80041ea:	bf00      	nop
 80041ec:	200003f4 	.word	0x200003f4
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	e00c      	b.n	800421a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4a12      	ldr	r2, [pc, #72]	@ (8004254 <prvInitialiseTaskLists+0x60>)
 800420c:	4413      	add	r3, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fda3 	bl	8002d5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3301      	adds	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b06      	cmp	r3, #6
 800421e:	d9ef      	bls.n	8004200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004220:	480d      	ldr	r0, [pc, #52]	@ (8004258 <prvInitialiseTaskLists+0x64>)
 8004222:	f7fe fd9a 	bl	8002d5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004226:	480d      	ldr	r0, [pc, #52]	@ (800425c <prvInitialiseTaskLists+0x68>)
 8004228:	f7fe fd97 	bl	8002d5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800422c:	480c      	ldr	r0, [pc, #48]	@ (8004260 <prvInitialiseTaskLists+0x6c>)
 800422e:	f7fe fd94 	bl	8002d5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004232:	480c      	ldr	r0, [pc, #48]	@ (8004264 <prvInitialiseTaskLists+0x70>)
 8004234:	f7fe fd91 	bl	8002d5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004238:	480b      	ldr	r0, [pc, #44]	@ (8004268 <prvInitialiseTaskLists+0x74>)
 800423a:	f7fe fd8e 	bl	8002d5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <prvInitialiseTaskLists+0x78>)
 8004240:	4a05      	ldr	r2, [pc, #20]	@ (8004258 <prvInitialiseTaskLists+0x64>)
 8004242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <prvInitialiseTaskLists+0x7c>)
 8004246:	4a05      	ldr	r2, [pc, #20]	@ (800425c <prvInitialiseTaskLists+0x68>)
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200003f4 	.word	0x200003f4
 8004258:	20000480 	.word	0x20000480
 800425c:	20000494 	.word	0x20000494
 8004260:	200004b0 	.word	0x200004b0
 8004264:	200004c4 	.word	0x200004c4
 8004268:	200004dc 	.word	0x200004dc
 800426c:	200004a8 	.word	0x200004a8
 8004270:	200004ac 	.word	0x200004ac

08004274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800427a:	e019      	b.n	80042b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800427c:	f000 fab4 	bl	80047e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004280:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <prvCheckTasksWaitingTermination+0x50>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe fdee 	bl	8002e6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <prvCheckTasksWaitingTermination+0x54>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3b01      	subs	r3, #1
 8004298:	4a0b      	ldr	r2, [pc, #44]	@ (80042c8 <prvCheckTasksWaitingTermination+0x54>)
 800429a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800429c:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <prvCheckTasksWaitingTermination+0x58>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <prvCheckTasksWaitingTermination+0x58>)
 80042a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042a6:	f000 fad1 	bl	800484c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f810 	bl	80042d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <prvCheckTasksWaitingTermination+0x58>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e1      	bne.n	800427c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200004c4 	.word	0x200004c4
 80042c8:	200004f0 	.word	0x200004f0
 80042cc:	200004d8 	.word	0x200004d8

080042d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fc2c 	bl	8004b44 <vPortFree>
				vPortFree( pxTCB );
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fc29 	bl	8004b44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042f2:	e019      	b.n	8004328 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d103      	bne.n	8004306 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fc20 	bl	8004b44 <vPortFree>
	}
 8004304:	e010      	b.n	8004328 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800430c:	2b02      	cmp	r3, #2
 800430e:	d00b      	beq.n	8004328 <prvDeleteTCB+0x58>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <prvDeleteTCB+0x54>
	}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004336:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <prvResetNextTaskUnblockTime+0x38>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004340:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <prvResetNextTaskUnblockTime+0x3c>)
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004348:	e008      	b.n	800435c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <prvResetNextTaskUnblockTime+0x38>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a04      	ldr	r2, [pc, #16]	@ (800436c <prvResetNextTaskUnblockTime+0x3c>)
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	200004a8 	.word	0x200004a8
 800436c:	20000510 	.word	0x20000510

08004370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <xTaskGetSchedulerState+0x34>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800437e:	2301      	movs	r3, #1
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	e008      	b.n	8004396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004384:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <xTaskGetSchedulerState+0x38>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800438c:	2302      	movs	r3, #2
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	e001      	b.n	8004396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004396:	687b      	ldr	r3, [r7, #4]
	}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	200004fc 	.word	0x200004fc
 80043a8:	20000518 	.word	0x20000518

080043ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d070      	beq.n	80044a4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043c2:	4b3b      	ldr	r3, [pc, #236]	@ (80044b0 <xTaskPriorityDisinherit+0x104>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d00b      	beq.n	80043e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	60bb      	str	r3, [r7, #8]
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004416:	429a      	cmp	r2, r3
 8004418:	d044      	beq.n	80044a4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	2b00      	cmp	r3, #0
 8004420:	d140      	bne.n	80044a4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fd21 	bl	8002e6e <uxListRemove>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d115      	bne.n	800445e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004436:	491f      	ldr	r1, [pc, #124]	@ (80044b4 <xTaskPriorityDisinherit+0x108>)
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xTaskPriorityDisinherit+0xb2>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	2201      	movs	r2, #1
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43da      	mvns	r2, r3
 8004454:	4b18      	ldr	r3, [pc, #96]	@ (80044b8 <xTaskPriorityDisinherit+0x10c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4013      	ands	r3, r2
 800445a:	4a17      	ldr	r2, [pc, #92]	@ (80044b8 <xTaskPriorityDisinherit+0x10c>)
 800445c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	f1c3 0207 	rsb	r2, r3, #7
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	2201      	movs	r2, #1
 8004478:	409a      	lsls	r2, r3
 800447a:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <xTaskPriorityDisinherit+0x10c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4313      	orrs	r3, r2
 8004480:	4a0d      	ldr	r2, [pc, #52]	@ (80044b8 <xTaskPriorityDisinherit+0x10c>)
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4a08      	ldr	r2, [pc, #32]	@ (80044b4 <xTaskPriorityDisinherit+0x108>)
 8004492:	441a      	add	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3304      	adds	r3, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f7fe fc8a 	bl	8002db4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044a4:	697b      	ldr	r3, [r7, #20]
	}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200003f0 	.word	0x200003f0
 80044b4:	200003f4 	.word	0x200003f4
 80044b8:	200004f8 	.word	0x200004f8

080044bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044c6:	4b29      	ldr	r3, [pc, #164]	@ (800456c <prvAddCurrentTaskToDelayedList+0xb0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044cc:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fccb 	bl	8002e6e <uxListRemove>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044de:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	2201      	movs	r2, #1
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43da      	mvns	r2, r3
 80044ec:	4b21      	ldr	r3, [pc, #132]	@ (8004574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4013      	ands	r3, r2
 80044f2:	4a20      	ldr	r2, [pc, #128]	@ (8004574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d10a      	bne.n	8004514 <prvAddCurrentTaskToDelayedList+0x58>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004504:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	481a      	ldr	r0, [pc, #104]	@ (8004578 <prvAddCurrentTaskToDelayedList+0xbc>)
 800450e:	f7fe fc51 	bl	8002db4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004512:	e026      	b.n	8004562 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800451c:	4b14      	ldr	r3, [pc, #80]	@ (8004570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	429a      	cmp	r2, r3
 800452a:	d209      	bcs.n	8004540 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800452c:	4b13      	ldr	r3, [pc, #76]	@ (800457c <prvAddCurrentTaskToDelayedList+0xc0>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b0f      	ldr	r3, [pc, #60]	@ (8004570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3304      	adds	r3, #4
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7fe fc5f 	bl	8002dfc <vListInsert>
}
 800453e:	e010      	b.n	8004562 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004540:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3304      	adds	r3, #4
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f7fe fc55 	bl	8002dfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004552:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	429a      	cmp	r2, r3
 800455a:	d202      	bcs.n	8004562 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800455c:	4a09      	ldr	r2, [pc, #36]	@ (8004584 <prvAddCurrentTaskToDelayedList+0xc8>)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6013      	str	r3, [r2, #0]
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200004f4 	.word	0x200004f4
 8004570:	200003f0 	.word	0x200003f0
 8004574:	200004f8 	.word	0x200004f8
 8004578:	200004dc 	.word	0x200004dc
 800457c:	200004ac 	.word	0x200004ac
 8004580:	200004a8 	.word	0x200004a8
 8004584:	20000510 	.word	0x20000510

08004588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3b04      	subs	r3, #4
 8004598:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3b04      	subs	r3, #4
 80045a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b04      	subs	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045b8:	4a0c      	ldr	r2, [pc, #48]	@ (80045ec <pxPortInitialiseStack+0x64>)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3b14      	subs	r3, #20
 80045c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3b04      	subs	r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f06f 0202 	mvn.w	r2, #2
 80045d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3b20      	subs	r3, #32
 80045dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	080045f1 	.word	0x080045f1

080045f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045fa:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <prvTaskExitError+0x58>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d00b      	beq.n	800461c <prvTaskExitError+0x2c>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	60fb      	str	r3, [r7, #12]
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <prvTaskExitError+0x28>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60bb      	str	r3, [r7, #8]
}
 800462e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004630:	bf00      	nop
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0fc      	beq.n	8004632 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	2000000c 	.word	0x2000000c
 800464c:	00000000 	.word	0x00000000

08004650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004650:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <pxCurrentTCBConst2>)
 8004652:	6819      	ldr	r1, [r3, #0]
 8004654:	6808      	ldr	r0, [r1, #0]
 8004656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465a:	f380 8809 	msr	PSP, r0
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	4770      	bx	lr
 800466c:	f3af 8000 	nop.w

08004670 <pxCurrentTCBConst2>:
 8004670:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop

08004678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004678:	4808      	ldr	r0, [pc, #32]	@ (800469c <prvPortStartFirstTask+0x24>)
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	6800      	ldr	r0, [r0, #0]
 800467e:	f380 8808 	msr	MSP, r0
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8814 	msr	CONTROL, r0
 800468a:	b662      	cpsie	i
 800468c:	b661      	cpsie	f
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	df00      	svc	0
 8004698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800469a:	bf00      	nop
 800469c:	e000ed08 	.word	0xe000ed08

080046a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046a6:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <xPortStartScheduler+0x124>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a47      	ldr	r2, [pc, #284]	@ (80047c8 <xPortStartScheduler+0x128>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10b      	bne.n	80046c8 <xPortStartScheduler+0x28>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	e7fd      	b.n	80046c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046c8:	4b3e      	ldr	r3, [pc, #248]	@ (80047c4 <xPortStartScheduler+0x124>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3f      	ldr	r2, [pc, #252]	@ (80047cc <xPortStartScheduler+0x12c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10b      	bne.n	80046ea <xPortStartScheduler+0x4a>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	613b      	str	r3, [r7, #16]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ea:	4b39      	ldr	r3, [pc, #228]	@ (80047d0 <xPortStartScheduler+0x130>)
 80046ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	22ff      	movs	r2, #255	@ 0xff
 80046fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800470c:	b2da      	uxtb	r2, r3
 800470e:	4b31      	ldr	r3, [pc, #196]	@ (80047d4 <xPortStartScheduler+0x134>)
 8004710:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004712:	4b31      	ldr	r3, [pc, #196]	@ (80047d8 <xPortStartScheduler+0x138>)
 8004714:	2207      	movs	r2, #7
 8004716:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004718:	e009      	b.n	800472e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800471a:	4b2f      	ldr	r3, [pc, #188]	@ (80047d8 <xPortStartScheduler+0x138>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3b01      	subs	r3, #1
 8004720:	4a2d      	ldr	r2, [pc, #180]	@ (80047d8 <xPortStartScheduler+0x138>)
 8004722:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004736:	2b80      	cmp	r3, #128	@ 0x80
 8004738:	d0ef      	beq.n	800471a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800473a:	4b27      	ldr	r3, [pc, #156]	@ (80047d8 <xPortStartScheduler+0x138>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1c3 0307 	rsb	r3, r3, #7
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00b      	beq.n	800475e <xPortStartScheduler+0xbe>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60bb      	str	r3, [r7, #8]
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800475e:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <xPortStartScheduler+0x138>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	4a1c      	ldr	r2, [pc, #112]	@ (80047d8 <xPortStartScheduler+0x138>)
 8004766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004768:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <xPortStartScheduler+0x138>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004770:	4a19      	ldr	r2, [pc, #100]	@ (80047d8 <xPortStartScheduler+0x138>)
 8004772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800477c:	4b17      	ldr	r3, [pc, #92]	@ (80047dc <xPortStartScheduler+0x13c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a16      	ldr	r2, [pc, #88]	@ (80047dc <xPortStartScheduler+0x13c>)
 8004782:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004788:	4b14      	ldr	r3, [pc, #80]	@ (80047dc <xPortStartScheduler+0x13c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a13      	ldr	r2, [pc, #76]	@ (80047dc <xPortStartScheduler+0x13c>)
 800478e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004794:	f000 f8da 	bl	800494c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <xPortStartScheduler+0x140>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800479e:	f000 f8f9 	bl	8004994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047a2:	4b10      	ldr	r3, [pc, #64]	@ (80047e4 <xPortStartScheduler+0x144>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a0f      	ldr	r2, [pc, #60]	@ (80047e4 <xPortStartScheduler+0x144>)
 80047a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80047ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047ae:	f7ff ff63 	bl	8004678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047b2:	f7ff fb7d 	bl	8003eb0 <vTaskSwitchContext>
	prvTaskExitError();
 80047b6:	f7ff ff1b 	bl	80045f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	e000ed00 	.word	0xe000ed00
 80047c8:	410fc271 	.word	0x410fc271
 80047cc:	410fc270 	.word	0x410fc270
 80047d0:	e000e400 	.word	0xe000e400
 80047d4:	20000524 	.word	0x20000524
 80047d8:	20000528 	.word	0x20000528
 80047dc:	e000ed20 	.word	0xe000ed20
 80047e0:	2000000c 	.word	0x2000000c
 80047e4:	e000ef34 	.word	0xe000ef34

080047e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
}
 8004800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004802:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <vPortEnterCritical+0x5c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3301      	adds	r3, #1
 8004808:	4a0e      	ldr	r2, [pc, #56]	@ (8004844 <vPortEnterCritical+0x5c>)
 800480a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800480c:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <vPortEnterCritical+0x5c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d110      	bne.n	8004836 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004814:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <vPortEnterCritical+0x60>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <vPortEnterCritical+0x4e>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	603b      	str	r3, [r7, #0]
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	e7fd      	b.n	8004832 <vPortEnterCritical+0x4a>
	}
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	2000000c 	.word	0x2000000c
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004852:	4b12      	ldr	r3, [pc, #72]	@ (800489c <vPortExitCritical+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <vPortExitCritical+0x26>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	e7fd      	b.n	800486e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004872:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <vPortExitCritical+0x50>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3b01      	subs	r3, #1
 8004878:	4a08      	ldr	r2, [pc, #32]	@ (800489c <vPortExitCritical+0x50>)
 800487a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800487c:	4b07      	ldr	r3, [pc, #28]	@ (800489c <vPortExitCritical+0x50>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <vPortExitCritical+0x44>
 8004884:	2300      	movs	r3, #0
 8004886:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800488e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	2000000c 	.word	0x2000000c

080048a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048a0:	f3ef 8009 	mrs	r0, PSP
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <pxCurrentTCBConst>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	f01e 0f10 	tst.w	lr, #16
 80048b0:	bf08      	it	eq
 80048b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ba:	6010      	str	r0, [r2, #0]
 80048bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048c4:	f380 8811 	msr	BASEPRI, r0
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f7ff faee 	bl	8003eb0 <vTaskSwitchContext>
 80048d4:	f04f 0000 	mov.w	r0, #0
 80048d8:	f380 8811 	msr	BASEPRI, r0
 80048dc:	bc09      	pop	{r0, r3}
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	6808      	ldr	r0, [r1, #0]
 80048e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e6:	f01e 0f10 	tst.w	lr, #16
 80048ea:	bf08      	it	eq
 80048ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048f0:	f380 8809 	msr	PSP, r0
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	f3af 8000 	nop.w

08004900 <pxCurrentTCBConst>:
 8004900:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	607b      	str	r3, [r7, #4]
}
 8004920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004922:	f7ff fa0b 	bl	8003d3c <xTaskIncrementTick>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800492c:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <SysTick_Handler+0x40>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f383 8811 	msr	BASEPRI, r3
}
 800493e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004956:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <vPortSetupTimerInterrupt+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800495c:	4b0a      	ldr	r3, [pc, #40]	@ (8004988 <vPortSetupTimerInterrupt+0x3c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0a      	ldr	r2, [pc, #40]	@ (800498c <vPortSetupTimerInterrupt+0x40>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	4a09      	ldr	r2, [pc, #36]	@ (8004990 <vPortSetupTimerInterrupt+0x44>)
 800496a:	3b01      	subs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800496e:	4b04      	ldr	r3, [pc, #16]	@ (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010
 8004984:	e000e018 	.word	0xe000e018
 8004988:	20000000 	.word	0x20000000
 800498c:	10624dd3 	.word	0x10624dd3
 8004990:	e000e014 	.word	0xe000e014

08004994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004994:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80049a4 <vPortEnableVFP+0x10>
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800499e:	6001      	str	r1, [r0, #0]
 80049a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049a2:	bf00      	nop
 80049a4:	e000ed88 	.word	0xe000ed88

080049a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	@ 0x28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049b4:	f7ff f916 	bl	8003be4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049b8:	4b5c      	ldr	r3, [pc, #368]	@ (8004b2c <pvPortMalloc+0x184>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049c0:	f000 f924 	bl	8004c0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b30 <pvPortMalloc+0x188>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f040 8095 	bne.w	8004afc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01e      	beq.n	8004a16 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80049d8:	2208      	movs	r2, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d015      	beq.n	8004a16 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f023 0307 	bic.w	r3, r3, #7
 80049f0:	3308      	adds	r3, #8
 80049f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <pvPortMalloc+0x6e>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	617b      	str	r3, [r7, #20]
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	e7fd      	b.n	8004a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d06f      	beq.n	8004afc <pvPortMalloc+0x154>
 8004a1c:	4b45      	ldr	r3, [pc, #276]	@ (8004b34 <pvPortMalloc+0x18c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d86a      	bhi.n	8004afc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a26:	4b44      	ldr	r3, [pc, #272]	@ (8004b38 <pvPortMalloc+0x190>)
 8004a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a2a:	4b43      	ldr	r3, [pc, #268]	@ (8004b38 <pvPortMalloc+0x190>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a30:	e004      	b.n	8004a3c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d903      	bls.n	8004a4e <pvPortMalloc+0xa6>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f1      	bne.n	8004a32 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a4e:	4b37      	ldr	r3, [pc, #220]	@ (8004b2c <pvPortMalloc+0x184>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d051      	beq.n	8004afc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	4413      	add	r3, r2
 8004a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad2      	subs	r2, r2, r3
 8004a72:	2308      	movs	r3, #8
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d920      	bls.n	8004abc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4413      	add	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <pvPortMalloc+0xfc>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	613b      	str	r3, [r7, #16]
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	e7fd      	b.n	8004aa0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad2      	subs	r2, r2, r3
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ab6:	69b8      	ldr	r0, [r7, #24]
 8004ab8:	f000 f90a 	bl	8004cd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004abc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <pvPortMalloc+0x18c>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <pvPortMalloc+0x18c>)
 8004ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aca:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <pvPortMalloc+0x18c>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b1b      	ldr	r3, [pc, #108]	@ (8004b3c <pvPortMalloc+0x194>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d203      	bcs.n	8004ade <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ad6:	4b17      	ldr	r3, [pc, #92]	@ (8004b34 <pvPortMalloc+0x18c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a18      	ldr	r2, [pc, #96]	@ (8004b3c <pvPortMalloc+0x194>)
 8004adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	4b13      	ldr	r3, [pc, #76]	@ (8004b30 <pvPortMalloc+0x188>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004af2:	4b13      	ldr	r3, [pc, #76]	@ (8004b40 <pvPortMalloc+0x198>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	4a11      	ldr	r2, [pc, #68]	@ (8004b40 <pvPortMalloc+0x198>)
 8004afa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004afc:	f7ff f880 	bl	8003c00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <pvPortMalloc+0x17a>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60fb      	str	r3, [r7, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <pvPortMalloc+0x176>
	return pvReturn;
 8004b22:	69fb      	ldr	r3, [r7, #28]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3728      	adds	r7, #40	@ 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20004134 	.word	0x20004134
 8004b30:	20004148 	.word	0x20004148
 8004b34:	20004138 	.word	0x20004138
 8004b38:	2000412c 	.word	0x2000412c
 8004b3c:	2000413c 	.word	0x2000413c
 8004b40:	20004140 	.word	0x20004140

08004b44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d04f      	beq.n	8004bf6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b56:	2308      	movs	r3, #8
 8004b58:	425b      	negs	r3, r3
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	4b25      	ldr	r3, [pc, #148]	@ (8004c00 <vPortFree+0xbc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <vPortFree+0x46>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60fb      	str	r3, [r7, #12]
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	e7fd      	b.n	8004b86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <vPortFree+0x66>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60bb      	str	r3, [r7, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	4b14      	ldr	r3, [pc, #80]	@ (8004c00 <vPortFree+0xbc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01e      	beq.n	8004bf6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d11a      	bne.n	8004bf6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c00 <vPortFree+0xbc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	401a      	ands	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bd0:	f7ff f808 	bl	8003be4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <vPortFree+0xc0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4413      	add	r3, r2
 8004bde:	4a09      	ldr	r2, [pc, #36]	@ (8004c04 <vPortFree+0xc0>)
 8004be0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004be2:	6938      	ldr	r0, [r7, #16]
 8004be4:	f000 f874 	bl	8004cd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004be8:	4b07      	ldr	r3, [pc, #28]	@ (8004c08 <vPortFree+0xc4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	4a06      	ldr	r2, [pc, #24]	@ (8004c08 <vPortFree+0xc4>)
 8004bf0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004bf2:	f7ff f805 	bl	8003c00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20004148 	.word	0x20004148
 8004c04:	20004138 	.word	0x20004138
 8004c08:	20004144 	.word	0x20004144

08004c0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c12:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004c16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c18:	4b27      	ldr	r3, [pc, #156]	@ (8004cb8 <prvHeapInit+0xac>)
 8004c1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00c      	beq.n	8004c40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3307      	adds	r3, #7
 8004c2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0307 	bic.w	r3, r3, #7
 8004c32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb8 <prvHeapInit+0xac>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c44:	4a1d      	ldr	r2, [pc, #116]	@ (8004cbc <prvHeapInit+0xb0>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cbc <prvHeapInit+0xb0>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4413      	add	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c58:	2208      	movs	r2, #8
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <prvHeapInit+0xb4>)
 8004c6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c6e:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <prvHeapInit+0xb4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <prvHeapInit+0xb4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <prvHeapInit+0xb4>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <prvHeapInit+0xb8>)
 8004c9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a09      	ldr	r2, [pc, #36]	@ (8004cc8 <prvHeapInit+0xbc>)
 8004ca2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ca4:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <prvHeapInit+0xc0>)
 8004ca6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004caa:	601a      	str	r2, [r3, #0]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	2000052c 	.word	0x2000052c
 8004cbc:	2000412c 	.word	0x2000412c
 8004cc0:	20004134 	.word	0x20004134
 8004cc4:	2000413c 	.word	0x2000413c
 8004cc8:	20004138 	.word	0x20004138
 8004ccc:	20004148 	.word	0x20004148

08004cd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cd8:	4b28      	ldr	r3, [pc, #160]	@ (8004d7c <prvInsertBlockIntoFreeList+0xac>)
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e002      	b.n	8004ce4 <prvInsertBlockIntoFreeList+0x14>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d8f7      	bhi.n	8004cde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d108      	bne.n	8004d12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	441a      	add	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	441a      	add	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d118      	bne.n	8004d58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b15      	ldr	r3, [pc, #84]	@ (8004d80 <prvInsertBlockIntoFreeList+0xb0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d00d      	beq.n	8004d4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	441a      	add	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e008      	b.n	8004d60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <prvInsertBlockIntoFreeList+0xb0>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e003      	b.n	8004d60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d002      	beq.n	8004d6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	2000412c 	.word	0x2000412c
 8004d80:	20004134 	.word	0x20004134

08004d84 <app_init>:

/********************** external data declaration *****************************/

/********************** external functions definition ************************/
void app_init(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af02      	add	r7, sp, #8
  BaseType_t status;

  // Primero se inicializa el UI ya que controla los LEDs
  LOGGER_INFO("Initializing UI...");
 8004d8a:	f7ff fd2d 	bl	80047e8 <vPortEnterCritical>
 8004d8e:	4ba0      	ldr	r3, [pc, #640]	@ (8005010 <app_init+0x28c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4aa0      	ldr	r2, [pc, #640]	@ (8005014 <app_init+0x290>)
 8004d94:	213f      	movs	r1, #63	@ 0x3f
 8004d96:	4618      	mov	r0, r3
 8004d98:	f002 fb8c 	bl	80074b4 <sniprintf>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4a9e      	ldr	r2, [pc, #632]	@ (8005018 <app_init+0x294>)
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b9b      	ldr	r3, [pc, #620]	@ (8005010 <app_init+0x28c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa0c 	bl	80051c4 <logger_log_print_>
 8004dac:	f7ff fd4e 	bl	800484c <vPortExitCritical>
 8004db0:	f7ff fd1a 	bl	80047e8 <vPortEnterCritical>
 8004db4:	4b96      	ldr	r3, [pc, #600]	@ (8005010 <app_init+0x28c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a98      	ldr	r2, [pc, #608]	@ (800501c <app_init+0x298>)
 8004dba:	213f      	movs	r1, #63	@ 0x3f
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f002 fb79 	bl	80074b4 <sniprintf>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4a94      	ldr	r2, [pc, #592]	@ (8005018 <app_init+0x294>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	4b91      	ldr	r3, [pc, #580]	@ (8005010 <app_init+0x28c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f9f9 	bl	80051c4 <logger_log_print_>
 8004dd2:	f7ff fd3b 	bl	800484c <vPortExitCritical>
 8004dd6:	f7ff fd07 	bl	80047e8 <vPortEnterCritical>
 8004dda:	4b8d      	ldr	r3, [pc, #564]	@ (8005010 <app_init+0x28c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a90      	ldr	r2, [pc, #576]	@ (8005020 <app_init+0x29c>)
 8004de0:	213f      	movs	r1, #63	@ 0x3f
 8004de2:	4618      	mov	r0, r3
 8004de4:	f002 fb66 	bl	80074b4 <sniprintf>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4a8b      	ldr	r2, [pc, #556]	@ (8005018 <app_init+0x294>)
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	4b88      	ldr	r3, [pc, #544]	@ (8005010 <app_init+0x28c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f9e6 	bl	80051c4 <logger_log_print_>
 8004df8:	f7ff fd28 	bl	800484c <vPortExitCritical>
  ao_ui_init();
 8004dfc:	f001 fdf4 	bl	80069e8 <ao_ui_init>

  // Crear la tarea de botón con alta prioridad para una respuesta rápida ya que no será un OA
  LOGGER_INFO("Creating button task...");
 8004e00:	f7ff fcf2 	bl	80047e8 <vPortEnterCritical>
 8004e04:	4b82      	ldr	r3, [pc, #520]	@ (8005010 <app_init+0x28c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a82      	ldr	r2, [pc, #520]	@ (8005014 <app_init+0x290>)
 8004e0a:	213f      	movs	r1, #63	@ 0x3f
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f002 fb51 	bl	80074b4 <sniprintf>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4a80      	ldr	r2, [pc, #512]	@ (8005018 <app_init+0x294>)
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b7d      	ldr	r3, [pc, #500]	@ (8005010 <app_init+0x28c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f9d1 	bl	80051c4 <logger_log_print_>
 8004e22:	f7ff fd13 	bl	800484c <vPortExitCritical>
 8004e26:	f7ff fcdf 	bl	80047e8 <vPortEnterCritical>
 8004e2a:	4b79      	ldr	r3, [pc, #484]	@ (8005010 <app_init+0x28c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7d      	ldr	r2, [pc, #500]	@ (8005024 <app_init+0x2a0>)
 8004e30:	213f      	movs	r1, #63	@ 0x3f
 8004e32:	4618      	mov	r0, r3
 8004e34:	f002 fb3e 	bl	80074b4 <sniprintf>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a77      	ldr	r2, [pc, #476]	@ (8005018 <app_init+0x294>)
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4b74      	ldr	r3, [pc, #464]	@ (8005010 <app_init+0x28c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 f9be 	bl	80051c4 <logger_log_print_>
 8004e48:	f7ff fd00 	bl	800484c <vPortExitCritical>
 8004e4c:	f7ff fccc 	bl	80047e8 <vPortEnterCritical>
 8004e50:	4b6f      	ldr	r3, [pc, #444]	@ (8005010 <app_init+0x28c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a72      	ldr	r2, [pc, #456]	@ (8005020 <app_init+0x29c>)
 8004e56:	213f      	movs	r1, #63	@ 0x3f
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f002 fb2b 	bl	80074b4 <sniprintf>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4a6d      	ldr	r2, [pc, #436]	@ (8005018 <app_init+0x294>)
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b6a      	ldr	r3, [pc, #424]	@ (8005010 <app_init+0x28c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 f9ab 	bl	80051c4 <logger_log_print_>
 8004e6e:	f7ff fced 	bl	800484c <vPortExitCritical>
  status = xTaskCreate(task_button, "task_button", 128, NULL, tskIDLE_PRIORITY + 2, NULL);
 8004e72:	2300      	movs	r3, #0
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	2302      	movs	r3, #2
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2280      	movs	r2, #128	@ 0x80
 8004e7e:	496a      	ldr	r1, [pc, #424]	@ (8005028 <app_init+0x2a4>)
 8004e80:	486a      	ldr	r0, [pc, #424]	@ (800502c <app_init+0x2a8>)
 8004e82:	f7fe fc3b 	bl	80036fc <xTaskCreate>
 8004e86:	6078      	str	r0, [r7, #4]
  if (pdPASS != status)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d03a      	beq.n	8004f04 <app_init+0x180>
  {
    LOGGER_ERROR("Failed to create button task");
 8004e8e:	f7ff fcab 	bl	80047e8 <vPortEnterCritical>
 8004e92:	4b5f      	ldr	r3, [pc, #380]	@ (8005010 <app_init+0x28c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a66      	ldr	r2, [pc, #408]	@ (8005030 <app_init+0x2ac>)
 8004e98:	213f      	movs	r1, #63	@ 0x3f
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 fb0a 	bl	80074b4 <sniprintf>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4a5d      	ldr	r2, [pc, #372]	@ (8005018 <app_init+0x294>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8005010 <app_init+0x28c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f98a 	bl	80051c4 <logger_log_print_>
 8004eb0:	f7ff fccc 	bl	800484c <vPortExitCritical>
 8004eb4:	f7ff fc98 	bl	80047e8 <vPortEnterCritical>
 8004eb8:	4b55      	ldr	r3, [pc, #340]	@ (8005010 <app_init+0x28c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a5d      	ldr	r2, [pc, #372]	@ (8005034 <app_init+0x2b0>)
 8004ebe:	213f      	movs	r1, #63	@ 0x3f
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f002 faf7 	bl	80074b4 <sniprintf>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4a53      	ldr	r2, [pc, #332]	@ (8005018 <app_init+0x294>)
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	4b50      	ldr	r3, [pc, #320]	@ (8005010 <app_init+0x28c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 f977 	bl	80051c4 <logger_log_print_>
 8004ed6:	f7ff fcb9 	bl	800484c <vPortExitCritical>
 8004eda:	f7ff fc85 	bl	80047e8 <vPortEnterCritical>
 8004ede:	4b4c      	ldr	r3, [pc, #304]	@ (8005010 <app_init+0x28c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4f      	ldr	r2, [pc, #316]	@ (8005020 <app_init+0x29c>)
 8004ee4:	213f      	movs	r1, #63	@ 0x3f
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f002 fae4 	bl	80074b4 <sniprintf>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a4a      	ldr	r2, [pc, #296]	@ (8005018 <app_init+0x294>)
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b47      	ldr	r3, [pc, #284]	@ (8005010 <app_init+0x28c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f964 	bl	80051c4 <logger_log_print_>
 8004efc:	f7ff fca6 	bl	800484c <vPortExitCritical>
    while(1);
 8004f00:	bf00      	nop
 8004f02:	e7fd      	b.n	8004f00 <app_init+0x17c>
  }

  LOGGER_INFO("Initializing cycle counter...");
 8004f04:	f7ff fc70 	bl	80047e8 <vPortEnterCritical>
 8004f08:	4b41      	ldr	r3, [pc, #260]	@ (8005010 <app_init+0x28c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a41      	ldr	r2, [pc, #260]	@ (8005014 <app_init+0x290>)
 8004f0e:	213f      	movs	r1, #63	@ 0x3f
 8004f10:	4618      	mov	r0, r3
 8004f12:	f002 facf 	bl	80074b4 <sniprintf>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4a3f      	ldr	r2, [pc, #252]	@ (8005018 <app_init+0x294>)
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8005010 <app_init+0x28c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f94f 	bl	80051c4 <logger_log_print_>
 8004f26:	f7ff fc91 	bl	800484c <vPortExitCritical>
 8004f2a:	f7ff fc5d 	bl	80047e8 <vPortEnterCritical>
 8004f2e:	4b38      	ldr	r3, [pc, #224]	@ (8005010 <app_init+0x28c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a41      	ldr	r2, [pc, #260]	@ (8005038 <app_init+0x2b4>)
 8004f34:	213f      	movs	r1, #63	@ 0x3f
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 fabc 	bl	80074b4 <sniprintf>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	4a36      	ldr	r2, [pc, #216]	@ (8005018 <app_init+0x294>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b33      	ldr	r3, [pc, #204]	@ (8005010 <app_init+0x28c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f93c 	bl	80051c4 <logger_log_print_>
 8004f4c:	f7ff fc7e 	bl	800484c <vPortExitCritical>
 8004f50:	f7ff fc4a 	bl	80047e8 <vPortEnterCritical>
 8004f54:	4b2e      	ldr	r3, [pc, #184]	@ (8005010 <app_init+0x28c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a31      	ldr	r2, [pc, #196]	@ (8005020 <app_init+0x29c>)
 8004f5a:	213f      	movs	r1, #63	@ 0x3f
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f002 faa9 	bl	80074b4 <sniprintf>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4a2c      	ldr	r2, [pc, #176]	@ (8005018 <app_init+0x294>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b29      	ldr	r3, [pc, #164]	@ (8005010 <app_init+0x28c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f929 	bl	80051c4 <logger_log_print_>
 8004f72:	f7ff fc6b 	bl	800484c <vPortExitCritical>
  cycle_counter_init();
 8004f76:	4b31      	ldr	r3, [pc, #196]	@ (800503c <app_init+0x2b8>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	4a30      	ldr	r2, [pc, #192]	@ (800503c <app_init+0x2b8>)
 8004f7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f80:	60d3      	str	r3, [r2, #12]
 8004f82:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <app_init+0x2bc>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	4b2d      	ldr	r3, [pc, #180]	@ (8005040 <app_init+0x2bc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005040 <app_init+0x2bc>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6013      	str	r3, [r2, #0]
  
  LOGGER_INFO("Application initialization complete");
 8004f94:	f7ff fc28 	bl	80047e8 <vPortEnterCritical>
 8004f98:	4b1d      	ldr	r3, [pc, #116]	@ (8005010 <app_init+0x28c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005014 <app_init+0x290>)
 8004f9e:	213f      	movs	r1, #63	@ 0x3f
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 fa87 	bl	80074b4 <sniprintf>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <app_init+0x294>)
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	4b18      	ldr	r3, [pc, #96]	@ (8005010 <app_init+0x28c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f907 	bl	80051c4 <logger_log_print_>
 8004fb6:	f7ff fc49 	bl	800484c <vPortExitCritical>
 8004fba:	f7ff fc15 	bl	80047e8 <vPortEnterCritical>
 8004fbe:	4b14      	ldr	r3, [pc, #80]	@ (8005010 <app_init+0x28c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a20      	ldr	r2, [pc, #128]	@ (8005044 <app_init+0x2c0>)
 8004fc4:	213f      	movs	r1, #63	@ 0x3f
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f002 fa74 	bl	80074b4 <sniprintf>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4a12      	ldr	r2, [pc, #72]	@ (8005018 <app_init+0x294>)
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005010 <app_init+0x28c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f8f4 	bl	80051c4 <logger_log_print_>
 8004fdc:	f7ff fc36 	bl	800484c <vPortExitCritical>
 8004fe0:	f7ff fc02 	bl	80047e8 <vPortEnterCritical>
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <app_init+0x28c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8005020 <app_init+0x29c>)
 8004fea:	213f      	movs	r1, #63	@ 0x3f
 8004fec:	4618      	mov	r0, r3
 8004fee:	f002 fa61 	bl	80074b4 <sniprintf>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4a08      	ldr	r2, [pc, #32]	@ (8005018 <app_init+0x294>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <app_init+0x28c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f8e1 	bl	80051c4 <logger_log_print_>
 8005002:	f7ff fc23 	bl	800484c <vPortExitCritical>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	08008ab8 	.word	0x08008ab8
 8005014:	08008430 	.word	0x08008430
 8005018:	2000418c 	.word	0x2000418c
 800501c:	08008438 	.word	0x08008438
 8005020:	0800844c 	.word	0x0800844c
 8005024:	08008450 	.word	0x08008450
 8005028:	08008468 	.word	0x08008468
 800502c:	08005319 	.word	0x08005319
 8005030:	08008474 	.word	0x08008474
 8005034:	08008480 	.word	0x08008480
 8005038:	080084a0 	.word	0x080084a0
 800503c:	e000edf0 	.word	0xe000edf0
 8005040:	e0001000 	.word	0xe0001000
 8005044:	080084c0 	.word	0x080084c0

08005048 <linked_list_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void linked_list_init(linked_list_t* hlist)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  hlist->pfirst_node = NULL;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
  hlist->plast_node = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	605a      	str	r2, [r3, #4]
  hlist->len = 0;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <linked_list_node_init>:

void linked_list_node_init(linked_list_node_t* hnode, void* pdata)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  hnode->pdata = pdata;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	601a      	str	r2, [r3, #0]
  hnode->pnext_node = NULL;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	605a      	str	r2, [r3, #4]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <linked_list_node_remove>:

linked_list_node_t* linked_list_node_remove(linked_list_t* hlist)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  linked_list_node_t* hnode;
  if(0 == hlist->len)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d102      	bne.n	80050a6 <linked_list_node_remove+0x16>
  {
    hnode = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e024      	b.n	80050f0 <linked_list_node_remove+0x60>
  }
  else if(1 == hlist->len)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d111      	bne.n	80050d2 <linked_list_node_remove+0x42>
  {
    hnode = hlist->pfirst_node;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
    hlist->pfirst_node = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
    hlist->plast_node = NULL;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	605a      	str	r2, [r3, #4]
    hnode->pnext_node = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	605a      	str	r2, [r3, #4]
    hlist->len--;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	1e5a      	subs	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	e00e      	b.n	80050f0 <linked_list_node_remove+0x60>
  }
  else
  {
    hnode = hlist->pfirst_node;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]
    hlist->pfirst_node = hnode->pnext_node;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
    hnode->pnext_node = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	605a      	str	r2, [r3, #4]
    hlist->len--;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	1e5a      	subs	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	609a      	str	r2, [r3, #8]
  }
  return hnode;
 80050f0:	68fb      	ldr	r3, [r7, #12]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <linked_list_node_add>:

void linked_list_node_add(linked_list_t* hlist, linked_list_node_t* hnode)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  if(0 == hlist->len)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <linked_list_node_add+0x20>
  {
    hlist->pfirst_node = hnode;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	601a      	str	r2, [r3, #0]
    hlist->plast_node = hnode;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	605a      	str	r2, [r3, #4]
 800511c:	e006      	b.n	800512c <linked_list_node_add+0x2e>
  }
  else
  {
    hlist->plast_node->pnext_node = hnode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	605a      	str	r2, [r3, #4]
    hlist->plast_node = hnode;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	605a      	str	r2, [r3, #4]
  }
  hlist->len++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	609a      	str	r2, [r3, #8]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <linked_list_node_remove_by_id>:

linked_list_node_t* linked_list_node_remove_by_id(linked_list_t* hlist, int id)
{
 8005142:	b480      	push	{r7}
 8005144:	b087      	sub	sp, #28
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
    linked_list_node_t* prev = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
    linked_list_node_t* node = hlist->pfirst_node;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	613b      	str	r3, [r7, #16]
    while (node != NULL) {
 8005156:	e02a      	b.n	80051ae <linked_list_node_remove_by_id+0x6c>
        // Se asume que pdata apunta a una struct que tiene un campo int id
        int* entry_id = (int*)node->pdata;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
        if (*entry_id == id) {
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d11d      	bne.n	80051a4 <linked_list_node_remove_by_id+0x62>
            // Eliminar nodo de la lista
            if (prev == NULL) {
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <linked_list_node_remove_by_id+0x36>
                hlist->pfirst_node = node->pnext_node;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e003      	b.n	8005180 <linked_list_node_remove_by_id+0x3e>
            } else {
                prev->pnext_node = node->pnext_node;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	605a      	str	r2, [r3, #4]
            }
            if (node == hlist->plast_node) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d102      	bne.n	8005190 <linked_list_node_remove_by_id+0x4e>
                hlist->plast_node = prev;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	605a      	str	r2, [r3, #4]
            }
            hlist->len--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	1e5a      	subs	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
            node->pnext_node = NULL;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2200      	movs	r2, #0
 800519e:	605a      	str	r2, [r3, #4]
            return node;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	e008      	b.n	80051b6 <linked_list_node_remove_by_id+0x74>
        }
        prev = node;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	617b      	str	r3, [r7, #20]
        node = node->pnext_node;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]
    while (node != NULL) {
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1d1      	bne.n	8005158 <linked_list_node_remove_by_id+0x16>
    }
    return NULL;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	printf(msg);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f002 f95f 	bl	8007490 <iprintf>
	fflush(stdout);
 80051d2:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <logger_log_print_+0x24>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f002 f883 	bl	80072e4 <fflush>
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	2000003c 	.word	0x2000003c

080051ec <memory_pool_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void memory_pool_init(memory_pool_t* hmp, void* pmemory, size_t nblocks, size_t block_size)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  linked_list_t* hlist = &(hmp->block_list);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	61bb      	str	r3, [r7, #24]
  linked_list_init(hlist);
 80051fe:	69b8      	ldr	r0, [r7, #24]
 8005200:	f7ff ff22 	bl	8005048 <linked_list_init>

  for(size_t i = 0; i < nblocks; ++i)
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e011      	b.n	800522e <memory_pool_init+0x42>
  {
    void* pblock = pmemory + i*block_size;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	4413      	add	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
    linked_list_node_init((memory_pool_block_t*)pblock, NULL);
 8005218:	2100      	movs	r1, #0
 800521a:	6978      	ldr	r0, [r7, #20]
 800521c:	f7ff ff27 	bl	800506e <linked_list_node_init>
    linked_list_node_add(hlist, pblock);
 8005220:	6979      	ldr	r1, [r7, #20]
 8005222:	69b8      	ldr	r0, [r7, #24]
 8005224:	f7ff ff6b 	bl	80050fe <linked_list_node_add>
  for(size_t i = 0; i < nblocks; ++i)
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d3e9      	bcc.n	800520a <memory_pool_init+0x1e>
  }
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <memory_pool_block_get>:

void* memory_pool_block_get(memory_pool_t* hmp)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  portENTER_CRITICAL();
 8005248:	f7ff face 	bl	80047e8 <vPortEnterCritical>
  linked_list_t* hlist = &(hmp->block_list);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60fb      	str	r3, [r7, #12]
  void* pblock = (void*)linked_list_node_remove(hlist);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff ff1d 	bl	8005090 <linked_list_node_remove>
 8005256:	60b8      	str	r0, [r7, #8]
  portEXIT_CRITICAL();
 8005258:	f7ff faf8 	bl	800484c <vPortExitCritical>
  return pblock;
 800525c:	68bb      	ldr	r3, [r7, #8]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <memory_pool_block_put>:

void memory_pool_block_put(memory_pool_t* hmp, void* pblock)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  portENTER_CRITICAL();
 8005270:	f7ff faba 	bl	80047e8 <vPortEnterCritical>
  if(NULL != pblock)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <memory_pool_block_put+0x28>
  {
    linked_list_t* hlist = &(hmp->block_list);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]
    linked_list_node_init((memory_pool_block_t*)pblock, NULL);
 800527e:	2100      	movs	r1, #0
 8005280:	6838      	ldr	r0, [r7, #0]
 8005282:	f7ff fef4 	bl	800506e <linked_list_node_init>
    linked_list_node_add(hlist, pblock);
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff ff38 	bl	80050fe <linked_list_node_add>
  }
  portEXIT_CRITICAL();
 800528e:	f7ff fadd 	bl	800484c <vPortExitCritical>
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <button_init_>:
{
    uint32_t counter;
} button;

static void button_init_(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  button.counter = 0;
 80052a0:	4b03      	ldr	r3, [pc, #12]	@ (80052b0 <button_init_+0x14>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	20004190 	.word	0x20004190

080052b4 <button_process_state_>:

static button_type_t button_process_state_(bool value)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	71fb      	strb	r3, [r7, #7]
  button_type_t ret = BUTTON_TYPE_NONE;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
  if(value)
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <button_process_state_+0x20>
  {
    button.counter += TASK_PERIOD_MS_;
 80052c8:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <button_process_state_+0x60>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3332      	adds	r3, #50	@ 0x32
 80052ce:	4a11      	ldr	r2, [pc, #68]	@ (8005314 <button_process_state_+0x60>)
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e018      	b.n	8005306 <button_process_state_+0x52>
  }
  else
  {
    if(BUTTON_LONG_TIMEOUT_ <= button.counter)
 80052d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005314 <button_process_state_+0x60>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80052dc:	d302      	bcc.n	80052e4 <button_process_state_+0x30>
    {
      ret = BUTTON_TYPE_LONG;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	e00d      	b.n	8005300 <button_process_state_+0x4c>
    }
    else if(BUTTON_SHORT_TIMEOUT_ <= button.counter)
 80052e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <button_process_state_+0x60>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052ec:	d302      	bcc.n	80052f4 <button_process_state_+0x40>
    {
      ret = BUTTON_TYPE_SHORT;
 80052ee:	2302      	movs	r3, #2
 80052f0:	73fb      	strb	r3, [r7, #15]
 80052f2:	e005      	b.n	8005300 <button_process_state_+0x4c>
    }
    else if(BUTTON_PULSE_TIMEOUT_ <= button.counter)
 80052f4:	4b07      	ldr	r3, [pc, #28]	@ (8005314 <button_process_state_+0x60>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80052fa:	d901      	bls.n	8005300 <button_process_state_+0x4c>
    {
      ret = BUTTON_TYPE_PULSE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
    }
    button.counter = 0;
 8005300:	4b04      	ldr	r3, [pc, #16]	@ (8005314 <button_process_state_+0x60>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
  }
  return ret;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	20004190 	.word	0x20004190

08005318 <task_button>:

/********************** external functions definition ************************/

void task_button(void* argument)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  // Validar hardware del botón
  if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_RESET) {
 8005320:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005324:	48a7      	ldr	r0, [pc, #668]	@ (80055c4 <task_button+0x2ac>)
 8005326:	f7fb ff91 	bl	800124c <HAL_GPIO_ReadPin>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d139      	bne.n	80053a4 <task_button+0x8c>
    LOGGER_ERROR("Button: Error inicializando hardware");
 8005330:	f7ff fa5a 	bl	80047e8 <vPortEnterCritical>
 8005334:	4ba4      	ldr	r3, [pc, #656]	@ (80055c8 <task_button+0x2b0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4aa4      	ldr	r2, [pc, #656]	@ (80055cc <task_button+0x2b4>)
 800533a:	213f      	movs	r1, #63	@ 0x3f
 800533c:	4618      	mov	r0, r3
 800533e:	f002 f8b9 	bl	80074b4 <sniprintf>
 8005342:	4603      	mov	r3, r0
 8005344:	4aa2      	ldr	r2, [pc, #648]	@ (80055d0 <task_button+0x2b8>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	4b9f      	ldr	r3, [pc, #636]	@ (80055c8 <task_button+0x2b0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ff39 	bl	80051c4 <logger_log_print_>
 8005352:	f7ff fa7b 	bl	800484c <vPortExitCritical>
 8005356:	f7ff fa47 	bl	80047e8 <vPortEnterCritical>
 800535a:	4b9b      	ldr	r3, [pc, #620]	@ (80055c8 <task_button+0x2b0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a9d      	ldr	r2, [pc, #628]	@ (80055d4 <task_button+0x2bc>)
 8005360:	213f      	movs	r1, #63	@ 0x3f
 8005362:	4618      	mov	r0, r3
 8005364:	f002 f8a6 	bl	80074b4 <sniprintf>
 8005368:	4603      	mov	r3, r0
 800536a:	4a99      	ldr	r2, [pc, #612]	@ (80055d0 <task_button+0x2b8>)
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b96      	ldr	r3, [pc, #600]	@ (80055c8 <task_button+0x2b0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff26 	bl	80051c4 <logger_log_print_>
 8005378:	f7ff fa68 	bl	800484c <vPortExitCritical>
 800537c:	f7ff fa34 	bl	80047e8 <vPortEnterCritical>
 8005380:	4b91      	ldr	r3, [pc, #580]	@ (80055c8 <task_button+0x2b0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a94      	ldr	r2, [pc, #592]	@ (80055d8 <task_button+0x2c0>)
 8005386:	213f      	movs	r1, #63	@ 0x3f
 8005388:	4618      	mov	r0, r3
 800538a:	f002 f893 	bl	80074b4 <sniprintf>
 800538e:	4603      	mov	r3, r0
 8005390:	4a8f      	ldr	r2, [pc, #572]	@ (80055d0 <task_button+0x2b8>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b8c      	ldr	r3, [pc, #560]	@ (80055c8 <task_button+0x2b0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff ff13 	bl	80051c4 <logger_log_print_>
 800539e:	f7ff fa55 	bl	800484c <vPortExitCritical>
    return;
 80053a2:	e1a8      	b.n	80056f6 <task_button+0x3de>
  }

  button_init_();
 80053a4:	f7ff ff7a 	bl	800529c <button_init_>
  LOGGER_INFO("Button: Tarea iniciada");
 80053a8:	f7ff fa1e 	bl	80047e8 <vPortEnterCritical>
 80053ac:	4b86      	ldr	r3, [pc, #536]	@ (80055c8 <task_button+0x2b0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a8a      	ldr	r2, [pc, #552]	@ (80055dc <task_button+0x2c4>)
 80053b2:	213f      	movs	r1, #63	@ 0x3f
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 f87d 	bl	80074b4 <sniprintf>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a84      	ldr	r2, [pc, #528]	@ (80055d0 <task_button+0x2b8>)
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b81      	ldr	r3, [pc, #516]	@ (80055c8 <task_button+0x2b0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fefd 	bl	80051c4 <logger_log_print_>
 80053ca:	f7ff fa3f 	bl	800484c <vPortExitCritical>
 80053ce:	f7ff fa0b 	bl	80047e8 <vPortEnterCritical>
 80053d2:	4b7d      	ldr	r3, [pc, #500]	@ (80055c8 <task_button+0x2b0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a82      	ldr	r2, [pc, #520]	@ (80055e0 <task_button+0x2c8>)
 80053d8:	213f      	movs	r1, #63	@ 0x3f
 80053da:	4618      	mov	r0, r3
 80053dc:	f002 f86a 	bl	80074b4 <sniprintf>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4a7b      	ldr	r2, [pc, #492]	@ (80055d0 <task_button+0x2b8>)
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	4b78      	ldr	r3, [pc, #480]	@ (80055c8 <task_button+0x2b0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff feea 	bl	80051c4 <logger_log_print_>
 80053f0:	f7ff fa2c 	bl	800484c <vPortExitCritical>
 80053f4:	f7ff f9f8 	bl	80047e8 <vPortEnterCritical>
 80053f8:	4b73      	ldr	r3, [pc, #460]	@ (80055c8 <task_button+0x2b0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a76      	ldr	r2, [pc, #472]	@ (80055d8 <task_button+0x2c0>)
 80053fe:	213f      	movs	r1, #63	@ 0x3f
 8005400:	4618      	mov	r0, r3
 8005402:	f002 f857 	bl	80074b4 <sniprintf>
 8005406:	4603      	mov	r3, r0
 8005408:	4a71      	ldr	r2, [pc, #452]	@ (80055d0 <task_button+0x2b8>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	4b6e      	ldr	r3, [pc, #440]	@ (80055c8 <task_button+0x2b0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fed7 	bl	80051c4 <logger_log_print_>
 8005416:	f7ff fa19 	bl	800484c <vPortExitCritical>

  while(true)
  {
    GPIO_PinState button_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 800541a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800541e:	4869      	ldr	r0, [pc, #420]	@ (80055c4 <task_button+0x2ac>)
 8005420:	f7fb ff14 	bl	800124c <HAL_GPIO_ReadPin>
 8005424:	4603      	mov	r3, r0
 8005426:	73bb      	strb	r3, [r7, #14]
    button_type_t button_type = button_process_state_(!button_state);
 8005428:	7bbb      	ldrb	r3, [r7, #14]
 800542a:	2b00      	cmp	r3, #0
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff ff3d 	bl	80052b4 <button_process_state_>
 800543a:	4603      	mov	r3, r0
 800543c:	737b      	strb	r3, [r7, #13]

    // Procesar evento si hay uno
    if (button_type != BUTTON_TYPE_NONE) {
 800543e:	7b7b      	ldrb	r3, [r7, #13]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8154 	beq.w	80056ee <task_button+0x3d6>
      msg_event_t event;
      // Evaluar estado del botón

      switch (button_type) {
 8005446:	7b7b      	ldrb	r3, [r7, #13]
 8005448:	2b03      	cmp	r3, #3
 800544a:	d07f      	beq.n	800554c <task_button+0x234>
 800544c:	2b03      	cmp	r3, #3
 800544e:	f300 80d1 	bgt.w	80055f4 <task_button+0x2dc>
 8005452:	2b01      	cmp	r3, #1
 8005454:	d002      	beq.n	800545c <task_button+0x144>
 8005456:	2b02      	cmp	r3, #2
 8005458:	d03c      	beq.n	80054d4 <task_button+0x1bc>
 800545a:	e0cb      	b.n	80055f4 <task_button+0x2dc>
        case BUTTON_TYPE_PULSE:
          LOGGER_DEBUG("Button: Pulso detectado");
 800545c:	f7ff f9c4 	bl	80047e8 <vPortEnterCritical>
 8005460:	4b59      	ldr	r3, [pc, #356]	@ (80055c8 <task_button+0x2b0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5f      	ldr	r2, [pc, #380]	@ (80055e4 <task_button+0x2cc>)
 8005466:	213f      	movs	r1, #63	@ 0x3f
 8005468:	4618      	mov	r0, r3
 800546a:	f002 f823 	bl	80074b4 <sniprintf>
 800546e:	4603      	mov	r3, r0
 8005470:	4a57      	ldr	r2, [pc, #348]	@ (80055d0 <task_button+0x2b8>)
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	4b54      	ldr	r3, [pc, #336]	@ (80055c8 <task_button+0x2b0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fea3 	bl	80051c4 <logger_log_print_>
 800547e:	f7ff f9e5 	bl	800484c <vPortExitCritical>
 8005482:	f7ff f9b1 	bl	80047e8 <vPortEnterCritical>
 8005486:	4b50      	ldr	r3, [pc, #320]	@ (80055c8 <task_button+0x2b0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a57      	ldr	r2, [pc, #348]	@ (80055e8 <task_button+0x2d0>)
 800548c:	213f      	movs	r1, #63	@ 0x3f
 800548e:	4618      	mov	r0, r3
 8005490:	f002 f810 	bl	80074b4 <sniprintf>
 8005494:	4603      	mov	r3, r0
 8005496:	4a4e      	ldr	r2, [pc, #312]	@ (80055d0 <task_button+0x2b8>)
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4b4b      	ldr	r3, [pc, #300]	@ (80055c8 <task_button+0x2b0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff fe90 	bl	80051c4 <logger_log_print_>
 80054a4:	f7ff f9d2 	bl	800484c <vPortExitCritical>
 80054a8:	f7ff f99e 	bl	80047e8 <vPortEnterCritical>
 80054ac:	4b46      	ldr	r3, [pc, #280]	@ (80055c8 <task_button+0x2b0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a49      	ldr	r2, [pc, #292]	@ (80055d8 <task_button+0x2c0>)
 80054b2:	213f      	movs	r1, #63	@ 0x3f
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 fffd 	bl	80074b4 <sniprintf>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4a44      	ldr	r2, [pc, #272]	@ (80055d0 <task_button+0x2b8>)
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b41      	ldr	r3, [pc, #260]	@ (80055c8 <task_button+0x2b0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fe7d 	bl	80051c4 <logger_log_print_>
 80054ca:	f7ff f9bf 	bl	800484c <vPortExitCritical>
          event = MSG_EVENT_BUTTON_PULSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
          break;
 80054d2:	e0c9      	b.n	8005668 <task_button+0x350>
        case BUTTON_TYPE_SHORT:
          LOGGER_DEBUG("Button: Pulsación corta detectada");
 80054d4:	f7ff f988 	bl	80047e8 <vPortEnterCritical>
 80054d8:	4b3b      	ldr	r3, [pc, #236]	@ (80055c8 <task_button+0x2b0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a41      	ldr	r2, [pc, #260]	@ (80055e4 <task_button+0x2cc>)
 80054de:	213f      	movs	r1, #63	@ 0x3f
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 ffe7 	bl	80074b4 <sniprintf>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4a39      	ldr	r2, [pc, #228]	@ (80055d0 <task_button+0x2b8>)
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	4b36      	ldr	r3, [pc, #216]	@ (80055c8 <task_button+0x2b0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fe67 	bl	80051c4 <logger_log_print_>
 80054f6:	f7ff f9a9 	bl	800484c <vPortExitCritical>
 80054fa:	f7ff f975 	bl	80047e8 <vPortEnterCritical>
 80054fe:	4b32      	ldr	r3, [pc, #200]	@ (80055c8 <task_button+0x2b0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a3a      	ldr	r2, [pc, #232]	@ (80055ec <task_button+0x2d4>)
 8005504:	213f      	movs	r1, #63	@ 0x3f
 8005506:	4618      	mov	r0, r3
 8005508:	f001 ffd4 	bl	80074b4 <sniprintf>
 800550c:	4603      	mov	r3, r0
 800550e:	4a30      	ldr	r2, [pc, #192]	@ (80055d0 <task_button+0x2b8>)
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	4b2d      	ldr	r3, [pc, #180]	@ (80055c8 <task_button+0x2b0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fe54 	bl	80051c4 <logger_log_print_>
 800551c:	f7ff f996 	bl	800484c <vPortExitCritical>
 8005520:	f7ff f962 	bl	80047e8 <vPortEnterCritical>
 8005524:	4b28      	ldr	r3, [pc, #160]	@ (80055c8 <task_button+0x2b0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2b      	ldr	r2, [pc, #172]	@ (80055d8 <task_button+0x2c0>)
 800552a:	213f      	movs	r1, #63	@ 0x3f
 800552c:	4618      	mov	r0, r3
 800552e:	f001 ffc1 	bl	80074b4 <sniprintf>
 8005532:	4603      	mov	r3, r0
 8005534:	4a26      	ldr	r2, [pc, #152]	@ (80055d0 <task_button+0x2b8>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b23      	ldr	r3, [pc, #140]	@ (80055c8 <task_button+0x2b0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fe41 	bl	80051c4 <logger_log_print_>
 8005542:	f7ff f983 	bl	800484c <vPortExitCritical>
          event = MSG_EVENT_BUTTON_SHORT;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
          break;
 800554a:	e08d      	b.n	8005668 <task_button+0x350>
        case BUTTON_TYPE_LONG:
          LOGGER_DEBUG("Button: Pulsación larga detectada");
 800554c:	f7ff f94c 	bl	80047e8 <vPortEnterCritical>
 8005550:	4b1d      	ldr	r3, [pc, #116]	@ (80055c8 <task_button+0x2b0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a23      	ldr	r2, [pc, #140]	@ (80055e4 <task_button+0x2cc>)
 8005556:	213f      	movs	r1, #63	@ 0x3f
 8005558:	4618      	mov	r0, r3
 800555a:	f001 ffab 	bl	80074b4 <sniprintf>
 800555e:	4603      	mov	r3, r0
 8005560:	4a1b      	ldr	r2, [pc, #108]	@ (80055d0 <task_button+0x2b8>)
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b18      	ldr	r3, [pc, #96]	@ (80055c8 <task_button+0x2b0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fe2b 	bl	80051c4 <logger_log_print_>
 800556e:	f7ff f96d 	bl	800484c <vPortExitCritical>
 8005572:	f7ff f939 	bl	80047e8 <vPortEnterCritical>
 8005576:	4b14      	ldr	r3, [pc, #80]	@ (80055c8 <task_button+0x2b0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1d      	ldr	r2, [pc, #116]	@ (80055f0 <task_button+0x2d8>)
 800557c:	213f      	movs	r1, #63	@ 0x3f
 800557e:	4618      	mov	r0, r3
 8005580:	f001 ff98 	bl	80074b4 <sniprintf>
 8005584:	4603      	mov	r3, r0
 8005586:	4a12      	ldr	r2, [pc, #72]	@ (80055d0 <task_button+0x2b8>)
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <task_button+0x2b0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fe18 	bl	80051c4 <logger_log_print_>
 8005594:	f7ff f95a 	bl	800484c <vPortExitCritical>
 8005598:	f7ff f926 	bl	80047e8 <vPortEnterCritical>
 800559c:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <task_button+0x2b0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0d      	ldr	r2, [pc, #52]	@ (80055d8 <task_button+0x2c0>)
 80055a2:	213f      	movs	r1, #63	@ 0x3f
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 ff85 	bl	80074b4 <sniprintf>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4a08      	ldr	r2, [pc, #32]	@ (80055d0 <task_button+0x2b8>)
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <task_button+0x2b0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff fe05 	bl	80051c4 <logger_log_print_>
 80055ba:	f7ff f947 	bl	800484c <vPortExitCritical>
          event = MSG_EVENT_BUTTON_LONG;
 80055be:	2302      	movs	r3, #2
 80055c0:	73fb      	strb	r3, [r7, #15]
          break;
 80055c2:	e051      	b.n	8005668 <task_button+0x350>
 80055c4:	40020800 	.word	0x40020800
 80055c8:	08008ab8 	.word	0x08008ab8
 80055cc:	080084e4 	.word	0x080084e4
 80055d0:	2000418c 	.word	0x2000418c
 80055d4:	080084f0 	.word	0x080084f0
 80055d8:	08008518 	.word	0x08008518
 80055dc:	0800851c 	.word	0x0800851c
 80055e0:	08008524 	.word	0x08008524
 80055e4:	0800853c 	.word	0x0800853c
 80055e8:	08008548 	.word	0x08008548
 80055ec:	08008560 	.word	0x08008560
 80055f0:	08008584 	.word	0x08008584
        default:
          LOGGER_ERROR("Button: Tipo de pulsación inválido");
 80055f4:	f7ff f8f8 	bl	80047e8 <vPortEnterCritical>
 80055f8:	4b40      	ldr	r3, [pc, #256]	@ (80056fc <task_button+0x3e4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a40      	ldr	r2, [pc, #256]	@ (8005700 <task_button+0x3e8>)
 80055fe:	213f      	movs	r1, #63	@ 0x3f
 8005600:	4618      	mov	r0, r3
 8005602:	f001 ff57 	bl	80074b4 <sniprintf>
 8005606:	4603      	mov	r3, r0
 8005608:	4a3e      	ldr	r2, [pc, #248]	@ (8005704 <task_button+0x3ec>)
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4b3b      	ldr	r3, [pc, #236]	@ (80056fc <task_button+0x3e4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fdd7 	bl	80051c4 <logger_log_print_>
 8005616:	f7ff f919 	bl	800484c <vPortExitCritical>
 800561a:	f7ff f8e5 	bl	80047e8 <vPortEnterCritical>
 800561e:	4b37      	ldr	r3, [pc, #220]	@ (80056fc <task_button+0x3e4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a39      	ldr	r2, [pc, #228]	@ (8005708 <task_button+0x3f0>)
 8005624:	213f      	movs	r1, #63	@ 0x3f
 8005626:	4618      	mov	r0, r3
 8005628:	f001 ff44 	bl	80074b4 <sniprintf>
 800562c:	4603      	mov	r3, r0
 800562e:	4a35      	ldr	r2, [pc, #212]	@ (8005704 <task_button+0x3ec>)
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4b32      	ldr	r3, [pc, #200]	@ (80056fc <task_button+0x3e4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fdc4 	bl	80051c4 <logger_log_print_>
 800563c:	f7ff f906 	bl	800484c <vPortExitCritical>
 8005640:	f7ff f8d2 	bl	80047e8 <vPortEnterCritical>
 8005644:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <task_button+0x3e4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a30      	ldr	r2, [pc, #192]	@ (800570c <task_button+0x3f4>)
 800564a:	213f      	movs	r1, #63	@ 0x3f
 800564c:	4618      	mov	r0, r3
 800564e:	f001 ff31 	bl	80074b4 <sniprintf>
 8005652:	4603      	mov	r3, r0
 8005654:	4a2b      	ldr	r2, [pc, #172]	@ (8005704 <task_button+0x3ec>)
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4b28      	ldr	r3, [pc, #160]	@ (80056fc <task_button+0x3e4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fdb1 	bl	80051c4 <logger_log_print_>
 8005662:	f7ff f8f3 	bl	800484c <vPortExitCritical>
          continue;
 8005666:	e045      	b.n	80056f4 <task_button+0x3dc>
      }

      // Enviar evento a UI
      if (!ao_ui_send_event(event)) {
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	4618      	mov	r0, r3
 800566c:	f001 f9a4 	bl	80069b8 <ao_ui_send_event>
 8005670:	4603      	mov	r3, r0
 8005672:	f083 0301 	eor.w	r3, r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d038      	beq.n	80056ee <task_button+0x3d6>
        LOGGER_ERROR("Button: Error enviando evento a UI");
 800567c:	f7ff f8b4 	bl	80047e8 <vPortEnterCritical>
 8005680:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <task_button+0x3e4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1e      	ldr	r2, [pc, #120]	@ (8005700 <task_button+0x3e8>)
 8005686:	213f      	movs	r1, #63	@ 0x3f
 8005688:	4618      	mov	r0, r3
 800568a:	f001 ff13 	bl	80074b4 <sniprintf>
 800568e:	4603      	mov	r3, r0
 8005690:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <task_button+0x3ec>)
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b19      	ldr	r3, [pc, #100]	@ (80056fc <task_button+0x3e4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fd93 	bl	80051c4 <logger_log_print_>
 800569e:	f7ff f8d5 	bl	800484c <vPortExitCritical>
 80056a2:	f7ff f8a1 	bl	80047e8 <vPortEnterCritical>
 80056a6:	4b15      	ldr	r3, [pc, #84]	@ (80056fc <task_button+0x3e4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a19      	ldr	r2, [pc, #100]	@ (8005710 <task_button+0x3f8>)
 80056ac:	213f      	movs	r1, #63	@ 0x3f
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 ff00 	bl	80074b4 <sniprintf>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4a13      	ldr	r2, [pc, #76]	@ (8005704 <task_button+0x3ec>)
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <task_button+0x3e4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fd80 	bl	80051c4 <logger_log_print_>
 80056c4:	f7ff f8c2 	bl	800484c <vPortExitCritical>
 80056c8:	f7ff f88e 	bl	80047e8 <vPortEnterCritical>
 80056cc:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <task_button+0x3e4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0e      	ldr	r2, [pc, #56]	@ (800570c <task_button+0x3f4>)
 80056d2:	213f      	movs	r1, #63	@ 0x3f
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 feed 	bl	80074b4 <sniprintf>
 80056da:	4603      	mov	r3, r0
 80056dc:	4a09      	ldr	r2, [pc, #36]	@ (8005704 <task_button+0x3ec>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <task_button+0x3e4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fd6d 	bl	80051c4 <logger_log_print_>
 80056ea:	f7ff f8af 	bl	800484c <vPortExitCritical>
      }
    }

    vTaskDelay((TickType_t)(TASK_PERIOD_MS_ / portTICK_PERIOD_MS));
 80056ee:	2032      	movs	r0, #50	@ 0x32
 80056f0:	f7fe f9de 	bl	8003ab0 <vTaskDelay>
  {
 80056f4:	e691      	b.n	800541a <task_button+0x102>
  }
}
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	08008ab8 	.word	0x08008ab8
 8005700:	080084e4 	.word	0x080084e4
 8005704:	2000418c 	.word	0x2000418c
 8005708:	080085a8 	.word	0x080085a8
 800570c:	08008518 	.word	0x08008518
 8005710:	080085d0 	.word	0x080085d0

08005714 <ledColorToStr>:
/********************** external data definition *****************************/

/********************** internal functions definition ************************/

const char* ledColorToStr(ao_led_color color)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
	switch(color)
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d008      	beq.n	8005736 <ledColorToStr+0x22>
 8005724:	2b02      	cmp	r3, #2
 8005726:	dc0a      	bgt.n	800573e <ledColorToStr+0x2a>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <ledColorToStr+0x1e>
 800572c:	2b01      	cmp	r3, #1
 800572e:	d004      	beq.n	800573a <ledColorToStr+0x26>
 8005730:	e005      	b.n	800573e <ledColorToStr+0x2a>
	{
	case AO_LED_COLOR_RED: return "ROJO";
 8005732:	4b06      	ldr	r3, [pc, #24]	@ (800574c <ledColorToStr+0x38>)
 8005734:	e004      	b.n	8005740 <ledColorToStr+0x2c>
	case AO_LED_COLOR_BLUE: return "AZUL";
 8005736:	4b06      	ldr	r3, [pc, #24]	@ (8005750 <ledColorToStr+0x3c>)
 8005738:	e002      	b.n	8005740 <ledColorToStr+0x2c>
	case AO_LED_COLOR_GREEN: return "VERDE";
 800573a:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <ledColorToStr+0x40>)
 800573c:	e000      	b.n	8005740 <ledColorToStr+0x2c>
	default: return "INVALIDO";
 800573e:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <ledColorToStr+0x44>)
	}
	return "INVALIDO";
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	080085f4 	.word	0x080085f4
 8005750:	080085fc 	.word	0x080085fc
 8005754:	08008604 	.word	0x08008604
 8005758:	0800860c 	.word	0x0800860c

0800575c <task_>:

static void task_(void *argument)
{
 800575c:	b590      	push	{r4, r7, lr}
 800575e:	b087      	sub	sp, #28
 8005760:	af02      	add	r7, sp, #8
 8005762:	6078      	str	r0, [r7, #4]
  ao_led_handle_t* hao = (ao_led_handle_t*)argument;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60fb      	str	r3, [r7, #12]
  if (NULL == hao) {
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d139      	bne.n	80057e2 <task_+0x86>
    LOGGER_ERROR("LED task iniciada con handle nulo");
 800576e:	f7ff f83b 	bl	80047e8 <vPortEnterCritical>
 8005772:	4b98      	ldr	r3, [pc, #608]	@ (80059d4 <task_+0x278>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a98      	ldr	r2, [pc, #608]	@ (80059d8 <task_+0x27c>)
 8005778:	213f      	movs	r1, #63	@ 0x3f
 800577a:	4618      	mov	r0, r3
 800577c:	f001 fe9a 	bl	80074b4 <sniprintf>
 8005780:	4603      	mov	r3, r0
 8005782:	4a96      	ldr	r2, [pc, #600]	@ (80059dc <task_+0x280>)
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4b93      	ldr	r3, [pc, #588]	@ (80059d4 <task_+0x278>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fd1a 	bl	80051c4 <logger_log_print_>
 8005790:	f7ff f85c 	bl	800484c <vPortExitCritical>
 8005794:	f7ff f828 	bl	80047e8 <vPortEnterCritical>
 8005798:	4b8e      	ldr	r3, [pc, #568]	@ (80059d4 <task_+0x278>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a90      	ldr	r2, [pc, #576]	@ (80059e0 <task_+0x284>)
 800579e:	213f      	movs	r1, #63	@ 0x3f
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fe87 	bl	80074b4 <sniprintf>
 80057a6:	4603      	mov	r3, r0
 80057a8:	4a8c      	ldr	r2, [pc, #560]	@ (80059dc <task_+0x280>)
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	4b89      	ldr	r3, [pc, #548]	@ (80059d4 <task_+0x278>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fd07 	bl	80051c4 <logger_log_print_>
 80057b6:	f7ff f849 	bl	800484c <vPortExitCritical>
 80057ba:	f7ff f815 	bl	80047e8 <vPortEnterCritical>
 80057be:	4b85      	ldr	r3, [pc, #532]	@ (80059d4 <task_+0x278>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a88      	ldr	r2, [pc, #544]	@ (80059e4 <task_+0x288>)
 80057c4:	213f      	movs	r1, #63	@ 0x3f
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 fe74 	bl	80074b4 <sniprintf>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4a83      	ldr	r2, [pc, #524]	@ (80059dc <task_+0x280>)
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b80      	ldr	r3, [pc, #512]	@ (80059d4 <task_+0x278>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fcf4 	bl	80051c4 <logger_log_print_>
 80057dc:	f7ff f836 	bl	800484c <vPortExitCritical>
    return;
 80057e0:	e314      	b.n	8005e0c <task_+0x6b0>
  }

  LOGGER_INFO("Iniciando tarea LED %s", ledColorToStr(hao->color));
 80057e2:	f7ff f801 	bl	80047e8 <vPortEnterCritical>
 80057e6:	4b7b      	ldr	r3, [pc, #492]	@ (80059d4 <task_+0x278>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a7f      	ldr	r2, [pc, #508]	@ (80059e8 <task_+0x28c>)
 80057ec:	213f      	movs	r1, #63	@ 0x3f
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fe60 	bl	80074b4 <sniprintf>
 80057f4:	4603      	mov	r3, r0
 80057f6:	4a79      	ldr	r2, [pc, #484]	@ (80059dc <task_+0x280>)
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	4b76      	ldr	r3, [pc, #472]	@ (80059d4 <task_+0x278>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fce0 	bl	80051c4 <logger_log_print_>
 8005804:	f7ff f822 	bl	800484c <vPortExitCritical>
 8005808:	f7fe ffee 	bl	80047e8 <vPortEnterCritical>
 800580c:	4b71      	ldr	r3, [pc, #452]	@ (80059d4 <task_+0x278>)
 800580e:	681c      	ldr	r4, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff ff7d 	bl	8005714 <ledColorToStr>
 800581a:	4603      	mov	r3, r0
 800581c:	4a73      	ldr	r2, [pc, #460]	@ (80059ec <task_+0x290>)
 800581e:	213f      	movs	r1, #63	@ 0x3f
 8005820:	4620      	mov	r0, r4
 8005822:	f001 fe47 	bl	80074b4 <sniprintf>
 8005826:	4603      	mov	r3, r0
 8005828:	4a6c      	ldr	r2, [pc, #432]	@ (80059dc <task_+0x280>)
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	4b69      	ldr	r3, [pc, #420]	@ (80059d4 <task_+0x278>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fcc7 	bl	80051c4 <logger_log_print_>
 8005836:	f7ff f809 	bl	800484c <vPortExitCritical>
 800583a:	f7fe ffd5 	bl	80047e8 <vPortEnterCritical>
 800583e:	4b65      	ldr	r3, [pc, #404]	@ (80059d4 <task_+0x278>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a68      	ldr	r2, [pc, #416]	@ (80059e4 <task_+0x288>)
 8005844:	213f      	movs	r1, #63	@ 0x3f
 8005846:	4618      	mov	r0, r3
 8005848:	f001 fe34 	bl	80074b4 <sniprintf>
 800584c:	4603      	mov	r3, r0
 800584e:	4a63      	ldr	r2, [pc, #396]	@ (80059dc <task_+0x280>)
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b60      	ldr	r3, [pc, #384]	@ (80059d4 <task_+0x278>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fcb4 	bl	80051c4 <logger_log_print_>
 800585c:	f7fe fff6 	bl	800484c <vPortExitCritical>
  
  while (true)
  {
    ao_led_message_t* msg;
    if (pdPASS == xQueueReceive(hao->hqueue, (void*)&msg, pdMS_TO_TICKS(TASK_INACTIVITY_TIMEOUT_MS_)))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f107 0108 	add.w	r1, r7, #8
 8005868:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800586c:	4618      	mov	r0, r3
 800586e:	f7fd fcf3 	bl	8003258 <xQueueReceive>
 8005872:	4603      	mov	r3, r0
 8005874:	2b01      	cmp	r3, #1
 8005876:	f040 827b 	bne.w	8005d70 <task_+0x614>
    {
      // Inicializamos asumiendo éxito
      msg->status = AO_LED_STATUS_OK;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	741a      	strb	r2, [r3, #16]

      // Validación básica del mensaje
      if (NULL == msg || NULL == msg->callback) {
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <task_+0x132>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d14f      	bne.n	800592e <task_+0x1d2>
        LOGGER_ERROR("LED %s: Mensaje invalido recibido", ledColorToStr(hao->color));
 800588e:	f7fe ffab 	bl	80047e8 <vPortEnterCritical>
 8005892:	4b50      	ldr	r3, [pc, #320]	@ (80059d4 <task_+0x278>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a50      	ldr	r2, [pc, #320]	@ (80059d8 <task_+0x27c>)
 8005898:	213f      	movs	r1, #63	@ 0x3f
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fe0a 	bl	80074b4 <sniprintf>
 80058a0:	4603      	mov	r3, r0
 80058a2:	4a4e      	ldr	r2, [pc, #312]	@ (80059dc <task_+0x280>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4b4b      	ldr	r3, [pc, #300]	@ (80059d4 <task_+0x278>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fc8a 	bl	80051c4 <logger_log_print_>
 80058b0:	f7fe ffcc 	bl	800484c <vPortExitCritical>
 80058b4:	f7fe ff98 	bl	80047e8 <vPortEnterCritical>
 80058b8:	4b46      	ldr	r3, [pc, #280]	@ (80059d4 <task_+0x278>)
 80058ba:	681c      	ldr	r4, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff ff27 	bl	8005714 <ledColorToStr>
 80058c6:	4603      	mov	r3, r0
 80058c8:	4a49      	ldr	r2, [pc, #292]	@ (80059f0 <task_+0x294>)
 80058ca:	213f      	movs	r1, #63	@ 0x3f
 80058cc:	4620      	mov	r0, r4
 80058ce:	f001 fdf1 	bl	80074b4 <sniprintf>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4a41      	ldr	r2, [pc, #260]	@ (80059dc <task_+0x280>)
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	4b3e      	ldr	r3, [pc, #248]	@ (80059d4 <task_+0x278>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fc71 	bl	80051c4 <logger_log_print_>
 80058e2:	f7fe ffb3 	bl	800484c <vPortExitCritical>
 80058e6:	f7fe ff7f 	bl	80047e8 <vPortEnterCritical>
 80058ea:	4b3a      	ldr	r3, [pc, #232]	@ (80059d4 <task_+0x278>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a3d      	ldr	r2, [pc, #244]	@ (80059e4 <task_+0x288>)
 80058f0:	213f      	movs	r1, #63	@ 0x3f
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 fdde 	bl	80074b4 <sniprintf>
 80058f8:	4603      	mov	r3, r0
 80058fa:	4a38      	ldr	r2, [pc, #224]	@ (80059dc <task_+0x280>)
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	4b35      	ldr	r3, [pc, #212]	@ (80059d4 <task_+0x278>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fc5e 	bl	80051c4 <logger_log_print_>
 8005908:	f7fe ffa0 	bl	800484c <vPortExitCritical>
        if (msg != NULL && msg->callback != NULL) {
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 827a 	beq.w	8005e08 <task_+0x6ac>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8275 	beq.w	8005e08 <task_+0x6ac>
            msg->callback(msg->data.id, AO_LED_STATUS_INVALID_PARAMS);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	2101      	movs	r1, #1
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
 800592c:	e798      	b.n	8005860 <task_+0x104>
        }
        continue;
      }

      LOGGER_DEBUG("LED %s: Mensaje recibido [ID:%d, Action:%d]", 
 800592e:	f7fe ff5b 	bl	80047e8 <vPortEnterCritical>
 8005932:	4b28      	ldr	r3, [pc, #160]	@ (80059d4 <task_+0x278>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a2f      	ldr	r2, [pc, #188]	@ (80059f4 <task_+0x298>)
 8005938:	213f      	movs	r1, #63	@ 0x3f
 800593a:	4618      	mov	r0, r3
 800593c:	f001 fdba 	bl	80074b4 <sniprintf>
 8005940:	4603      	mov	r3, r0
 8005942:	4a26      	ldr	r2, [pc, #152]	@ (80059dc <task_+0x280>)
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	4b23      	ldr	r3, [pc, #140]	@ (80059d4 <task_+0x278>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fc3a 	bl	80051c4 <logger_log_print_>
 8005950:	f7fe ff7c 	bl	800484c <vPortExitCritical>
 8005954:	f7fe ff48 	bl	80047e8 <vPortEnterCritical>
 8005958:	4b1e      	ldr	r3, [pc, #120]	@ (80059d4 <task_+0x278>)
 800595a:	681c      	ldr	r4, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fed7 	bl	8005714 <ledColorToStr>
 8005966:	4601      	mov	r1, r0
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	7912      	ldrb	r2, [r2, #4]
 8005970:	9201      	str	r2, [sp, #4]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	460b      	mov	r3, r1
 8005976:	4a20      	ldr	r2, [pc, #128]	@ (80059f8 <task_+0x29c>)
 8005978:	213f      	movs	r1, #63	@ 0x3f
 800597a:	4620      	mov	r0, r4
 800597c:	f001 fd9a 	bl	80074b4 <sniprintf>
 8005980:	4603      	mov	r3, r0
 8005982:	4a16      	ldr	r2, [pc, #88]	@ (80059dc <task_+0x280>)
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	4b13      	ldr	r3, [pc, #76]	@ (80059d4 <task_+0x278>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fc1a 	bl	80051c4 <logger_log_print_>
 8005990:	f7fe ff5c 	bl	800484c <vPortExitCritical>
 8005994:	f7fe ff28 	bl	80047e8 <vPortEnterCritical>
 8005998:	4b0e      	ldr	r3, [pc, #56]	@ (80059d4 <task_+0x278>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a11      	ldr	r2, [pc, #68]	@ (80059e4 <task_+0x288>)
 800599e:	213f      	movs	r1, #63	@ 0x3f
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 fd87 	bl	80074b4 <sniprintf>
 80059a6:	4603      	mov	r3, r0
 80059a8:	4a0c      	ldr	r2, [pc, #48]	@ (80059dc <task_+0x280>)
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b09      	ldr	r3, [pc, #36]	@ (80059d4 <task_+0x278>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fc07 	bl	80051c4 <logger_log_print_>
 80059b6:	f7fe ff49 	bl	800484c <vPortExitCritical>
                  ledColorToStr(hao->color), msg->data.id, msg->data.action);

      switch (msg->data.action) {
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	791b      	ldrb	r3, [r3, #4]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	f000 80bc 	beq.w	8005b3c <task_+0x3e0>
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f300 8183 	bgt.w	8005cd0 <task_+0x574>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <task_+0x2a0>
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d064      	beq.n	8005a9c <task_+0x340>
 80059d2:	e17d      	b.n	8005cd0 <task_+0x574>
 80059d4:	08008ab8 	.word	0x08008ab8
 80059d8:	08008618 	.word	0x08008618
 80059dc:	2000418c 	.word	0x2000418c
 80059e0:	08008624 	.word	0x08008624
 80059e4:	08008648 	.word	0x08008648
 80059e8:	0800864c 	.word	0x0800864c
 80059ec:	08008654 	.word	0x08008654
 80059f0:	0800866c 	.word	0x0800866c
 80059f4:	08008690 	.word	0x08008690
 80059f8:	0800869c 	.word	0x0800869c
        case AO_LED_MESSAGE_ON:
          HAL_GPIO_WritePin(led_port_[hao->color], led_pin_[hao->color], GPIO_PIN_SET);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	4ba8      	ldr	r3, [pc, #672]	@ (8005ca4 <task_+0x548>)
 8005a04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4ba6      	ldr	r3, [pc, #664]	@ (8005ca8 <task_+0x54c>)
 8005a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005a14:	2201      	movs	r2, #1
 8005a16:	4619      	mov	r1, r3
 8005a18:	f7fb fc30 	bl	800127c <HAL_GPIO_WritePin>
          LOGGER_INFO("LED %s ENCENDIDO", ledColorToStr(hao->color));
 8005a1c:	f7fe fee4 	bl	80047e8 <vPortEnterCritical>
 8005a20:	4ba2      	ldr	r3, [pc, #648]	@ (8005cac <task_+0x550>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4aa2      	ldr	r2, [pc, #648]	@ (8005cb0 <task_+0x554>)
 8005a26:	213f      	movs	r1, #63	@ 0x3f
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 fd43 	bl	80074b4 <sniprintf>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4aa0      	ldr	r2, [pc, #640]	@ (8005cb4 <task_+0x558>)
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	4b9d      	ldr	r3, [pc, #628]	@ (8005cac <task_+0x550>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fbc3 	bl	80051c4 <logger_log_print_>
 8005a3e:	f7fe ff05 	bl	800484c <vPortExitCritical>
 8005a42:	f7fe fed1 	bl	80047e8 <vPortEnterCritical>
 8005a46:	4b99      	ldr	r3, [pc, #612]	@ (8005cac <task_+0x550>)
 8005a48:	681c      	ldr	r4, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fe60 	bl	8005714 <ledColorToStr>
 8005a54:	4603      	mov	r3, r0
 8005a56:	4a98      	ldr	r2, [pc, #608]	@ (8005cb8 <task_+0x55c>)
 8005a58:	213f      	movs	r1, #63	@ 0x3f
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f001 fd2a 	bl	80074b4 <sniprintf>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4a94      	ldr	r2, [pc, #592]	@ (8005cb4 <task_+0x558>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b91      	ldr	r3, [pc, #580]	@ (8005cac <task_+0x550>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fbaa 	bl	80051c4 <logger_log_print_>
 8005a70:	f7fe feec 	bl	800484c <vPortExitCritical>
 8005a74:	f7fe feb8 	bl	80047e8 <vPortEnterCritical>
 8005a78:	4b8c      	ldr	r3, [pc, #560]	@ (8005cac <task_+0x550>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a8f      	ldr	r2, [pc, #572]	@ (8005cbc <task_+0x560>)
 8005a7e:	213f      	movs	r1, #63	@ 0x3f
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fd17 	bl	80074b4 <sniprintf>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4a8a      	ldr	r2, [pc, #552]	@ (8005cb4 <task_+0x558>)
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	4b87      	ldr	r3, [pc, #540]	@ (8005cac <task_+0x550>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fb97 	bl	80051c4 <logger_log_print_>
 8005a96:	f7fe fed9 	bl	800484c <vPortExitCritical>
          break;
 8005a9a:	e160      	b.n	8005d5e <task_+0x602>

        case AO_LED_MESSAGE_OFF:
          HAL_GPIO_WritePin(led_port_[hao->color], led_pin_[hao->color], GPIO_PIN_RESET);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4b80      	ldr	r3, [pc, #512]	@ (8005ca4 <task_+0x548>)
 8005aa4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	4b7e      	ldr	r3, [pc, #504]	@ (8005ca8 <task_+0x54c>)
 8005ab0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f7fb fbe0 	bl	800127c <HAL_GPIO_WritePin>
          LOGGER_INFO("LED %s APAGADO", ledColorToStr(hao->color));
 8005abc:	f7fe fe94 	bl	80047e8 <vPortEnterCritical>
 8005ac0:	4b7a      	ldr	r3, [pc, #488]	@ (8005cac <task_+0x550>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7a      	ldr	r2, [pc, #488]	@ (8005cb0 <task_+0x554>)
 8005ac6:	213f      	movs	r1, #63	@ 0x3f
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 fcf3 	bl	80074b4 <sniprintf>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4a78      	ldr	r2, [pc, #480]	@ (8005cb4 <task_+0x558>)
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	4b75      	ldr	r3, [pc, #468]	@ (8005cac <task_+0x550>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fb73 	bl	80051c4 <logger_log_print_>
 8005ade:	f7fe feb5 	bl	800484c <vPortExitCritical>
 8005ae2:	f7fe fe81 	bl	80047e8 <vPortEnterCritical>
 8005ae6:	4b71      	ldr	r3, [pc, #452]	@ (8005cac <task_+0x550>)
 8005ae8:	681c      	ldr	r4, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fe10 	bl	8005714 <ledColorToStr>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4a72      	ldr	r2, [pc, #456]	@ (8005cc0 <task_+0x564>)
 8005af8:	213f      	movs	r1, #63	@ 0x3f
 8005afa:	4620      	mov	r0, r4
 8005afc:	f001 fcda 	bl	80074b4 <sniprintf>
 8005b00:	4603      	mov	r3, r0
 8005b02:	4a6c      	ldr	r2, [pc, #432]	@ (8005cb4 <task_+0x558>)
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b69      	ldr	r3, [pc, #420]	@ (8005cac <task_+0x550>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fb5a 	bl	80051c4 <logger_log_print_>
 8005b10:	f7fe fe9c 	bl	800484c <vPortExitCritical>
 8005b14:	f7fe fe68 	bl	80047e8 <vPortEnterCritical>
 8005b18:	4b64      	ldr	r3, [pc, #400]	@ (8005cac <task_+0x550>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a67      	ldr	r2, [pc, #412]	@ (8005cbc <task_+0x560>)
 8005b1e:	213f      	movs	r1, #63	@ 0x3f
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fcc7 	bl	80074b4 <sniprintf>
 8005b26:	4603      	mov	r3, r0
 8005b28:	4a62      	ldr	r2, [pc, #392]	@ (8005cb4 <task_+0x558>)
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8005cac <task_+0x550>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fb47 	bl	80051c4 <logger_log_print_>
 8005b36:	f7fe fe89 	bl	800484c <vPortExitCritical>
          break;
 8005b3a:	e110      	b.n	8005d5e <task_+0x602>

        case AO_LED_MESSAGE_BLINK:
          if (msg->data.value <= 0) {
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dc46      	bgt.n	8005bd2 <task_+0x476>
            msg->status = AO_LED_STATUS_INVALID_PARAMS;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2201      	movs	r2, #1
 8005b48:	741a      	strb	r2, [r3, #16]
            LOGGER_WARNING("LED %s: Tiempo de parpadeo invalido (%d)", ledColorToStr(hao->color), msg->data.value);
 8005b4a:	f7fe fe4d 	bl	80047e8 <vPortEnterCritical>
 8005b4e:	4b57      	ldr	r3, [pc, #348]	@ (8005cac <task_+0x550>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a5c      	ldr	r2, [pc, #368]	@ (8005cc4 <task_+0x568>)
 8005b54:	213f      	movs	r1, #63	@ 0x3f
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fcac 	bl	80074b4 <sniprintf>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4a55      	ldr	r2, [pc, #340]	@ (8005cb4 <task_+0x558>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4b52      	ldr	r3, [pc, #328]	@ (8005cac <task_+0x550>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff fb2c 	bl	80051c4 <logger_log_print_>
 8005b6c:	f7fe fe6e 	bl	800484c <vPortExitCritical>
 8005b70:	f7fe fe3a 	bl	80047e8 <vPortEnterCritical>
 8005b74:	4b4d      	ldr	r3, [pc, #308]	@ (8005cac <task_+0x550>)
 8005b76:	681c      	ldr	r4, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff fdc9 	bl	8005714 <ledColorToStr>
 8005b82:	4602      	mov	r2, r0
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8005cc8 <task_+0x56c>)
 8005b8e:	213f      	movs	r1, #63	@ 0x3f
 8005b90:	4620      	mov	r0, r4
 8005b92:	f001 fc8f 	bl	80074b4 <sniprintf>
 8005b96:	4603      	mov	r3, r0
 8005b98:	4a46      	ldr	r2, [pc, #280]	@ (8005cb4 <task_+0x558>)
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	4b43      	ldr	r3, [pc, #268]	@ (8005cac <task_+0x550>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fb0f 	bl	80051c4 <logger_log_print_>
 8005ba6:	f7fe fe51 	bl	800484c <vPortExitCritical>
 8005baa:	f7fe fe1d 	bl	80047e8 <vPortEnterCritical>
 8005bae:	4b3f      	ldr	r3, [pc, #252]	@ (8005cac <task_+0x550>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a42      	ldr	r2, [pc, #264]	@ (8005cbc <task_+0x560>)
 8005bb4:	213f      	movs	r1, #63	@ 0x3f
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fc7c 	bl	80074b4 <sniprintf>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8005cb4 <task_+0x558>)
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8005cac <task_+0x550>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fafc 	bl	80051c4 <logger_log_print_>
 8005bcc:	f7fe fe3e 	bl	800484c <vPortExitCritical>
            break;
 8005bd0:	e0c5      	b.n	8005d5e <task_+0x602>
          }

          LOGGER_INFO("LED %s: Iniciando parpadeo por %dms", ledColorToStr(hao->color), msg->data.value);
 8005bd2:	f7fe fe09 	bl	80047e8 <vPortEnterCritical>
 8005bd6:	4b35      	ldr	r3, [pc, #212]	@ (8005cac <task_+0x550>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a35      	ldr	r2, [pc, #212]	@ (8005cb0 <task_+0x554>)
 8005bdc:	213f      	movs	r1, #63	@ 0x3f
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fc68 	bl	80074b4 <sniprintf>
 8005be4:	4603      	mov	r3, r0
 8005be6:	4a33      	ldr	r2, [pc, #204]	@ (8005cb4 <task_+0x558>)
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	4b30      	ldr	r3, [pc, #192]	@ (8005cac <task_+0x550>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fae8 	bl	80051c4 <logger_log_print_>
 8005bf4:	f7fe fe2a 	bl	800484c <vPortExitCritical>
 8005bf8:	f7fe fdf6 	bl	80047e8 <vPortEnterCritical>
 8005bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8005cac <task_+0x550>)
 8005bfe:	681c      	ldr	r4, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff fd85 	bl	8005714 <ledColorToStr>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	4613      	mov	r3, r2
 8005c14:	4a2d      	ldr	r2, [pc, #180]	@ (8005ccc <task_+0x570>)
 8005c16:	213f      	movs	r1, #63	@ 0x3f
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f001 fc4b 	bl	80074b4 <sniprintf>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4a24      	ldr	r2, [pc, #144]	@ (8005cb4 <task_+0x558>)
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	4b21      	ldr	r3, [pc, #132]	@ (8005cac <task_+0x550>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff facb 	bl	80051c4 <logger_log_print_>
 8005c2e:	f7fe fe0d 	bl	800484c <vPortExitCritical>
 8005c32:	f7fe fdd9 	bl	80047e8 <vPortEnterCritical>
 8005c36:	4b1d      	ldr	r3, [pc, #116]	@ (8005cac <task_+0x550>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a20      	ldr	r2, [pc, #128]	@ (8005cbc <task_+0x560>)
 8005c3c:	213f      	movs	r1, #63	@ 0x3f
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 fc38 	bl	80074b4 <sniprintf>
 8005c44:	4603      	mov	r3, r0
 8005c46:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb4 <task_+0x558>)
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4b18      	ldr	r3, [pc, #96]	@ (8005cac <task_+0x550>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fab8 	bl	80051c4 <logger_log_print_>
 8005c54:	f7fe fdfa 	bl	800484c <vPortExitCritical>
          HAL_GPIO_WritePin(led_port_[hao->color], led_pin_[hao->color], GPIO_PIN_SET);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ca4 <task_+0x548>)
 8005c60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca8 <task_+0x54c>)
 8005c6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c70:	2201      	movs	r2, #1
 8005c72:	4619      	mov	r1, r3
 8005c74:	f7fb fb02 	bl	800127c <HAL_GPIO_WritePin>
          vTaskDelay((TickType_t)((msg->data.value) / portTICK_PERIOD_MS));
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fd ff17 	bl	8003ab0 <vTaskDelay>
          HAL_GPIO_WritePin(led_port_[hao->color], led_pin_[hao->color], GPIO_PIN_RESET);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <task_+0x548>)
 8005c8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	4b04      	ldr	r3, [pc, #16]	@ (8005ca8 <task_+0x54c>)
 8005c96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f7fb faed 	bl	800127c <HAL_GPIO_WritePin>
          break;
 8005ca2:	e05c      	b.n	8005d5e <task_+0x602>
 8005ca4:	20000010 	.word	0x20000010
 8005ca8:	2000001c 	.word	0x2000001c
 8005cac:	08008ab8 	.word	0x08008ab8
 8005cb0:	0800864c 	.word	0x0800864c
 8005cb4:	2000418c 	.word	0x2000418c
 8005cb8:	080086c8 	.word	0x080086c8
 8005cbc:	08008648 	.word	0x08008648
 8005cc0:	080086dc 	.word	0x080086dc
 8005cc4:	080086ec 	.word	0x080086ec
 8005cc8:	080086f8 	.word	0x080086f8
 8005ccc:	08008724 	.word	0x08008724

        default:
          msg->status = AO_LED_STATUS_INVALID_ACTION;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	741a      	strb	r2, [r3, #16]
          LOGGER_ERROR("LED %s: Accion desconocida recibida (%d)", ledColorToStr(hao->color), msg->data.action);
 8005cd6:	f7fe fd87 	bl	80047e8 <vPortEnterCritical>
 8005cda:	4b4e      	ldr	r3, [pc, #312]	@ (8005e14 <task_+0x6b8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a4e      	ldr	r2, [pc, #312]	@ (8005e18 <task_+0x6bc>)
 8005ce0:	213f      	movs	r1, #63	@ 0x3f
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 fbe6 	bl	80074b4 <sniprintf>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	4a4c      	ldr	r2, [pc, #304]	@ (8005e1c <task_+0x6c0>)
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b49      	ldr	r3, [pc, #292]	@ (8005e14 <task_+0x6b8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fa66 	bl	80051c4 <logger_log_print_>
 8005cf8:	f7fe fda8 	bl	800484c <vPortExitCritical>
 8005cfc:	f7fe fd74 	bl	80047e8 <vPortEnterCritical>
 8005d00:	4b44      	ldr	r3, [pc, #272]	@ (8005e14 <task_+0x6b8>)
 8005d02:	681c      	ldr	r4, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fd03 	bl	8005714 <ledColorToStr>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	791b      	ldrb	r3, [r3, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	4a41      	ldr	r2, [pc, #260]	@ (8005e20 <task_+0x6c4>)
 8005d1a:	213f      	movs	r1, #63	@ 0x3f
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f001 fbc9 	bl	80074b4 <sniprintf>
 8005d22:	4603      	mov	r3, r0
 8005d24:	4a3d      	ldr	r2, [pc, #244]	@ (8005e1c <task_+0x6c0>)
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	4b3a      	ldr	r3, [pc, #232]	@ (8005e14 <task_+0x6b8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fa49 	bl	80051c4 <logger_log_print_>
 8005d32:	f7fe fd8b 	bl	800484c <vPortExitCritical>
 8005d36:	f7fe fd57 	bl	80047e8 <vPortEnterCritical>
 8005d3a:	4b36      	ldr	r3, [pc, #216]	@ (8005e14 <task_+0x6b8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a39      	ldr	r2, [pc, #228]	@ (8005e24 <task_+0x6c8>)
 8005d40:	213f      	movs	r1, #63	@ 0x3f
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fbb6 	bl	80074b4 <sniprintf>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4a34      	ldr	r2, [pc, #208]	@ (8005e1c <task_+0x6c0>)
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4b31      	ldr	r3, [pc, #196]	@ (8005e14 <task_+0x6b8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fa36 	bl	80051c4 <logger_log_print_>
 8005d58:	f7fe fd78 	bl	800484c <vPortExitCritical>
          break;
 8005d5c:	bf00      	nop
      }
      
      // Notificamos el resultado
      msg->callback(msg->data.id, msg->status);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	6810      	ldr	r0, [r2, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	7c12      	ldrb	r2, [r2, #16]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4798      	blx	r3
 8005d6e:	e577      	b.n	8005860 <task_+0x104>
    }
    else {
      // No hay mensajes después del timeout, auto-destruir
      LOGGER_INFO("LED %s: Sin mensajes por %dms, auto-destruyendo", 
 8005d70:	f7fe fd3a 	bl	80047e8 <vPortEnterCritical>
 8005d74:	4b27      	ldr	r3, [pc, #156]	@ (8005e14 <task_+0x6b8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2b      	ldr	r2, [pc, #172]	@ (8005e28 <task_+0x6cc>)
 8005d7a:	213f      	movs	r1, #63	@ 0x3f
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fb99 	bl	80074b4 <sniprintf>
 8005d82:	4603      	mov	r3, r0
 8005d84:	4a25      	ldr	r2, [pc, #148]	@ (8005e1c <task_+0x6c0>)
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	4b22      	ldr	r3, [pc, #136]	@ (8005e14 <task_+0x6b8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fa19 	bl	80051c4 <logger_log_print_>
 8005d92:	f7fe fd5b 	bl	800484c <vPortExitCritical>
 8005d96:	f7fe fd27 	bl	80047e8 <vPortEnterCritical>
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005e14 <task_+0x6b8>)
 8005d9c:	681c      	ldr	r4, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fcb6 	bl	8005714 <ledColorToStr>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005dae:	9200      	str	r2, [sp, #0]
 8005db0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e2c <task_+0x6d0>)
 8005db2:	213f      	movs	r1, #63	@ 0x3f
 8005db4:	4620      	mov	r0, r4
 8005db6:	f001 fb7d 	bl	80074b4 <sniprintf>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <task_+0x6c0>)
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	4b14      	ldr	r3, [pc, #80]	@ (8005e14 <task_+0x6b8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff f9fd 	bl	80051c4 <logger_log_print_>
 8005dca:	f7fe fd3f 	bl	800484c <vPortExitCritical>
 8005dce:	f7fe fd0b 	bl	80047e8 <vPortEnterCritical>
 8005dd2:	4b10      	ldr	r3, [pc, #64]	@ (8005e14 <task_+0x6b8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a13      	ldr	r2, [pc, #76]	@ (8005e24 <task_+0x6c8>)
 8005dd8:	213f      	movs	r1, #63	@ 0x3f
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 fb6a 	bl	80074b4 <sniprintf>
 8005de0:	4603      	mov	r3, r0
 8005de2:	4a0e      	ldr	r2, [pc, #56]	@ (8005e1c <task_+0x6c0>)
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <task_+0x6b8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff f9ea 	bl	80051c4 <logger_log_print_>
 8005df0:	f7fe fd2c 	bl	800484c <vPortExitCritical>
                 ledColorToStr(hao->color), TASK_INACTIVITY_TIMEOUT_MS_);
      hao->is_active = false;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	721a      	strb	r2, [r3, #8]
      hao->task_handle = NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	60da      	str	r2, [r3, #12]
      vTaskDelete(NULL);
 8005e00:	2000      	movs	r0, #0
 8005e02:	f7fd fdc5 	bl	8003990 <vTaskDelete>
 8005e06:	e001      	b.n	8005e0c <task_+0x6b0>
        continue;
 8005e08:	bf00      	nop
  {
 8005e0a:	e529      	b.n	8005860 <task_+0x104>
      break;
    }
  }
}
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd90      	pop	{r4, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	08008ab8 	.word	0x08008ab8
 8005e18:	08008618 	.word	0x08008618
 8005e1c:	2000418c 	.word	0x2000418c
 8005e20:	08008748 	.word	0x08008748
 8005e24:	08008648 	.word	0x08008648
 8005e28:	0800864c 	.word	0x0800864c
 8005e2c:	08008774 	.word	0x08008774

08005e30 <ao_led_send>:

/********************** external functions definition ************************/

bool ao_led_send(ao_led_handle_t* hao, ao_led_message_t* msg)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  if (NULL == hao || NULL == msg || NULL == msg->callback) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d006      	beq.n	8005e4e <ao_led_send+0x1e>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <ao_led_send+0x1e>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d13a      	bne.n	8005ec4 <ao_led_send+0x94>
    LOGGER_ERROR("ao_led_send: Parametros invalidos");
 8005e4e:	f7fe fccb 	bl	80047e8 <vPortEnterCritical>
 8005e52:	4b68      	ldr	r3, [pc, #416]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a68      	ldr	r2, [pc, #416]	@ (8005ff8 <ao_led_send+0x1c8>)
 8005e58:	213f      	movs	r1, #63	@ 0x3f
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f001 fb2a 	bl	80074b4 <sniprintf>
 8005e60:	4603      	mov	r3, r0
 8005e62:	4a66      	ldr	r2, [pc, #408]	@ (8005ffc <ao_led_send+0x1cc>)
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	4b63      	ldr	r3, [pc, #396]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff f9aa 	bl	80051c4 <logger_log_print_>
 8005e70:	f7fe fcec 	bl	800484c <vPortExitCritical>
 8005e74:	f7fe fcb8 	bl	80047e8 <vPortEnterCritical>
 8005e78:	4b5e      	ldr	r3, [pc, #376]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a60      	ldr	r2, [pc, #384]	@ (8006000 <ao_led_send+0x1d0>)
 8005e7e:	213f      	movs	r1, #63	@ 0x3f
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 fb17 	bl	80074b4 <sniprintf>
 8005e86:	4603      	mov	r3, r0
 8005e88:	4a5c      	ldr	r2, [pc, #368]	@ (8005ffc <ao_led_send+0x1cc>)
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b59      	ldr	r3, [pc, #356]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff f997 	bl	80051c4 <logger_log_print_>
 8005e96:	f7fe fcd9 	bl	800484c <vPortExitCritical>
 8005e9a:	f7fe fca5 	bl	80047e8 <vPortEnterCritical>
 8005e9e:	4b55      	ldr	r3, [pc, #340]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a58      	ldr	r2, [pc, #352]	@ (8006004 <ao_led_send+0x1d4>)
 8005ea4:	213f      	movs	r1, #63	@ 0x3f
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 fb04 	bl	80074b4 <sniprintf>
 8005eac:	4603      	mov	r3, r0
 8005eae:	4a53      	ldr	r2, [pc, #332]	@ (8005ffc <ao_led_send+0x1cc>)
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b50      	ldr	r3, [pc, #320]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff f984 	bl	80051c4 <logger_log_print_>
 8005ebc:	f7fe fcc6 	bl	800484c <vPortExitCritical>
    return false;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e093      	b.n	8005fec <ao_led_send+0x1bc>
  }

  if (msg->data.action >= AO_LED_MESSAGE__N) {
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	791b      	ldrb	r3, [r3, #4]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d93b      	bls.n	8005f44 <ao_led_send+0x114>
    LOGGER_ERROR("ao_led_send: Accion invalida (%d)", msg->data.action);
 8005ecc:	f7fe fc8c 	bl	80047e8 <vPortEnterCritical>
 8005ed0:	4b48      	ldr	r3, [pc, #288]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a48      	ldr	r2, [pc, #288]	@ (8005ff8 <ao_led_send+0x1c8>)
 8005ed6:	213f      	movs	r1, #63	@ 0x3f
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 faeb 	bl	80074b4 <sniprintf>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4a46      	ldr	r2, [pc, #280]	@ (8005ffc <ao_led_send+0x1cc>)
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	4b43      	ldr	r3, [pc, #268]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f96b 	bl	80051c4 <logger_log_print_>
 8005eee:	f7fe fcad 	bl	800484c <vPortExitCritical>
 8005ef2:	f7fe fc79 	bl	80047e8 <vPortEnterCritical>
 8005ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	791b      	ldrb	r3, [r3, #4]
 8005efe:	4a42      	ldr	r2, [pc, #264]	@ (8006008 <ao_led_send+0x1d8>)
 8005f00:	213f      	movs	r1, #63	@ 0x3f
 8005f02:	f001 fad7 	bl	80074b4 <sniprintf>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4a3c      	ldr	r2, [pc, #240]	@ (8005ffc <ao_led_send+0x1cc>)
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	4b39      	ldr	r3, [pc, #228]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff f957 	bl	80051c4 <logger_log_print_>
 8005f16:	f7fe fc99 	bl	800484c <vPortExitCritical>
 8005f1a:	f7fe fc65 	bl	80047e8 <vPortEnterCritical>
 8005f1e:	4b35      	ldr	r3, [pc, #212]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a38      	ldr	r2, [pc, #224]	@ (8006004 <ao_led_send+0x1d4>)
 8005f24:	213f      	movs	r1, #63	@ 0x3f
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 fac4 	bl	80074b4 <sniprintf>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4a33      	ldr	r2, [pc, #204]	@ (8005ffc <ao_led_send+0x1cc>)
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	4b30      	ldr	r3, [pc, #192]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff f944 	bl	80051c4 <logger_log_print_>
 8005f3c:	f7fe fc86 	bl	800484c <vPortExitCritical>
    return false;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e053      	b.n	8005fec <ao_led_send+0x1bc>
  }

  if (msg->data.action == AO_LED_MESSAGE_BLINK && msg->data.value <= 0) {
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	791b      	ldrb	r3, [r3, #4]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d13f      	bne.n	8005fcc <ao_led_send+0x19c>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dc3b      	bgt.n	8005fcc <ao_led_send+0x19c>
    LOGGER_ERROR("ao_led_send: Tiempo de parpadeo invalido (%d)", msg->data.value);
 8005f54:	f7fe fc48 	bl	80047e8 <vPortEnterCritical>
 8005f58:	4b26      	ldr	r3, [pc, #152]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <ao_led_send+0x1c8>)
 8005f5e:	213f      	movs	r1, #63	@ 0x3f
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 faa7 	bl	80074b4 <sniprintf>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4a24      	ldr	r2, [pc, #144]	@ (8005ffc <ao_led_send+0x1cc>)
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b21      	ldr	r3, [pc, #132]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff f927 	bl	80051c4 <logger_log_print_>
 8005f76:	f7fe fc69 	bl	800484c <vPortExitCritical>
 8005f7a:	f7fe fc35 	bl	80047e8 <vPortEnterCritical>
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	4a21      	ldr	r2, [pc, #132]	@ (800600c <ao_led_send+0x1dc>)
 8005f88:	213f      	movs	r1, #63	@ 0x3f
 8005f8a:	f001 fa93 	bl	80074b4 <sniprintf>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4a1a      	ldr	r2, [pc, #104]	@ (8005ffc <ao_led_send+0x1cc>)
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	4b17      	ldr	r3, [pc, #92]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff f913 	bl	80051c4 <logger_log_print_>
 8005f9e:	f7fe fc55 	bl	800484c <vPortExitCritical>
 8005fa2:	f7fe fc21 	bl	80047e8 <vPortEnterCritical>
 8005fa6:	4b13      	ldr	r3, [pc, #76]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a16      	ldr	r2, [pc, #88]	@ (8006004 <ao_led_send+0x1d4>)
 8005fac:	213f      	movs	r1, #63	@ 0x3f
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fa80 	bl	80074b4 <sniprintf>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4a11      	ldr	r2, [pc, #68]	@ (8005ffc <ao_led_send+0x1cc>)
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff4 <ao_led_send+0x1c4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff f900 	bl	80051c4 <logger_log_print_>
 8005fc4:	f7fe fc42 	bl	800484c <vPortExitCritical>
    return false;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e00f      	b.n	8005fec <ao_led_send+0x1bc>
  }

  // Inicializamos el status
  msg->status = AO_LED_STATUS_OK;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	741a      	strb	r2, [r3, #16]

  return (pdPASS == xQueueSend(hao->hqueue, (void*)msg, 0));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6858      	ldr	r0, [r3, #4]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2200      	movs	r2, #0
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	f7fd f83a 	bl	8003054 <xQueueGenericSend>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	08008ab8 	.word	0x08008ab8
 8005ff8:	08008618 	.word	0x08008618
 8005ffc:	2000418c 	.word	0x2000418c
 8006000:	080087a4 	.word	0x080087a4
 8006004:	08008648 	.word	0x08008648
 8006008:	080087c8 	.word	0x080087c8
 800600c:	080087ec 	.word	0x080087ec

08006010 <ao_led_init>:

void ao_led_init(ao_led_handle_t* hao, ao_led_color color)
{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  hao->color = color;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	701a      	strb	r2, [r3, #0]
  hao->is_active = false;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	721a      	strb	r2, [r3, #8]
  hao->task_handle = NULL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	60da      	str	r2, [r3, #12]

  hao->hqueue = xQueueCreate(QUEUE_LENGTH_, QUEUE_ITEM_SIZE_);
 800602e:	2200      	movs	r2, #0
 8006030:	2114      	movs	r1, #20
 8006032:	200a      	movs	r0, #10
 8006034:	f7fc ffb0 	bl	8002f98 <xQueueGenericCreate>
 8006038:	4602      	mov	r2, r0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	605a      	str	r2, [r3, #4]
  while(NULL == hao->hqueue)
 800603e:	e03e      	b.n	80060be <ao_led_init+0xae>
  {
    // Error: No se pudo crear la cola del LED
    LOGGER_ERROR("LED %s: Error creando cola", ledColorToStr(hao->color));
 8006040:	f7fe fbd2 	bl	80047e8 <vPortEnterCritical>
 8006044:	4b22      	ldr	r3, [pc, #136]	@ (80060d0 <ao_led_init+0xc0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a22      	ldr	r2, [pc, #136]	@ (80060d4 <ao_led_init+0xc4>)
 800604a:	213f      	movs	r1, #63	@ 0x3f
 800604c:	4618      	mov	r0, r3
 800604e:	f001 fa31 	bl	80074b4 <sniprintf>
 8006052:	4603      	mov	r3, r0
 8006054:	4a20      	ldr	r2, [pc, #128]	@ (80060d8 <ao_led_init+0xc8>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	4b1d      	ldr	r3, [pc, #116]	@ (80060d0 <ao_led_init+0xc0>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff f8b1 	bl	80051c4 <logger_log_print_>
 8006062:	f7fe fbf3 	bl	800484c <vPortExitCritical>
 8006066:	f7fe fbbf 	bl	80047e8 <vPortEnterCritical>
 800606a:	4b19      	ldr	r3, [pc, #100]	@ (80060d0 <ao_led_init+0xc0>)
 800606c:	681c      	ldr	r4, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff fb4e 	bl	8005714 <ledColorToStr>
 8006078:	4603      	mov	r3, r0
 800607a:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <ao_led_init+0xcc>)
 800607c:	213f      	movs	r1, #63	@ 0x3f
 800607e:	4620      	mov	r0, r4
 8006080:	f001 fa18 	bl	80074b4 <sniprintf>
 8006084:	4603      	mov	r3, r0
 8006086:	4a14      	ldr	r2, [pc, #80]	@ (80060d8 <ao_led_init+0xc8>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	4b11      	ldr	r3, [pc, #68]	@ (80060d0 <ao_led_init+0xc0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff f898 	bl	80051c4 <logger_log_print_>
 8006094:	f7fe fbda 	bl	800484c <vPortExitCritical>
 8006098:	f7fe fba6 	bl	80047e8 <vPortEnterCritical>
 800609c:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <ao_led_init+0xc0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0f      	ldr	r2, [pc, #60]	@ (80060e0 <ao_led_init+0xd0>)
 80060a2:	213f      	movs	r1, #63	@ 0x3f
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 fa05 	bl	80074b4 <sniprintf>
 80060aa:	4603      	mov	r3, r0
 80060ac:	4a0a      	ldr	r2, [pc, #40]	@ (80060d8 <ao_led_init+0xc8>)
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <ao_led_init+0xc0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff f885 	bl	80051c4 <logger_log_print_>
 80060ba:	f7fe fbc7 	bl	800484c <vPortExitCritical>
  while(NULL == hao->hqueue)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0bc      	beq.n	8006040 <ao_led_init+0x30>
  }
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd90      	pop	{r4, r7, pc}
 80060d0:	08008ab8 	.word	0x08008ab8
 80060d4:	08008618 	.word	0x08008618
 80060d8:	2000418c 	.word	0x2000418c
 80060dc:	0800881c 	.word	0x0800881c
 80060e0:	08008648 	.word	0x08008648

080060e4 <ao_led_start_task>:

BaseType_t ao_led_start_task(ao_led_handle_t* hao)
{
 80060e4:	b590      	push	{r4, r7, lr}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	6078      	str	r0, [r7, #4]
  if(hao->is_active) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	7a1b      	ldrb	r3, [r3, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <ao_led_start_task+0x14>
    return pdPASS; // Ya está activa
 80060f4:	2301      	movs	r3, #1
 80060f6:	e051      	b.n	800619c <ao_led_start_task+0xb8>
  }

  BaseType_t status = xTaskCreate(task_, "task_ao_led", 128, 
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	330c      	adds	r3, #12
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	2300      	movs	r3, #0
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2280      	movs	r2, #128	@ 0x80
 8006106:	4927      	ldr	r1, [pc, #156]	@ (80061a4 <ao_led_start_task+0xc0>)
 8006108:	4827      	ldr	r0, [pc, #156]	@ (80061a8 <ao_led_start_task+0xc4>)
 800610a:	f7fd faf7 	bl	80036fc <xTaskCreate>
 800610e:	60f8      	str	r0, [r7, #12]
                                (void*)hao, tskIDLE_PRIORITY, &hao->task_handle);
  if(pdPASS == status) {
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d141      	bne.n	800619a <ao_led_start_task+0xb6>
    hao->is_active = true;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	721a      	strb	r2, [r3, #8]
    LOGGER_INFO("LED %s: Tarea creada", ledColorToStr(hao->color));
 800611c:	f7fe fb64 	bl	80047e8 <vPortEnterCritical>
 8006120:	4b22      	ldr	r3, [pc, #136]	@ (80061ac <ao_led_start_task+0xc8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a22      	ldr	r2, [pc, #136]	@ (80061b0 <ao_led_start_task+0xcc>)
 8006126:	213f      	movs	r1, #63	@ 0x3f
 8006128:	4618      	mov	r0, r3
 800612a:	f001 f9c3 	bl	80074b4 <sniprintf>
 800612e:	4603      	mov	r3, r0
 8006130:	4a20      	ldr	r2, [pc, #128]	@ (80061b4 <ao_led_start_task+0xd0>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b1d      	ldr	r3, [pc, #116]	@ (80061ac <ao_led_start_task+0xc8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff f843 	bl	80051c4 <logger_log_print_>
 800613e:	f7fe fb85 	bl	800484c <vPortExitCritical>
 8006142:	f7fe fb51 	bl	80047e8 <vPortEnterCritical>
 8006146:	4b19      	ldr	r3, [pc, #100]	@ (80061ac <ao_led_start_task+0xc8>)
 8006148:	681c      	ldr	r4, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fae0 	bl	8005714 <ledColorToStr>
 8006154:	4603      	mov	r3, r0
 8006156:	4a18      	ldr	r2, [pc, #96]	@ (80061b8 <ao_led_start_task+0xd4>)
 8006158:	213f      	movs	r1, #63	@ 0x3f
 800615a:	4620      	mov	r0, r4
 800615c:	f001 f9aa 	bl	80074b4 <sniprintf>
 8006160:	4603      	mov	r3, r0
 8006162:	4a14      	ldr	r2, [pc, #80]	@ (80061b4 <ao_led_start_task+0xd0>)
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4b11      	ldr	r3, [pc, #68]	@ (80061ac <ao_led_start_task+0xc8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff f82a 	bl	80051c4 <logger_log_print_>
 8006170:	f7fe fb6c 	bl	800484c <vPortExitCritical>
 8006174:	f7fe fb38 	bl	80047e8 <vPortEnterCritical>
 8006178:	4b0c      	ldr	r3, [pc, #48]	@ (80061ac <ao_led_start_task+0xc8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a0f      	ldr	r2, [pc, #60]	@ (80061bc <ao_led_start_task+0xd8>)
 800617e:	213f      	movs	r1, #63	@ 0x3f
 8006180:	4618      	mov	r0, r3
 8006182:	f001 f997 	bl	80074b4 <sniprintf>
 8006186:	4603      	mov	r3, r0
 8006188:	4a0a      	ldr	r2, [pc, #40]	@ (80061b4 <ao_led_start_task+0xd0>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <ao_led_start_task+0xc8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff f817 	bl	80051c4 <logger_log_print_>
 8006196:	f7fe fb59 	bl	800484c <vPortExitCritical>
  }
  return status;
 800619a:	68fb      	ldr	r3, [r7, #12]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd90      	pop	{r4, r7, pc}
 80061a4:	08008838 	.word	0x08008838
 80061a8:	0800575d 	.word	0x0800575d
 80061ac:	08008ab8 	.word	0x08008ab8
 80061b0:	0800864c 	.word	0x0800864c
 80061b4:	2000418c 	.word	0x2000418c
 80061b8:	08008844 	.word	0x08008844
 80061bc:	08008648 	.word	0x08008648

080061c0 <create_led_message>:
static ao_ui_handle_t hao_;

/********************** internal functions definition ************************/

static ao_led_message_t* create_led_message(int id, ao_led_action_t action, int value)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	460b      	mov	r3, r1
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	72fb      	strb	r3, [r7, #11]
    // Obtener un bloque de memoria de la pool
    ao_led_message_t* msg = (ao_led_message_t*)memory_pool_block_get(&hao_.msg_pool);
 80061ce:	4879      	ldr	r0, [pc, #484]	@ (80063b4 <create_led_message+0x1f4>)
 80061d0:	f7ff f836 	bl	8005240 <memory_pool_block_get>
 80061d4:	61f8      	str	r0, [r7, #28]
    if (msg == NULL) {
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d13a      	bne.n	8006252 <create_led_message+0x92>
        LOGGER_ERROR("UI: No hay memoria disponible para mensaje LED");
 80061dc:	f7fe fb04 	bl	80047e8 <vPortEnterCritical>
 80061e0:	4b75      	ldr	r3, [pc, #468]	@ (80063b8 <create_led_message+0x1f8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a75      	ldr	r2, [pc, #468]	@ (80063bc <create_led_message+0x1fc>)
 80061e6:	213f      	movs	r1, #63	@ 0x3f
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 f963 	bl	80074b4 <sniprintf>
 80061ee:	4603      	mov	r3, r0
 80061f0:	4a73      	ldr	r2, [pc, #460]	@ (80063c0 <create_led_message+0x200>)
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	4b70      	ldr	r3, [pc, #448]	@ (80063b8 <create_led_message+0x1f8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe ffe3 	bl	80051c4 <logger_log_print_>
 80061fe:	f7fe fb25 	bl	800484c <vPortExitCritical>
 8006202:	f7fe faf1 	bl	80047e8 <vPortEnterCritical>
 8006206:	4b6c      	ldr	r3, [pc, #432]	@ (80063b8 <create_led_message+0x1f8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a6e      	ldr	r2, [pc, #440]	@ (80063c4 <create_led_message+0x204>)
 800620c:	213f      	movs	r1, #63	@ 0x3f
 800620e:	4618      	mov	r0, r3
 8006210:	f001 f950 	bl	80074b4 <sniprintf>
 8006214:	4603      	mov	r3, r0
 8006216:	4a6a      	ldr	r2, [pc, #424]	@ (80063c0 <create_led_message+0x200>)
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b67      	ldr	r3, [pc, #412]	@ (80063b8 <create_led_message+0x1f8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe ffd0 	bl	80051c4 <logger_log_print_>
 8006224:	f7fe fb12 	bl	800484c <vPortExitCritical>
 8006228:	f7fe fade 	bl	80047e8 <vPortEnterCritical>
 800622c:	4b62      	ldr	r3, [pc, #392]	@ (80063b8 <create_led_message+0x1f8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a65      	ldr	r2, [pc, #404]	@ (80063c8 <create_led_message+0x208>)
 8006232:	213f      	movs	r1, #63	@ 0x3f
 8006234:	4618      	mov	r0, r3
 8006236:	f001 f93d 	bl	80074b4 <sniprintf>
 800623a:	4603      	mov	r3, r0
 800623c:	4a60      	ldr	r2, [pc, #384]	@ (80063c0 <create_led_message+0x200>)
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	4b5d      	ldr	r3, [pc, #372]	@ (80063b8 <create_led_message+0x1f8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe ffbd 	bl	80051c4 <logger_log_print_>
 800624a:	f7fe faff 	bl	800484c <vPortExitCritical>
        return NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	e0ac      	b.n	80063ac <create_led_message+0x1ec>
    }

    // Inicializar el mensaje
    msg->data.id = id;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]
    msg->data.action = action;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	7afa      	ldrb	r2, [r7, #11]
 800625c:	711a      	strb	r2, [r3, #4]
    msg->data.value = value;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	609a      	str	r2, [r3, #8]
    msg->callback = led_callback;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4a59      	ldr	r2, [pc, #356]	@ (80063cc <create_led_message+0x20c>)
 8006268:	60da      	str	r2, [r3, #12]
    msg->status = AO_LED_STATUS_OK;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2200      	movs	r2, #0
 800626e:	741a      	strb	r2, [r3, #16]

    // Crear entry dinámico y agregarlo a la lista
    active_message_entry_t* entry = (active_message_entry_t*)pvPortMalloc(sizeof(active_message_entry_t));
 8006270:	2008      	movs	r0, #8
 8006272:	f7fe fb99 	bl	80049a8 <pvPortMalloc>
 8006276:	61b8      	str	r0, [r7, #24]
    if (entry == NULL) {
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d13e      	bne.n	80062fc <create_led_message+0x13c>
        LOGGER_ERROR("UI: No hay memoria para entry de mensaje activo");
 800627e:	f7fe fab3 	bl	80047e8 <vPortEnterCritical>
 8006282:	4b4d      	ldr	r3, [pc, #308]	@ (80063b8 <create_led_message+0x1f8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a4d      	ldr	r2, [pc, #308]	@ (80063bc <create_led_message+0x1fc>)
 8006288:	213f      	movs	r1, #63	@ 0x3f
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f912 	bl	80074b4 <sniprintf>
 8006290:	4603      	mov	r3, r0
 8006292:	4a4b      	ldr	r2, [pc, #300]	@ (80063c0 <create_led_message+0x200>)
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	4b48      	ldr	r3, [pc, #288]	@ (80063b8 <create_led_message+0x1f8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe ff92 	bl	80051c4 <logger_log_print_>
 80062a0:	f7fe fad4 	bl	800484c <vPortExitCritical>
 80062a4:	f7fe faa0 	bl	80047e8 <vPortEnterCritical>
 80062a8:	4b43      	ldr	r3, [pc, #268]	@ (80063b8 <create_led_message+0x1f8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a48      	ldr	r2, [pc, #288]	@ (80063d0 <create_led_message+0x210>)
 80062ae:	213f      	movs	r1, #63	@ 0x3f
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f8ff 	bl	80074b4 <sniprintf>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4a41      	ldr	r2, [pc, #260]	@ (80063c0 <create_led_message+0x200>)
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4b3e      	ldr	r3, [pc, #248]	@ (80063b8 <create_led_message+0x1f8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe ff7f 	bl	80051c4 <logger_log_print_>
 80062c6:	f7fe fac1 	bl	800484c <vPortExitCritical>
 80062ca:	f7fe fa8d 	bl	80047e8 <vPortEnterCritical>
 80062ce:	4b3a      	ldr	r3, [pc, #232]	@ (80063b8 <create_led_message+0x1f8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a3d      	ldr	r2, [pc, #244]	@ (80063c8 <create_led_message+0x208>)
 80062d4:	213f      	movs	r1, #63	@ 0x3f
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 f8ec 	bl	80074b4 <sniprintf>
 80062dc:	4603      	mov	r3, r0
 80062de:	4a38      	ldr	r2, [pc, #224]	@ (80063c0 <create_led_message+0x200>)
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	4b35      	ldr	r3, [pc, #212]	@ (80063b8 <create_led_message+0x1f8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe ff6c 	bl	80051c4 <logger_log_print_>
 80062ec:	f7fe faae 	bl	800484c <vPortExitCritical>
        memory_pool_block_put(&hao_.msg_pool, msg);
 80062f0:	69f9      	ldr	r1, [r7, #28]
 80062f2:	4830      	ldr	r0, [pc, #192]	@ (80063b4 <create_led_message+0x1f4>)
 80062f4:	f7fe ffb7 	bl	8005266 <memory_pool_block_put>
        return NULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e057      	b.n	80063ac <create_led_message+0x1ec>
    }
    entry->id = id;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	601a      	str	r2, [r3, #0]
    entry->msg = msg;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	605a      	str	r2, [r3, #4]
    linked_list_node_t* node = (linked_list_node_t*)pvPortMalloc(sizeof(linked_list_node_t));
 8006308:	2008      	movs	r0, #8
 800630a:	f7fe fb4d 	bl	80049a8 <pvPortMalloc>
 800630e:	6178      	str	r0, [r7, #20]
    if (node == NULL) {
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d141      	bne.n	800639a <create_led_message+0x1da>
        LOGGER_ERROR("UI: No hay memoria para nodo de lista de mensajes activos");
 8006316:	f7fe fa67 	bl	80047e8 <vPortEnterCritical>
 800631a:	4b27      	ldr	r3, [pc, #156]	@ (80063b8 <create_led_message+0x1f8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a27      	ldr	r2, [pc, #156]	@ (80063bc <create_led_message+0x1fc>)
 8006320:	213f      	movs	r1, #63	@ 0x3f
 8006322:	4618      	mov	r0, r3
 8006324:	f001 f8c6 	bl	80074b4 <sniprintf>
 8006328:	4603      	mov	r3, r0
 800632a:	4a25      	ldr	r2, [pc, #148]	@ (80063c0 <create_led_message+0x200>)
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b22      	ldr	r3, [pc, #136]	@ (80063b8 <create_led_message+0x1f8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe ff46 	bl	80051c4 <logger_log_print_>
 8006338:	f7fe fa88 	bl	800484c <vPortExitCritical>
 800633c:	f7fe fa54 	bl	80047e8 <vPortEnterCritical>
 8006340:	4b1d      	ldr	r3, [pc, #116]	@ (80063b8 <create_led_message+0x1f8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a23      	ldr	r2, [pc, #140]	@ (80063d4 <create_led_message+0x214>)
 8006346:	213f      	movs	r1, #63	@ 0x3f
 8006348:	4618      	mov	r0, r3
 800634a:	f001 f8b3 	bl	80074b4 <sniprintf>
 800634e:	4603      	mov	r3, r0
 8006350:	4a1b      	ldr	r2, [pc, #108]	@ (80063c0 <create_led_message+0x200>)
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	4b18      	ldr	r3, [pc, #96]	@ (80063b8 <create_led_message+0x1f8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe ff33 	bl	80051c4 <logger_log_print_>
 800635e:	f7fe fa75 	bl	800484c <vPortExitCritical>
 8006362:	f7fe fa41 	bl	80047e8 <vPortEnterCritical>
 8006366:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <create_led_message+0x1f8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a17      	ldr	r2, [pc, #92]	@ (80063c8 <create_led_message+0x208>)
 800636c:	213f      	movs	r1, #63	@ 0x3f
 800636e:	4618      	mov	r0, r3
 8006370:	f001 f8a0 	bl	80074b4 <sniprintf>
 8006374:	4603      	mov	r3, r0
 8006376:	4a12      	ldr	r2, [pc, #72]	@ (80063c0 <create_led_message+0x200>)
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	4b0f      	ldr	r3, [pc, #60]	@ (80063b8 <create_led_message+0x1f8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe ff20 	bl	80051c4 <logger_log_print_>
 8006384:	f7fe fa62 	bl	800484c <vPortExitCritical>
        vPortFree(entry);
 8006388:	69b8      	ldr	r0, [r7, #24]
 800638a:	f7fe fbdb 	bl	8004b44 <vPortFree>
        memory_pool_block_put(&hao_.msg_pool, msg);
 800638e:	69f9      	ldr	r1, [r7, #28]
 8006390:	4808      	ldr	r0, [pc, #32]	@ (80063b4 <create_led_message+0x1f4>)
 8006392:	f7fe ff68 	bl	8005266 <memory_pool_block_put>
        return NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	e008      	b.n	80063ac <create_led_message+0x1ec>
    }
    linked_list_node_init(node, entry);
 800639a:	69b9      	ldr	r1, [r7, #24]
 800639c:	6978      	ldr	r0, [r7, #20]
 800639e:	f7fe fe66 	bl	800506e <linked_list_node_init>
    linked_list_node_add(&active_messages_list, node);
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	480c      	ldr	r0, [pc, #48]	@ (80063d8 <create_led_message+0x218>)
 80063a6:	f7fe feaa 	bl	80050fe <linked_list_node_add>

    return msg;
 80063aa:	69fb      	ldr	r3, [r7, #28]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	200041d4 	.word	0x200041d4
 80063b8:	08008ab8 	.word	0x08008ab8
 80063bc:	0800885c 	.word	0x0800885c
 80063c0:	2000418c 	.word	0x2000418c
 80063c4:	08008868 	.word	0x08008868
 80063c8:	08008898 	.word	0x08008898
 80063cc:	08006609 	.word	0x08006609
 80063d0:	0800889c 	.word	0x0800889c
 80063d4:	080088cc 	.word	0x080088cc
 80063d8:	20004194 	.word	0x20004194

080063dc <free_led_message>:

static void free_led_message(ao_led_message_t* msg)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    if (msg != NULL) {
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <free_led_message+0x16>
        memory_pool_block_put(&hao_.msg_pool, msg);
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4803      	ldr	r0, [pc, #12]	@ (80063fc <free_led_message+0x20>)
 80063ee:	f7fe ff3a 	bl	8005266 <memory_pool_block_put>
    }
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200041d4 	.word	0x200041d4

08006400 <send_led_on>:

static void send_led_on(ao_led_handle_t* hled)
{
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
    // Crear tarea LED si no está activa
    if (!hled->is_active) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	7a1b      	ldrb	r3, [r3, #8]
 800640c:	f083 0301 	eor.w	r3, r3, #1
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d045      	beq.n	80064a2 <send_led_on+0xa2>
        if (pdPASS != ao_led_start_task(hled)) {
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fe64 	bl	80060e4 <ao_led_start_task>
 800641c:	4603      	mov	r3, r0
 800641e:	2b01      	cmp	r3, #1
 8006420:	d03f      	beq.n	80064a2 <send_led_on+0xa2>
            LOGGER_ERROR("UI: Error al crear tarea LED %s", ledColorToStr(hled->color));
 8006422:	f7fe f9e1 	bl	80047e8 <vPortEnterCritical>
 8006426:	4b4b      	ldr	r3, [pc, #300]	@ (8006554 <send_led_on+0x154>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a4b      	ldr	r2, [pc, #300]	@ (8006558 <send_led_on+0x158>)
 800642c:	213f      	movs	r1, #63	@ 0x3f
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f840 	bl	80074b4 <sniprintf>
 8006434:	4603      	mov	r3, r0
 8006436:	4a49      	ldr	r2, [pc, #292]	@ (800655c <send_led_on+0x15c>)
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	4b46      	ldr	r3, [pc, #280]	@ (8006554 <send_led_on+0x154>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fec0 	bl	80051c4 <logger_log_print_>
 8006444:	f7fe fa02 	bl	800484c <vPortExitCritical>
 8006448:	f7fe f9ce 	bl	80047e8 <vPortEnterCritical>
 800644c:	4b41      	ldr	r3, [pc, #260]	@ (8006554 <send_led_on+0x154>)
 800644e:	681c      	ldr	r4, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff f95d 	bl	8005714 <ledColorToStr>
 800645a:	4603      	mov	r3, r0
 800645c:	4a40      	ldr	r2, [pc, #256]	@ (8006560 <send_led_on+0x160>)
 800645e:	213f      	movs	r1, #63	@ 0x3f
 8006460:	4620      	mov	r0, r4
 8006462:	f001 f827 	bl	80074b4 <sniprintf>
 8006466:	4603      	mov	r3, r0
 8006468:	4a3c      	ldr	r2, [pc, #240]	@ (800655c <send_led_on+0x15c>)
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	4b39      	ldr	r3, [pc, #228]	@ (8006554 <send_led_on+0x154>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe fea7 	bl	80051c4 <logger_log_print_>
 8006476:	f7fe f9e9 	bl	800484c <vPortExitCritical>
 800647a:	f7fe f9b5 	bl	80047e8 <vPortEnterCritical>
 800647e:	4b35      	ldr	r3, [pc, #212]	@ (8006554 <send_led_on+0x154>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a38      	ldr	r2, [pc, #224]	@ (8006564 <send_led_on+0x164>)
 8006484:	213f      	movs	r1, #63	@ 0x3f
 8006486:	4618      	mov	r0, r3
 8006488:	f001 f814 	bl	80074b4 <sniprintf>
 800648c:	4603      	mov	r3, r0
 800648e:	4a33      	ldr	r2, [pc, #204]	@ (800655c <send_led_on+0x15c>)
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b30      	ldr	r3, [pc, #192]	@ (8006554 <send_led_on+0x154>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fe94 	bl	80051c4 <logger_log_print_>
 800649c:	f7fe f9d6 	bl	800484c <vPortExitCritical>
            return;
 80064a0:	e055      	b.n	800654e <send_led_on+0x14e>
        }
    }

    static int msg_id = 0;
    ao_led_message_t* msg = create_led_message(++msg_id, AO_LED_MESSAGE_ON, 0);
 80064a2:	4b31      	ldr	r3, [pc, #196]	@ (8006568 <send_led_on+0x168>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006568 <send_led_on+0x168>)
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006568 <send_led_on+0x168>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2200      	movs	r2, #0
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fe83 	bl	80061c0 <create_led_message>
 80064ba:	60f8      	str	r0, [r7, #12]
    if (msg != NULL) {
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d045      	beq.n	800654e <send_led_on+0x14e>
        if (!ao_led_send(hled, msg)) {
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff fcb3 	bl	8005e30 <ao_led_send>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d03b      	beq.n	800654e <send_led_on+0x14e>
            LOGGER_ERROR("UI: Error al enviar mensaje a LED");
 80064d6:	f7fe f987 	bl	80047e8 <vPortEnterCritical>
 80064da:	4b1e      	ldr	r3, [pc, #120]	@ (8006554 <send_led_on+0x154>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1e      	ldr	r2, [pc, #120]	@ (8006558 <send_led_on+0x158>)
 80064e0:	213f      	movs	r1, #63	@ 0x3f
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 ffe6 	bl	80074b4 <sniprintf>
 80064e8:	4603      	mov	r3, r0
 80064ea:	4a1c      	ldr	r2, [pc, #112]	@ (800655c <send_led_on+0x15c>)
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	4b19      	ldr	r3, [pc, #100]	@ (8006554 <send_led_on+0x154>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fe66 	bl	80051c4 <logger_log_print_>
 80064f8:	f7fe f9a8 	bl	800484c <vPortExitCritical>
 80064fc:	f7fe f974 	bl	80047e8 <vPortEnterCritical>
 8006500:	4b14      	ldr	r3, [pc, #80]	@ (8006554 <send_led_on+0x154>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a19      	ldr	r2, [pc, #100]	@ (800656c <send_led_on+0x16c>)
 8006506:	213f      	movs	r1, #63	@ 0x3f
 8006508:	4618      	mov	r0, r3
 800650a:	f000 ffd3 	bl	80074b4 <sniprintf>
 800650e:	4603      	mov	r3, r0
 8006510:	4a12      	ldr	r2, [pc, #72]	@ (800655c <send_led_on+0x15c>)
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	4b0f      	ldr	r3, [pc, #60]	@ (8006554 <send_led_on+0x154>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fe53 	bl	80051c4 <logger_log_print_>
 800651e:	f7fe f995 	bl	800484c <vPortExitCritical>
 8006522:	f7fe f961 	bl	80047e8 <vPortEnterCritical>
 8006526:	4b0b      	ldr	r3, [pc, #44]	@ (8006554 <send_led_on+0x154>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a0e      	ldr	r2, [pc, #56]	@ (8006564 <send_led_on+0x164>)
 800652c:	213f      	movs	r1, #63	@ 0x3f
 800652e:	4618      	mov	r0, r3
 8006530:	f000 ffc0 	bl	80074b4 <sniprintf>
 8006534:	4603      	mov	r3, r0
 8006536:	4a09      	ldr	r2, [pc, #36]	@ (800655c <send_led_on+0x15c>)
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <send_led_on+0x154>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fe40 	bl	80051c4 <logger_log_print_>
 8006544:	f7fe f982 	bl	800484c <vPortExitCritical>
            free_led_message(msg);  // Solo liberamos si falló el envío
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff ff47 	bl	80063dc <free_led_message>
        }
        // Nota: Si el envío es exitoso, la memoria se liberará en el callback
        // cuando la tarea LED termine de procesar el mensaje
    }
}
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	bd90      	pop	{r4, r7, pc}
 8006554:	08008ab8 	.word	0x08008ab8
 8006558:	0800885c 	.word	0x0800885c
 800655c:	2000418c 	.word	0x2000418c
 8006560:	08008908 	.word	0x08008908
 8006564:	08008898 	.word	0x08008898
 8006568:	200042a8 	.word	0x200042a8
 800656c:	08008928 	.word	0x08008928

08006570 <turn_off_all_leds>:

static void turn_off_all_leds(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
    // Apagar todos los LEDs antes de encender uno nuevo
    static int msg_id = 100;  // Usar IDs diferentes para evitar conflictos
    
    ao_led_message_t* msg_red = create_led_message(++msg_id, AO_LED_MESSAGE_OFF, 0);
 8006576:	4b20      	ldr	r3, [pc, #128]	@ (80065f8 <turn_off_all_leds+0x88>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	4a1e      	ldr	r2, [pc, #120]	@ (80065f8 <turn_off_all_leds+0x88>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	4b1d      	ldr	r3, [pc, #116]	@ (80065f8 <turn_off_all_leds+0x88>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2200      	movs	r2, #0
 8006586:	2101      	movs	r1, #1
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff fe19 	bl	80061c0 <create_led_message>
 800658e:	60f8      	str	r0, [r7, #12]
    ao_led_message_t* msg_green = create_led_message(++msg_id, AO_LED_MESSAGE_OFF, 0);
 8006590:	4b19      	ldr	r3, [pc, #100]	@ (80065f8 <turn_off_all_leds+0x88>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	4a18      	ldr	r2, [pc, #96]	@ (80065f8 <turn_off_all_leds+0x88>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b17      	ldr	r3, [pc, #92]	@ (80065f8 <turn_off_all_leds+0x88>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	2101      	movs	r1, #1
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff fe0c 	bl	80061c0 <create_led_message>
 80065a8:	60b8      	str	r0, [r7, #8]
    ao_led_message_t* msg_blue = create_led_message(++msg_id, AO_LED_MESSAGE_OFF, 0);
 80065aa:	4b13      	ldr	r3, [pc, #76]	@ (80065f8 <turn_off_all_leds+0x88>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	4a11      	ldr	r2, [pc, #68]	@ (80065f8 <turn_off_all_leds+0x88>)
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <turn_off_all_leds+0x88>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2200      	movs	r2, #0
 80065ba:	2101      	movs	r1, #1
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff fdff 	bl	80061c0 <create_led_message>
 80065c2:	6078      	str	r0, [r7, #4]

    if (msg_red) {
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <turn_off_all_leds+0x62>
        ao_led_send(&led_red, msg_red);
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	480b      	ldr	r0, [pc, #44]	@ (80065fc <turn_off_all_leds+0x8c>)
 80065ce:	f7ff fc2f 	bl	8005e30 <ao_led_send>
    }
    if (msg_green) {
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <turn_off_all_leds+0x70>
        ao_led_send(&led_green, msg_green);
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	4809      	ldr	r0, [pc, #36]	@ (8006600 <turn_off_all_leds+0x90>)
 80065dc:	f7ff fc28 	bl	8005e30 <ao_led_send>
    }
    if (msg_blue) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <turn_off_all_leds+0x7e>
        ao_led_send(&led_blue, msg_blue);
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4806      	ldr	r0, [pc, #24]	@ (8006604 <turn_off_all_leds+0x94>)
 80065ea:	f7ff fc21 	bl	8005e30 <ao_led_send>
    }
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000024 	.word	0x20000024
 80065fc:	200041a0 	.word	0x200041a0
 8006600:	200041b0 	.word	0x200041b0
 8006604:	200041c0 	.word	0x200041c0

08006608 <led_callback>:

static void led_callback(int id, ao_led_status_t status)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af02      	add	r7, sp, #8
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
    if (status != AO_LED_STATUS_OK) {
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d03b      	beq.n	8006692 <led_callback+0x8a>
        LOGGER_ERROR("UI: LED mensaje %d completado con error: %d", id, status);
 800661a:	f7fe f8e5 	bl	80047e8 <vPortEnterCritical>
 800661e:	4b64      	ldr	r3, [pc, #400]	@ (80067b0 <led_callback+0x1a8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a64      	ldr	r2, [pc, #400]	@ (80067b4 <led_callback+0x1ac>)
 8006624:	213f      	movs	r1, #63	@ 0x3f
 8006626:	4618      	mov	r0, r3
 8006628:	f000 ff44 	bl	80074b4 <sniprintf>
 800662c:	4603      	mov	r3, r0
 800662e:	4a62      	ldr	r2, [pc, #392]	@ (80067b8 <led_callback+0x1b0>)
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	4b5f      	ldr	r3, [pc, #380]	@ (80067b0 <led_callback+0x1a8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fdc4 	bl	80051c4 <logger_log_print_>
 800663c:	f7fe f906 	bl	800484c <vPortExitCritical>
 8006640:	f7fe f8d2 	bl	80047e8 <vPortEnterCritical>
 8006644:	4b5a      	ldr	r3, [pc, #360]	@ (80067b0 <led_callback+0x1a8>)
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a5b      	ldr	r2, [pc, #364]	@ (80067bc <led_callback+0x1b4>)
 8006650:	213f      	movs	r1, #63	@ 0x3f
 8006652:	f000 ff2f 	bl	80074b4 <sniprintf>
 8006656:	4603      	mov	r3, r0
 8006658:	4a57      	ldr	r2, [pc, #348]	@ (80067b8 <led_callback+0x1b0>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	4b54      	ldr	r3, [pc, #336]	@ (80067b0 <led_callback+0x1a8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fdaf 	bl	80051c4 <logger_log_print_>
 8006666:	f7fe f8f1 	bl	800484c <vPortExitCritical>
 800666a:	f7fe f8bd 	bl	80047e8 <vPortEnterCritical>
 800666e:	4b50      	ldr	r3, [pc, #320]	@ (80067b0 <led_callback+0x1a8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a53      	ldr	r2, [pc, #332]	@ (80067c0 <led_callback+0x1b8>)
 8006674:	213f      	movs	r1, #63	@ 0x3f
 8006676:	4618      	mov	r0, r3
 8006678:	f000 ff1c 	bl	80074b4 <sniprintf>
 800667c:	4603      	mov	r3, r0
 800667e:	4a4e      	ldr	r2, [pc, #312]	@ (80067b8 <led_callback+0x1b0>)
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	4b4b      	ldr	r3, [pc, #300]	@ (80067b0 <led_callback+0x1a8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fd9c 	bl	80051c4 <logger_log_print_>
 800668c:	f7fe f8de 	bl	800484c <vPortExitCritical>
 8006690:	e038      	b.n	8006704 <led_callback+0xfc>
    } else {
        LOGGER_DEBUG("UI: LED mensaje %d completado OK", id);
 8006692:	f7fe f8a9 	bl	80047e8 <vPortEnterCritical>
 8006696:	4b46      	ldr	r3, [pc, #280]	@ (80067b0 <led_callback+0x1a8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a4a      	ldr	r2, [pc, #296]	@ (80067c4 <led_callback+0x1bc>)
 800669c:	213f      	movs	r1, #63	@ 0x3f
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 ff08 	bl	80074b4 <sniprintf>
 80066a4:	4603      	mov	r3, r0
 80066a6:	4a44      	ldr	r2, [pc, #272]	@ (80067b8 <led_callback+0x1b0>)
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	4b41      	ldr	r3, [pc, #260]	@ (80067b0 <led_callback+0x1a8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fd88 	bl	80051c4 <logger_log_print_>
 80066b4:	f7fe f8ca 	bl	800484c <vPortExitCritical>
 80066b8:	f7fe f896 	bl	80047e8 <vPortEnterCritical>
 80066bc:	4b3c      	ldr	r3, [pc, #240]	@ (80067b0 <led_callback+0x1a8>)
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a41      	ldr	r2, [pc, #260]	@ (80067c8 <led_callback+0x1c0>)
 80066c4:	213f      	movs	r1, #63	@ 0x3f
 80066c6:	f000 fef5 	bl	80074b4 <sniprintf>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4a3a      	ldr	r2, [pc, #232]	@ (80067b8 <led_callback+0x1b0>)
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	4b37      	ldr	r3, [pc, #220]	@ (80067b0 <led_callback+0x1a8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe fd75 	bl	80051c4 <logger_log_print_>
 80066da:	f7fe f8b7 	bl	800484c <vPortExitCritical>
 80066de:	f7fe f883 	bl	80047e8 <vPortEnterCritical>
 80066e2:	4b33      	ldr	r3, [pc, #204]	@ (80067b0 <led_callback+0x1a8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a36      	ldr	r2, [pc, #216]	@ (80067c0 <led_callback+0x1b8>)
 80066e8:	213f      	movs	r1, #63	@ 0x3f
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fee2 	bl	80074b4 <sniprintf>
 80066f0:	4603      	mov	r3, r0
 80066f2:	4a31      	ldr	r2, [pc, #196]	@ (80067b8 <led_callback+0x1b0>)
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b2e      	ldr	r3, [pc, #184]	@ (80067b0 <led_callback+0x1a8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fd62 	bl	80051c4 <logger_log_print_>
 8006700:	f7fe f8a4 	bl	800484c <vPortExitCritical>
    }
    // Buscar y eliminar el mensaje de la lista por ID
    linked_list_node_t* node = linked_list_node_remove_by_id(&active_messages_list, id);
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4831      	ldr	r0, [pc, #196]	@ (80067cc <led_callback+0x1c4>)
 8006708:	f7fe fd1b 	bl	8005142 <linked_list_node_remove_by_id>
 800670c:	60f8      	str	r0, [r7, #12]
    if (node != NULL) {
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d049      	beq.n	80067a8 <led_callback+0x1a0>
        active_message_entry_t* entry = (active_message_entry_t*)node->pdata;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60bb      	str	r3, [r7, #8]
        if (entry) {
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <led_callback+0x128>
            free_led_message(entry->msg); // Devuelve el mensaje a la memory pool
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fe59 	bl	80063dc <free_led_message>
            vPortFree(entry); // Libera el entry
 800672a:	68b8      	ldr	r0, [r7, #8]
 800672c:	f7fe fa0a 	bl	8004b44 <vPortFree>
        }
        vPortFree(node); // Libera el nodo
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7fe fa07 	bl	8004b44 <vPortFree>
        LOGGER_DEBUG("UI: Memoria del mensaje %d liberada", id);
 8006736:	f7fe f857 	bl	80047e8 <vPortEnterCritical>
 800673a:	4b1d      	ldr	r3, [pc, #116]	@ (80067b0 <led_callback+0x1a8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a21      	ldr	r2, [pc, #132]	@ (80067c4 <led_callback+0x1bc>)
 8006740:	213f      	movs	r1, #63	@ 0x3f
 8006742:	4618      	mov	r0, r3
 8006744:	f000 feb6 	bl	80074b4 <sniprintf>
 8006748:	4603      	mov	r3, r0
 800674a:	4a1b      	ldr	r2, [pc, #108]	@ (80067b8 <led_callback+0x1b0>)
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	4b18      	ldr	r3, [pc, #96]	@ (80067b0 <led_callback+0x1a8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fd36 	bl	80051c4 <logger_log_print_>
 8006758:	f7fe f878 	bl	800484c <vPortExitCritical>
 800675c:	f7fe f844 	bl	80047e8 <vPortEnterCritical>
 8006760:	4b13      	ldr	r3, [pc, #76]	@ (80067b0 <led_callback+0x1a8>)
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a1a      	ldr	r2, [pc, #104]	@ (80067d0 <led_callback+0x1c8>)
 8006768:	213f      	movs	r1, #63	@ 0x3f
 800676a:	f000 fea3 	bl	80074b4 <sniprintf>
 800676e:	4603      	mov	r3, r0
 8006770:	4a11      	ldr	r2, [pc, #68]	@ (80067b8 <led_callback+0x1b0>)
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	4b0e      	ldr	r3, [pc, #56]	@ (80067b0 <led_callback+0x1a8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fd23 	bl	80051c4 <logger_log_print_>
 800677e:	f7fe f865 	bl	800484c <vPortExitCritical>
 8006782:	f7fe f831 	bl	80047e8 <vPortEnterCritical>
 8006786:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <led_callback+0x1a8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a0d      	ldr	r2, [pc, #52]	@ (80067c0 <led_callback+0x1b8>)
 800678c:	213f      	movs	r1, #63	@ 0x3f
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fe90 	bl	80074b4 <sniprintf>
 8006794:	4603      	mov	r3, r0
 8006796:	4a08      	ldr	r2, [pc, #32]	@ (80067b8 <led_callback+0x1b0>)
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	4b05      	ldr	r3, [pc, #20]	@ (80067b0 <led_callback+0x1a8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe fd10 	bl	80051c4 <logger_log_print_>
 80067a4:	f7fe f852 	bl	800484c <vPortExitCritical>
    }
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	08008ab8 	.word	0x08008ab8
 80067b4:	0800885c 	.word	0x0800885c
 80067b8:	2000418c 	.word	0x2000418c
 80067bc:	0800894c 	.word	0x0800894c
 80067c0:	08008898 	.word	0x08008898
 80067c4:	08008978 	.word	0x08008978
 80067c8:	08008984 	.word	0x08008984
 80067cc:	20004194 	.word	0x20004194
 80067d0:	080089a8 	.word	0x080089a8

080067d4 <task_>:

static void task_(void *argument)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  while (true)
  {

    msg_event_t event_msg;

    if (pdPASS == xQueueReceive(hao_.hqueue, &event_msg, portMAX_DELAY))
 80067dc:	4b6b      	ldr	r3, [pc, #428]	@ (800698c <task_+0x1b8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f107 010f 	add.w	r1, r7, #15
 80067e4:	f04f 32ff 	mov.w	r2, #4294967295
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fc fd35 	bl	8003258 <xQueueReceive>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d1f3      	bne.n	80067dc <task_+0x8>
    {
      switch (event_msg)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	f000 8086 	beq.w	8006908 <task_+0x134>
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	f300 80c2 	bgt.w	8006986 <task_+0x1b2>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <task_+0x38>
 8006806:	2b01      	cmp	r3, #1
 8006808:	d03f      	beq.n	800688a <task_+0xb6>
          LOGGER_INFO("Estado Azul - LED Azul encendido");
          turn_off_all_leds();  // Apagar todos antes de encender el azul
          send_led_on(&led_blue);
          break;
        default:
          break;
 800680a:	e0bc      	b.n	8006986 <task_+0x1b2>
          LOGGER_INFO("Estado Rojo - LED Rojo encendido");
 800680c:	f7fd ffec 	bl	80047e8 <vPortEnterCritical>
 8006810:	4b5f      	ldr	r3, [pc, #380]	@ (8006990 <task_+0x1bc>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a5f      	ldr	r2, [pc, #380]	@ (8006994 <task_+0x1c0>)
 8006816:	213f      	movs	r1, #63	@ 0x3f
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fe4b 	bl	80074b4 <sniprintf>
 800681e:	4603      	mov	r3, r0
 8006820:	4a5d      	ldr	r2, [pc, #372]	@ (8006998 <task_+0x1c4>)
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	4b5a      	ldr	r3, [pc, #360]	@ (8006990 <task_+0x1bc>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe fccb 	bl	80051c4 <logger_log_print_>
 800682e:	f7fe f80d 	bl	800484c <vPortExitCritical>
 8006832:	f7fd ffd9 	bl	80047e8 <vPortEnterCritical>
 8006836:	4b56      	ldr	r3, [pc, #344]	@ (8006990 <task_+0x1bc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a58      	ldr	r2, [pc, #352]	@ (800699c <task_+0x1c8>)
 800683c:	213f      	movs	r1, #63	@ 0x3f
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fe38 	bl	80074b4 <sniprintf>
 8006844:	4603      	mov	r3, r0
 8006846:	4a54      	ldr	r2, [pc, #336]	@ (8006998 <task_+0x1c4>)
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	4b51      	ldr	r3, [pc, #324]	@ (8006990 <task_+0x1bc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fcb8 	bl	80051c4 <logger_log_print_>
 8006854:	f7fd fffa 	bl	800484c <vPortExitCritical>
 8006858:	f7fd ffc6 	bl	80047e8 <vPortEnterCritical>
 800685c:	4b4c      	ldr	r3, [pc, #304]	@ (8006990 <task_+0x1bc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a4f      	ldr	r2, [pc, #316]	@ (80069a0 <task_+0x1cc>)
 8006862:	213f      	movs	r1, #63	@ 0x3f
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fe25 	bl	80074b4 <sniprintf>
 800686a:	4603      	mov	r3, r0
 800686c:	4a4a      	ldr	r2, [pc, #296]	@ (8006998 <task_+0x1c4>)
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	4b47      	ldr	r3, [pc, #284]	@ (8006990 <task_+0x1bc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fca5 	bl	80051c4 <logger_log_print_>
 800687a:	f7fd ffe7 	bl	800484c <vPortExitCritical>
          turn_off_all_leds();  // Apagar todos antes de encender el rojo
 800687e:	f7ff fe77 	bl	8006570 <turn_off_all_leds>
          send_led_on(&led_red);
 8006882:	4848      	ldr	r0, [pc, #288]	@ (80069a4 <task_+0x1d0>)
 8006884:	f7ff fdbc 	bl	8006400 <send_led_on>
          break;
 8006888:	e07e      	b.n	8006988 <task_+0x1b4>
          LOGGER_INFO("Estado Verde - LED Verde encendido");
 800688a:	f7fd ffad 	bl	80047e8 <vPortEnterCritical>
 800688e:	4b40      	ldr	r3, [pc, #256]	@ (8006990 <task_+0x1bc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a40      	ldr	r2, [pc, #256]	@ (8006994 <task_+0x1c0>)
 8006894:	213f      	movs	r1, #63	@ 0x3f
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fe0c 	bl	80074b4 <sniprintf>
 800689c:	4603      	mov	r3, r0
 800689e:	4a3e      	ldr	r2, [pc, #248]	@ (8006998 <task_+0x1c4>)
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006990 <task_+0x1bc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fc8c 	bl	80051c4 <logger_log_print_>
 80068ac:	f7fd ffce 	bl	800484c <vPortExitCritical>
 80068b0:	f7fd ff9a 	bl	80047e8 <vPortEnterCritical>
 80068b4:	4b36      	ldr	r3, [pc, #216]	@ (8006990 <task_+0x1bc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a3b      	ldr	r2, [pc, #236]	@ (80069a8 <task_+0x1d4>)
 80068ba:	213f      	movs	r1, #63	@ 0x3f
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fdf9 	bl	80074b4 <sniprintf>
 80068c2:	4603      	mov	r3, r0
 80068c4:	4a34      	ldr	r2, [pc, #208]	@ (8006998 <task_+0x1c4>)
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	4b31      	ldr	r3, [pc, #196]	@ (8006990 <task_+0x1bc>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fc79 	bl	80051c4 <logger_log_print_>
 80068d2:	f7fd ffbb 	bl	800484c <vPortExitCritical>
 80068d6:	f7fd ff87 	bl	80047e8 <vPortEnterCritical>
 80068da:	4b2d      	ldr	r3, [pc, #180]	@ (8006990 <task_+0x1bc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a30      	ldr	r2, [pc, #192]	@ (80069a0 <task_+0x1cc>)
 80068e0:	213f      	movs	r1, #63	@ 0x3f
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fde6 	bl	80074b4 <sniprintf>
 80068e8:	4603      	mov	r3, r0
 80068ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006998 <task_+0x1c4>)
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	4b28      	ldr	r3, [pc, #160]	@ (8006990 <task_+0x1bc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fc66 	bl	80051c4 <logger_log_print_>
 80068f8:	f7fd ffa8 	bl	800484c <vPortExitCritical>
          turn_off_all_leds();  // Apagar todos antes de encender el verde
 80068fc:	f7ff fe38 	bl	8006570 <turn_off_all_leds>
          send_led_on(&led_green);
 8006900:	482a      	ldr	r0, [pc, #168]	@ (80069ac <task_+0x1d8>)
 8006902:	f7ff fd7d 	bl	8006400 <send_led_on>
          break;
 8006906:	e03f      	b.n	8006988 <task_+0x1b4>
          LOGGER_INFO("Estado Azul - LED Azul encendido");
 8006908:	f7fd ff6e 	bl	80047e8 <vPortEnterCritical>
 800690c:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <task_+0x1bc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a20      	ldr	r2, [pc, #128]	@ (8006994 <task_+0x1c0>)
 8006912:	213f      	movs	r1, #63	@ 0x3f
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fdcd 	bl	80074b4 <sniprintf>
 800691a:	4603      	mov	r3, r0
 800691c:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <task_+0x1c4>)
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	4b1b      	ldr	r3, [pc, #108]	@ (8006990 <task_+0x1bc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe fc4d 	bl	80051c4 <logger_log_print_>
 800692a:	f7fd ff8f 	bl	800484c <vPortExitCritical>
 800692e:	f7fd ff5b 	bl	80047e8 <vPortEnterCritical>
 8006932:	4b17      	ldr	r3, [pc, #92]	@ (8006990 <task_+0x1bc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1e      	ldr	r2, [pc, #120]	@ (80069b0 <task_+0x1dc>)
 8006938:	213f      	movs	r1, #63	@ 0x3f
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fdba 	bl	80074b4 <sniprintf>
 8006940:	4603      	mov	r3, r0
 8006942:	4a15      	ldr	r2, [pc, #84]	@ (8006998 <task_+0x1c4>)
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b12      	ldr	r3, [pc, #72]	@ (8006990 <task_+0x1bc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fc3a 	bl	80051c4 <logger_log_print_>
 8006950:	f7fd ff7c 	bl	800484c <vPortExitCritical>
 8006954:	f7fd ff48 	bl	80047e8 <vPortEnterCritical>
 8006958:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <task_+0x1bc>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a10      	ldr	r2, [pc, #64]	@ (80069a0 <task_+0x1cc>)
 800695e:	213f      	movs	r1, #63	@ 0x3f
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fda7 	bl	80074b4 <sniprintf>
 8006966:	4603      	mov	r3, r0
 8006968:	4a0b      	ldr	r2, [pc, #44]	@ (8006998 <task_+0x1c4>)
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <task_+0x1bc>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fc27 	bl	80051c4 <logger_log_print_>
 8006976:	f7fd ff69 	bl	800484c <vPortExitCritical>
          turn_off_all_leds();  // Apagar todos antes de encender el azul
 800697a:	f7ff fdf9 	bl	8006570 <turn_off_all_leds>
          send_led_on(&led_blue);
 800697e:	480d      	ldr	r0, [pc, #52]	@ (80069b4 <task_+0x1e0>)
 8006980:	f7ff fd3e 	bl	8006400 <send_led_on>
          break;
 8006984:	e000      	b.n	8006988 <task_+0x1b4>
          break;
 8006986:	bf00      	nop
  {
 8006988:	e728      	b.n	80067dc <task_+0x8>
 800698a:	bf00      	nop
 800698c:	200041d0 	.word	0x200041d0
 8006990:	08008ab8 	.word	0x08008ab8
 8006994:	080089cc 	.word	0x080089cc
 8006998:	2000418c 	.word	0x2000418c
 800699c:	080089d4 	.word	0x080089d4
 80069a0:	08008898 	.word	0x08008898
 80069a4:	200041a0 	.word	0x200041a0
 80069a8:	080089f8 	.word	0x080089f8
 80069ac:	200041b0 	.word	0x200041b0
 80069b0:	08008a1c 	.word	0x08008a1c
 80069b4:	200041c0 	.word	0x200041c0

080069b8 <ao_ui_send_event>:
}

/********************** external functions PULSEdefinition ************************/

bool ao_ui_send_event(msg_event_t msg)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
  return (pdPASS == xQueueSend(hao_.hqueue, (void*)&msg, 0));
 80069c2:	4b08      	ldr	r3, [pc, #32]	@ (80069e4 <ao_ui_send_event+0x2c>)
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	1df9      	adds	r1, r7, #7
 80069c8:	2300      	movs	r3, #0
 80069ca:	2200      	movs	r2, #0
 80069cc:	f7fc fb42 	bl	8003054 <xQueueGenericSend>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	bf0c      	ite	eq
 80069d6:	2301      	moveq	r3, #1
 80069d8:	2300      	movne	r3, #0
 80069da:	b2db      	uxtb	r3, r3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	200041d0 	.word	0x200041d0

080069e8 <ao_ui_init>:

void ao_ui_init(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af02      	add	r7, sp, #8
  // Inicializar cola para eventos del botón
  hao_.hqueue = xQueueCreate(QUEUE_LENGTH_, QUEUE_ITEM_SIZE_);
 80069ee:	2200      	movs	r2, #0
 80069f0:	2101      	movs	r1, #1
 80069f2:	2005      	movs	r0, #5
 80069f4:	f7fc fad0 	bl	8002f98 <xQueueGenericCreate>
 80069f8:	4603      	mov	r3, r0
 80069fa:	4a85      	ldr	r2, [pc, #532]	@ (8006c10 <ao_ui_init+0x228>)
 80069fc:	6013      	str	r3, [r2, #0]
  if (hao_.hqueue == NULL)
 80069fe:	4b84      	ldr	r3, [pc, #528]	@ (8006c10 <ao_ui_init+0x228>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d13a      	bne.n	8006a7c <ao_ui_init+0x94>
  {
    LOGGER_ERROR("Failed to create UI event queue");
 8006a06:	f7fd feef 	bl	80047e8 <vPortEnterCritical>
 8006a0a:	4b82      	ldr	r3, [pc, #520]	@ (8006c14 <ao_ui_init+0x22c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a82      	ldr	r2, [pc, #520]	@ (8006c18 <ao_ui_init+0x230>)
 8006a10:	213f      	movs	r1, #63	@ 0x3f
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fd4e 	bl	80074b4 <sniprintf>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4a80      	ldr	r2, [pc, #512]	@ (8006c1c <ao_ui_init+0x234>)
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8006c14 <ao_ui_init+0x22c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fbce 	bl	80051c4 <logger_log_print_>
 8006a28:	f7fd ff10 	bl	800484c <vPortExitCritical>
 8006a2c:	f7fd fedc 	bl	80047e8 <vPortEnterCritical>
 8006a30:	4b78      	ldr	r3, [pc, #480]	@ (8006c14 <ao_ui_init+0x22c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a7a      	ldr	r2, [pc, #488]	@ (8006c20 <ao_ui_init+0x238>)
 8006a36:	213f      	movs	r1, #63	@ 0x3f
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fd3b 	bl	80074b4 <sniprintf>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4a76      	ldr	r2, [pc, #472]	@ (8006c1c <ao_ui_init+0x234>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	4b73      	ldr	r3, [pc, #460]	@ (8006c14 <ao_ui_init+0x22c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fbbb 	bl	80051c4 <logger_log_print_>
 8006a4e:	f7fd fefd 	bl	800484c <vPortExitCritical>
 8006a52:	f7fd fec9 	bl	80047e8 <vPortEnterCritical>
 8006a56:	4b6f      	ldr	r3, [pc, #444]	@ (8006c14 <ao_ui_init+0x22c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a72      	ldr	r2, [pc, #456]	@ (8006c24 <ao_ui_init+0x23c>)
 8006a5c:	213f      	movs	r1, #63	@ 0x3f
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fd28 	bl	80074b4 <sniprintf>
 8006a64:	4603      	mov	r3, r0
 8006a66:	4a6d      	ldr	r2, [pc, #436]	@ (8006c1c <ao_ui_init+0x234>)
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006c14 <ao_ui_init+0x22c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fba8 	bl	80051c4 <logger_log_print_>
 8006a74:	f7fd feea 	bl	800484c <vPortExitCritical>
    while(1);
 8006a78:	bf00      	nop
 8006a7a:	e7fd      	b.n	8006a78 <ao_ui_init+0x90>
  }

  // Inicializar memory pool para mensajes LED
  memory_pool_init(&hao_.msg_pool, 
 8006a7c:	2314      	movs	r3, #20
 8006a7e:	220a      	movs	r2, #10
 8006a80:	4969      	ldr	r1, [pc, #420]	@ (8006c28 <ao_ui_init+0x240>)
 8006a82:	486a      	ldr	r0, [pc, #424]	@ (8006c2c <ao_ui_init+0x244>)
 8006a84:	f7fe fbb2 	bl	80051ec <memory_pool_init>
                  hao_.pool_memory,
                  UI_MSG_POOL_BLOCKS, 
                  sizeof(ao_led_message_t));
  
  // Initialize LEDs
  LOGGER_INFO("Initializing LEDs...");
 8006a88:	f7fd feae 	bl	80047e8 <vPortEnterCritical>
 8006a8c:	4b61      	ldr	r3, [pc, #388]	@ (8006c14 <ao_ui_init+0x22c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a67      	ldr	r2, [pc, #412]	@ (8006c30 <ao_ui_init+0x248>)
 8006a92:	213f      	movs	r1, #63	@ 0x3f
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fd0d 	bl	80074b4 <sniprintf>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8006c1c <ao_ui_init+0x234>)
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	4b5c      	ldr	r3, [pc, #368]	@ (8006c14 <ao_ui_init+0x22c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fe fb8d 	bl	80051c4 <logger_log_print_>
 8006aaa:	f7fd fecf 	bl	800484c <vPortExitCritical>
 8006aae:	f7fd fe9b 	bl	80047e8 <vPortEnterCritical>
 8006ab2:	4b58      	ldr	r3, [pc, #352]	@ (8006c14 <ao_ui_init+0x22c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a5f      	ldr	r2, [pc, #380]	@ (8006c34 <ao_ui_init+0x24c>)
 8006ab8:	213f      	movs	r1, #63	@ 0x3f
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fcfa 	bl	80074b4 <sniprintf>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	4a56      	ldr	r2, [pc, #344]	@ (8006c1c <ao_ui_init+0x234>)
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b53      	ldr	r3, [pc, #332]	@ (8006c14 <ao_ui_init+0x22c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe fb7a 	bl	80051c4 <logger_log_print_>
 8006ad0:	f7fd febc 	bl	800484c <vPortExitCritical>
 8006ad4:	f7fd fe88 	bl	80047e8 <vPortEnterCritical>
 8006ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8006c14 <ao_ui_init+0x22c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a51      	ldr	r2, [pc, #324]	@ (8006c24 <ao_ui_init+0x23c>)
 8006ade:	213f      	movs	r1, #63	@ 0x3f
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fce7 	bl	80074b4 <sniprintf>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8006c1c <ao_ui_init+0x234>)
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	4b49      	ldr	r3, [pc, #292]	@ (8006c14 <ao_ui_init+0x22c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fb67 	bl	80051c4 <logger_log_print_>
 8006af6:	f7fd fea9 	bl	800484c <vPortExitCritical>

  // Inicializar handles de LEDs
  ao_led_init(&led_red, AO_LED_COLOR_RED);
 8006afa:	2100      	movs	r1, #0
 8006afc:	484e      	ldr	r0, [pc, #312]	@ (8006c38 <ao_ui_init+0x250>)
 8006afe:	f7ff fa87 	bl	8006010 <ao_led_init>
  ao_led_init(&led_green, AO_LED_COLOR_GREEN);
 8006b02:	2101      	movs	r1, #1
 8006b04:	484d      	ldr	r0, [pc, #308]	@ (8006c3c <ao_ui_init+0x254>)
 8006b06:	f7ff fa83 	bl	8006010 <ao_led_init>
  ao_led_init(&led_blue, AO_LED_COLOR_BLUE);
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	484c      	ldr	r0, [pc, #304]	@ (8006c40 <ao_ui_init+0x258>)
 8006b0e:	f7ff fa7f 	bl	8006010 <ao_led_init>

  // Crear tareas LED
  ao_led_start_task(&led_red);
 8006b12:	4849      	ldr	r0, [pc, #292]	@ (8006c38 <ao_ui_init+0x250>)
 8006b14:	f7ff fae6 	bl	80060e4 <ao_led_start_task>
  ao_led_start_task(&led_green);
 8006b18:	4848      	ldr	r0, [pc, #288]	@ (8006c3c <ao_ui_init+0x254>)
 8006b1a:	f7ff fae3 	bl	80060e4 <ao_led_start_task>
  ao_led_start_task(&led_blue);
 8006b1e:	4848      	ldr	r0, [pc, #288]	@ (8006c40 <ao_ui_init+0x258>)
 8006b20:	f7ff fae0 	bl	80060e4 <ao_led_start_task>

  // Crear tarea UI
  BaseType_t status;
  status = xTaskCreate(task_, "task_ao_ui", 128, NULL, tskIDLE_PRIORITY, NULL);
 8006b24:	2300      	movs	r3, #0
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2280      	movs	r2, #128	@ 0x80
 8006b30:	4944      	ldr	r1, [pc, #272]	@ (8006c44 <ao_ui_init+0x25c>)
 8006b32:	4845      	ldr	r0, [pc, #276]	@ (8006c48 <ao_ui_init+0x260>)
 8006b34:	f7fc fde2 	bl	80036fc <xTaskCreate>
 8006b38:	60f8      	str	r0, [r7, #12]
  while (pdPASS != status)
 8006b3a:	e038      	b.n	8006bae <ao_ui_init+0x1c6>
  {
    // Error: No se pudo crear la tarea UI
    LOGGER_ERROR("UI: Error creando tarea UI");
 8006b3c:	f7fd fe54 	bl	80047e8 <vPortEnterCritical>
 8006b40:	4b34      	ldr	r3, [pc, #208]	@ (8006c14 <ao_ui_init+0x22c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a34      	ldr	r2, [pc, #208]	@ (8006c18 <ao_ui_init+0x230>)
 8006b46:	213f      	movs	r1, #63	@ 0x3f
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fcb3 	bl	80074b4 <sniprintf>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	4a32      	ldr	r2, [pc, #200]	@ (8006c1c <ao_ui_init+0x234>)
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	4b2f      	ldr	r3, [pc, #188]	@ (8006c14 <ao_ui_init+0x22c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fb33 	bl	80051c4 <logger_log_print_>
 8006b5e:	f7fd fe75 	bl	800484c <vPortExitCritical>
 8006b62:	f7fd fe41 	bl	80047e8 <vPortEnterCritical>
 8006b66:	4b2b      	ldr	r3, [pc, #172]	@ (8006c14 <ao_ui_init+0x22c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a38      	ldr	r2, [pc, #224]	@ (8006c4c <ao_ui_init+0x264>)
 8006b6c:	213f      	movs	r1, #63	@ 0x3f
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fca0 	bl	80074b4 <sniprintf>
 8006b74:	4603      	mov	r3, r0
 8006b76:	4a29      	ldr	r2, [pc, #164]	@ (8006c1c <ao_ui_init+0x234>)
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	4b26      	ldr	r3, [pc, #152]	@ (8006c14 <ao_ui_init+0x22c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fb20 	bl	80051c4 <logger_log_print_>
 8006b84:	f7fd fe62 	bl	800484c <vPortExitCritical>
 8006b88:	f7fd fe2e 	bl	80047e8 <vPortEnterCritical>
 8006b8c:	4b21      	ldr	r3, [pc, #132]	@ (8006c14 <ao_ui_init+0x22c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a24      	ldr	r2, [pc, #144]	@ (8006c24 <ao_ui_init+0x23c>)
 8006b92:	213f      	movs	r1, #63	@ 0x3f
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fc8d 	bl	80074b4 <sniprintf>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006c1c <ao_ui_init+0x234>)
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c14 <ao_ui_init+0x22c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fb0d 	bl	80051c4 <logger_log_print_>
 8006baa:	f7fd fe4f 	bl	800484c <vPortExitCritical>
  while (pdPASS != status)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d1c3      	bne.n	8006b3c <ao_ui_init+0x154>
  }

  // Inicializar la lista enlazada de mensajes activos
  linked_list_init(&active_messages_list);
 8006bb4:	4826      	ldr	r0, [pc, #152]	@ (8006c50 <ao_ui_init+0x268>)
 8006bb6:	f7fe fa47 	bl	8005048 <linked_list_init>

  // Apagar todos los LEDs usando el sistema de mensajes normal
  ao_led_message_t* msg_red = create_led_message(1, AO_LED_MESSAGE_OFF, 0);
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f7ff fafe 	bl	80061c0 <create_led_message>
 8006bc4:	60b8      	str	r0, [r7, #8]
  ao_led_message_t* msg_green = create_led_message(2, AO_LED_MESSAGE_OFF, 0);
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2101      	movs	r1, #1
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f7ff faf8 	bl	80061c0 <create_led_message>
 8006bd0:	6078      	str	r0, [r7, #4]
  ao_led_message_t* msg_blue = create_led_message(3, AO_LED_MESSAGE_OFF, 0);
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	2003      	movs	r0, #3
 8006bd8:	f7ff faf2 	bl	80061c0 <create_led_message>
 8006bdc:	6038      	str	r0, [r7, #0]

  if (msg_red) {
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <ao_ui_init+0x204>
    ao_led_send(&led_red, msg_red);
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	4814      	ldr	r0, [pc, #80]	@ (8006c38 <ao_ui_init+0x250>)
 8006be8:	f7ff f922 	bl	8005e30 <ao_led_send>
  }
  if (msg_green) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <ao_ui_init+0x212>
    ao_led_send(&led_green, msg_green);
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4811      	ldr	r0, [pc, #68]	@ (8006c3c <ao_ui_init+0x254>)
 8006bf6:	f7ff f91b 	bl	8005e30 <ao_led_send>
  }
  if (msg_blue) {
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <ao_ui_init+0x220>
    ao_led_send(&led_blue, msg_blue);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	480f      	ldr	r0, [pc, #60]	@ (8006c40 <ao_ui_init+0x258>)
 8006c04:	f7ff f914 	bl	8005e30 <ao_led_send>
  }
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	200041d0 	.word	0x200041d0
 8006c14:	08008ab8 	.word	0x08008ab8
 8006c18:	0800885c 	.word	0x0800885c
 8006c1c:	2000418c 	.word	0x2000418c
 8006c20:	08008a40 	.word	0x08008a40
 8006c24:	08008898 	.word	0x08008898
 8006c28:	200041e0 	.word	0x200041e0
 8006c2c:	200041d4 	.word	0x200041d4
 8006c30:	080089cc 	.word	0x080089cc
 8006c34:	08008a60 	.word	0x08008a60
 8006c38:	200041a0 	.word	0x200041a0
 8006c3c:	200041b0 	.word	0x200041b0
 8006c40:	200041c0 	.word	0x200041c0
 8006c44:	08008a78 	.word	0x08008a78
 8006c48:	080067d5 	.word	0x080067d5
 8006c4c:	08008a84 	.word	0x08008a84
 8006c50:	20004194 	.word	0x20004194

08006c54 <findslot>:
 8006c54:	4b0a      	ldr	r3, [pc, #40]	@ (8006c80 <findslot+0x2c>)
 8006c56:	b510      	push	{r4, lr}
 8006c58:	4604      	mov	r4, r0
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	b118      	cbz	r0, 8006c66 <findslot+0x12>
 8006c5e:	6a03      	ldr	r3, [r0, #32]
 8006c60:	b90b      	cbnz	r3, 8006c66 <findslot+0x12>
 8006c62:	f000 fbdf 	bl	8007424 <__sinit>
 8006c66:	2c13      	cmp	r4, #19
 8006c68:	d807      	bhi.n	8006c7a <findslot+0x26>
 8006c6a:	4806      	ldr	r0, [pc, #24]	@ (8006c84 <findslot+0x30>)
 8006c6c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006c70:	3201      	adds	r2, #1
 8006c72:	d002      	beq.n	8006c7a <findslot+0x26>
 8006c74:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	e7fc      	b.n	8006c78 <findslot+0x24>
 8006c7e:	bf00      	nop
 8006c80:	2000003c 	.word	0x2000003c
 8006c84:	200042b8 	.word	0x200042b8

08006c88 <error>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	f000 fcda 	bl	8007644 <__errno>
 8006c90:	2613      	movs	r6, #19
 8006c92:	4605      	mov	r5, r0
 8006c94:	2700      	movs	r7, #0
 8006c96:	4630      	mov	r0, r6
 8006c98:	4639      	mov	r1, r7
 8006c9a:	beab      	bkpt	0x00ab
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	602e      	str	r6, [r5, #0]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ca4 <checkerror>:
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d101      	bne.n	8006cac <checkerror+0x8>
 8006ca8:	f7ff bfee 	b.w	8006c88 <error>
 8006cac:	4770      	bx	lr

08006cae <_swiread>:
 8006cae:	b530      	push	{r4, r5, lr}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006cb6:	9203      	str	r2, [sp, #12]
 8006cb8:	2406      	movs	r4, #6
 8006cba:	ad01      	add	r5, sp, #4
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	beab      	bkpt	0x00ab
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff ffed 	bl	8006ca4 <checkerror>
 8006cca:	b005      	add	sp, #20
 8006ccc:	bd30      	pop	{r4, r5, pc}

08006cce <_read>:
 8006cce:	b570      	push	{r4, r5, r6, lr}
 8006cd0:	460e      	mov	r6, r1
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	f7ff ffbe 	bl	8006c54 <findslot>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	b930      	cbnz	r0, 8006cea <_read+0x1c>
 8006cdc:	f000 fcb2 	bl	8007644 <__errno>
 8006ce0:	2309      	movs	r3, #9
 8006ce2:	6003      	str	r3, [r0, #0]
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	4622      	mov	r2, r4
 8006cee:	4631      	mov	r1, r6
 8006cf0:	f7ff ffdd 	bl	8006cae <_swiread>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d0f5      	beq.n	8006ce4 <_read+0x16>
 8006cf8:	686b      	ldr	r3, [r5, #4]
 8006cfa:	1a20      	subs	r0, r4, r0
 8006cfc:	4403      	add	r3, r0
 8006cfe:	606b      	str	r3, [r5, #4]
 8006d00:	e7f2      	b.n	8006ce8 <_read+0x1a>

08006d02 <_swilseek>:
 8006d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d04:	460c      	mov	r4, r1
 8006d06:	4616      	mov	r6, r2
 8006d08:	f7ff ffa4 	bl	8006c54 <findslot>
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	b940      	cbnz	r0, 8006d22 <_swilseek+0x20>
 8006d10:	f000 fc98 	bl	8007644 <__errno>
 8006d14:	2309      	movs	r3, #9
 8006d16:	6003      	str	r3, [r0, #0]
 8006d18:	f04f 34ff 	mov.w	r4, #4294967295
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	b003      	add	sp, #12
 8006d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d22:	2e02      	cmp	r6, #2
 8006d24:	d903      	bls.n	8006d2e <_swilseek+0x2c>
 8006d26:	f000 fc8d 	bl	8007644 <__errno>
 8006d2a:	2316      	movs	r3, #22
 8006d2c:	e7f3      	b.n	8006d16 <_swilseek+0x14>
 8006d2e:	2e01      	cmp	r6, #1
 8006d30:	d112      	bne.n	8006d58 <_swilseek+0x56>
 8006d32:	6843      	ldr	r3, [r0, #4]
 8006d34:	18e4      	adds	r4, r4, r3
 8006d36:	d4f6      	bmi.n	8006d26 <_swilseek+0x24>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	260a      	movs	r6, #10
 8006d3c:	e9cd 3400 	strd	r3, r4, [sp]
 8006d40:	466f      	mov	r7, sp
 8006d42:	4630      	mov	r0, r6
 8006d44:	4639      	mov	r1, r7
 8006d46:	beab      	bkpt	0x00ab
 8006d48:	4606      	mov	r6, r0
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7ff ffaa 	bl	8006ca4 <checkerror>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	dbe1      	blt.n	8006d18 <_swilseek+0x16>
 8006d54:	606c      	str	r4, [r5, #4]
 8006d56:	e7e1      	b.n	8006d1c <_swilseek+0x1a>
 8006d58:	2e02      	cmp	r6, #2
 8006d5a:	6803      	ldr	r3, [r0, #0]
 8006d5c:	d1ec      	bne.n	8006d38 <_swilseek+0x36>
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	260c      	movs	r6, #12
 8006d62:	466f      	mov	r7, sp
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	beab      	bkpt	0x00ab
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff ff99 	bl	8006ca4 <checkerror>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d0d0      	beq.n	8006d18 <_swilseek+0x16>
 8006d76:	4404      	add	r4, r0
 8006d78:	e7de      	b.n	8006d38 <_swilseek+0x36>

08006d7a <_lseek>:
 8006d7a:	f7ff bfc2 	b.w	8006d02 <_swilseek>

08006d7e <_swiwrite>:
 8006d7e:	b530      	push	{r4, r5, lr}
 8006d80:	b085      	sub	sp, #20
 8006d82:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006d86:	9203      	str	r2, [sp, #12]
 8006d88:	2405      	movs	r4, #5
 8006d8a:	ad01      	add	r5, sp, #4
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	beab      	bkpt	0x00ab
 8006d92:	4604      	mov	r4, r0
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7ff ff85 	bl	8006ca4 <checkerror>
 8006d9a:	b005      	add	sp, #20
 8006d9c:	bd30      	pop	{r4, r5, pc}

08006d9e <_write>:
 8006d9e:	b570      	push	{r4, r5, r6, lr}
 8006da0:	460e      	mov	r6, r1
 8006da2:	4615      	mov	r5, r2
 8006da4:	f7ff ff56 	bl	8006c54 <findslot>
 8006da8:	4604      	mov	r4, r0
 8006daa:	b930      	cbnz	r0, 8006dba <_write+0x1c>
 8006dac:	f000 fc4a 	bl	8007644 <__errno>
 8006db0:	2309      	movs	r3, #9
 8006db2:	6003      	str	r3, [r0, #0]
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	bd70      	pop	{r4, r5, r6, pc}
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	f7ff ffdd 	bl	8006d7e <_swiwrite>
 8006dc4:	1e03      	subs	r3, r0, #0
 8006dc6:	dbf5      	blt.n	8006db4 <_write+0x16>
 8006dc8:	6862      	ldr	r2, [r4, #4]
 8006dca:	1ae8      	subs	r0, r5, r3
 8006dcc:	4402      	add	r2, r0
 8006dce:	42ab      	cmp	r3, r5
 8006dd0:	6062      	str	r2, [r4, #4]
 8006dd2:	d1f1      	bne.n	8006db8 <_write+0x1a>
 8006dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f7ff bf55 	b.w	8006c88 <error>

08006dde <_swiclose>:
 8006dde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006de0:	2402      	movs	r4, #2
 8006de2:	9001      	str	r0, [sp, #4]
 8006de4:	ad01      	add	r5, sp, #4
 8006de6:	4620      	mov	r0, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	beab      	bkpt	0x00ab
 8006dec:	4604      	mov	r4, r0
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff ff58 	bl	8006ca4 <checkerror>
 8006df4:	b003      	add	sp, #12
 8006df6:	bd30      	pop	{r4, r5, pc}

08006df8 <_close>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	f7ff ff2a 	bl	8006c54 <findslot>
 8006e00:	4604      	mov	r4, r0
 8006e02:	b930      	cbnz	r0, 8006e12 <_close+0x1a>
 8006e04:	f000 fc1e 	bl	8007644 <__errno>
 8006e08:	2309      	movs	r3, #9
 8006e0a:	6003      	str	r3, [r0, #0]
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	3d01      	subs	r5, #1
 8006e14:	2d01      	cmp	r5, #1
 8006e16:	d809      	bhi.n	8006e2c <_close+0x34>
 8006e18:	4b09      	ldr	r3, [pc, #36]	@ (8006e40 <_close+0x48>)
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d104      	bne.n	8006e2c <_close+0x34>
 8006e22:	f04f 33ff 	mov.w	r3, #4294967295
 8006e26:	6003      	str	r3, [r0, #0]
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e7f1      	b.n	8006e10 <_close+0x18>
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	f7ff ffd6 	bl	8006dde <_swiclose>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d1ec      	bne.n	8006e10 <_close+0x18>
 8006e36:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	e7e8      	b.n	8006e10 <_close+0x18>
 8006e3e:	bf00      	nop
 8006e40:	200042b8 	.word	0x200042b8

08006e44 <_swistat>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	460c      	mov	r4, r1
 8006e48:	f7ff ff04 	bl	8006c54 <findslot>
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	b930      	cbnz	r0, 8006e5e <_swistat+0x1a>
 8006e50:	f000 fbf8 	bl	8007644 <__errno>
 8006e54:	2309      	movs	r3, #9
 8006e56:	6003      	str	r3, [r0, #0]
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	bd70      	pop	{r4, r5, r6, pc}
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006e64:	6063      	str	r3, [r4, #4]
 8006e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e6a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006e6c:	260c      	movs	r6, #12
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4629      	mov	r1, r5
 8006e72:	beab      	bkpt	0x00ab
 8006e74:	4605      	mov	r5, r0
 8006e76:	4628      	mov	r0, r5
 8006e78:	f7ff ff14 	bl	8006ca4 <checkerror>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d0eb      	beq.n	8006e58 <_swistat+0x14>
 8006e80:	6120      	str	r0, [r4, #16]
 8006e82:	2000      	movs	r0, #0
 8006e84:	e7ea      	b.n	8006e5c <_swistat+0x18>

08006e86 <_fstat>:
 8006e86:	460b      	mov	r3, r1
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	2258      	movs	r2, #88	@ 0x58
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fb88 	bl	80075a6 <memset>
 8006e96:	4601      	mov	r1, r0
 8006e98:	4620      	mov	r0, r4
 8006e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9e:	f7ff bfd1 	b.w	8006e44 <_swistat>

08006ea2 <_stat>:
 8006ea2:	b538      	push	{r3, r4, r5, lr}
 8006ea4:	460d      	mov	r5, r1
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	2258      	movs	r2, #88	@ 0x58
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 fb7a 	bl	80075a6 <memset>
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	f000 f811 	bl	8006edc <_swiopen>
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	d00b      	beq.n	8006ed8 <_stat+0x36>
 8006ec0:	686b      	ldr	r3, [r5, #4]
 8006ec2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006ec6:	606b      	str	r3, [r5, #4]
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7ff ffbb 	bl	8006e44 <_swistat>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f7ff ff91 	bl	8006df8 <_close>
 8006ed6:	462c      	mov	r4, r5
 8006ed8:	4620      	mov	r0, r4
 8006eda:	bd38      	pop	{r3, r4, r5, pc}

08006edc <_swiopen>:
 8006edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8006f8c <_swiopen+0xb0>
 8006ee4:	b096      	sub	sp, #88	@ 0x58
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	460e      	mov	r6, r1
 8006eea:	2400      	movs	r4, #0
 8006eec:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006ef6:	d032      	beq.n	8006f5e <_swiopen+0x82>
 8006ef8:	3401      	adds	r4, #1
 8006efa:	2c14      	cmp	r4, #20
 8006efc:	d1f6      	bne.n	8006eec <_swiopen+0x10>
 8006efe:	f000 fba1 	bl	8007644 <__errno>
 8006f02:	2318      	movs	r3, #24
 8006f04:	e03a      	b.n	8006f7c <_swiopen+0xa0>
 8006f06:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006f0a:	f240 6301 	movw	r3, #1537	@ 0x601
 8006f0e:	07b2      	lsls	r2, r6, #30
 8006f10:	bf48      	it	mi
 8006f12:	f045 0502 	orrmi.w	r5, r5, #2
 8006f16:	421e      	tst	r6, r3
 8006f18:	bf18      	it	ne
 8006f1a:	f045 0504 	orrne.w	r5, r5, #4
 8006f1e:	0733      	lsls	r3, r6, #28
 8006f20:	bf48      	it	mi
 8006f22:	f025 0504 	bicmi.w	r5, r5, #4
 8006f26:	4638      	mov	r0, r7
 8006f28:	bf48      	it	mi
 8006f2a:	f045 0508 	orrmi.w	r5, r5, #8
 8006f2e:	9700      	str	r7, [sp, #0]
 8006f30:	f7f9 f96e 	bl	8000210 <strlen>
 8006f34:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006f38:	2501      	movs	r5, #1
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	beab      	bkpt	0x00ab
 8006f40:	4605      	mov	r5, r0
 8006f42:	2d00      	cmp	r5, #0
 8006f44:	db06      	blt.n	8006f54 <_swiopen+0x78>
 8006f46:	44c8      	add	r8, r9
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8006f4e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f52:	e016      	b.n	8006f82 <_swiopen+0xa6>
 8006f54:	4628      	mov	r0, r5
 8006f56:	f7ff fe97 	bl	8006c88 <error>
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	e011      	b.n	8006f82 <_swiopen+0xa6>
 8006f5e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006f62:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f66:	46ea      	mov	sl, sp
 8006f68:	d1cd      	bne.n	8006f06 <_swiopen+0x2a>
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f7ff ff98 	bl	8006ea2 <_stat>
 8006f72:	3001      	adds	r0, #1
 8006f74:	d0c7      	beq.n	8006f06 <_swiopen+0x2a>
 8006f76:	f000 fb65 	bl	8007644 <__errno>
 8006f7a:	2311      	movs	r3, #17
 8006f7c:	6003      	str	r3, [r0, #0]
 8006f7e:	f04f 34ff 	mov.w	r4, #4294967295
 8006f82:	4620      	mov	r0, r4
 8006f84:	b016      	add	sp, #88	@ 0x58
 8006f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8a:	bf00      	nop
 8006f8c:	200042b8 	.word	0x200042b8

08006f90 <_get_semihosting_exts>:
 8006f90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	4829      	ldr	r0, [pc, #164]	@ (8007040 <_get_semihosting_exts+0xb0>)
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4615      	mov	r5, r2
 8006f9e:	f7ff ff9d 	bl	8006edc <_swiopen>
 8006fa2:	462a      	mov	r2, r5
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f000 fafc 	bl	80075a6 <memset>
 8006fae:	1c63      	adds	r3, r4, #1
 8006fb0:	d014      	beq.n	8006fdc <_get_semihosting_exts+0x4c>
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7ff fe4e 	bl	8006c54 <findslot>
 8006fb8:	f04f 080c 	mov.w	r8, #12
 8006fbc:	4681      	mov	r9, r0
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	beab      	bkpt	0x00ab
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	f7ff fe6c 	bl	8006ca4 <checkerror>
 8006fcc:	2803      	cmp	r0, #3
 8006fce:	dd02      	ble.n	8006fd6 <_get_semihosting_exts+0x46>
 8006fd0:	1ec3      	subs	r3, r0, #3
 8006fd2:	42ab      	cmp	r3, r5
 8006fd4:	dc07      	bgt.n	8006fe6 <_get_semihosting_exts+0x56>
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f7ff ff0e 	bl	8006df8 <_close>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	b003      	add	sp, #12
 8006fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	eb0d 0102 	add.w	r1, sp, r2
 8006fec:	4620      	mov	r0, r4
 8006fee:	f7ff fe6e 	bl	8006cce <_read>
 8006ff2:	2803      	cmp	r0, #3
 8006ff4:	ddef      	ble.n	8006fd6 <_get_semihosting_exts+0x46>
 8006ff6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006ffa:	2b53      	cmp	r3, #83	@ 0x53
 8006ffc:	d1eb      	bne.n	8006fd6 <_get_semihosting_exts+0x46>
 8006ffe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007002:	2b48      	cmp	r3, #72	@ 0x48
 8007004:	d1e7      	bne.n	8006fd6 <_get_semihosting_exts+0x46>
 8007006:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800700a:	2b46      	cmp	r3, #70	@ 0x46
 800700c:	d1e3      	bne.n	8006fd6 <_get_semihosting_exts+0x46>
 800700e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007012:	2b42      	cmp	r3, #66	@ 0x42
 8007014:	d1df      	bne.n	8006fd6 <_get_semihosting_exts+0x46>
 8007016:	2201      	movs	r2, #1
 8007018:	4639      	mov	r1, r7
 800701a:	4620      	mov	r0, r4
 800701c:	f7ff fe71 	bl	8006d02 <_swilseek>
 8007020:	2800      	cmp	r0, #0
 8007022:	dbd8      	blt.n	8006fd6 <_get_semihosting_exts+0x46>
 8007024:	462a      	mov	r2, r5
 8007026:	4631      	mov	r1, r6
 8007028:	4620      	mov	r0, r4
 800702a:	f7ff fe50 	bl	8006cce <_read>
 800702e:	4605      	mov	r5, r0
 8007030:	4620      	mov	r0, r4
 8007032:	f7ff fee1 	bl	8006df8 <_close>
 8007036:	4628      	mov	r0, r5
 8007038:	f7ff fe34 	bl	8006ca4 <checkerror>
 800703c:	e7d0      	b.n	8006fe0 <_get_semihosting_exts+0x50>
 800703e:	bf00      	nop
 8007040:	08008abc 	.word	0x08008abc

08007044 <initialise_semihosting_exts>:
 8007044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007046:	4d0a      	ldr	r5, [pc, #40]	@ (8007070 <initialise_semihosting_exts+0x2c>)
 8007048:	4c0a      	ldr	r4, [pc, #40]	@ (8007074 <initialise_semihosting_exts+0x30>)
 800704a:	2100      	movs	r1, #0
 800704c:	2201      	movs	r2, #1
 800704e:	a801      	add	r0, sp, #4
 8007050:	6029      	str	r1, [r5, #0]
 8007052:	6022      	str	r2, [r4, #0]
 8007054:	f7ff ff9c 	bl	8006f90 <_get_semihosting_exts>
 8007058:	2800      	cmp	r0, #0
 800705a:	dd07      	ble.n	800706c <initialise_semihosting_exts+0x28>
 800705c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007060:	f003 0201 	and.w	r2, r3, #1
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	b003      	add	sp, #12
 800706e:	bd30      	pop	{r4, r5, pc}
 8007070:	2000002c 	.word	0x2000002c
 8007074:	20000028 	.word	0x20000028

08007078 <_has_ext_stdout_stderr>:
 8007078:	b510      	push	{r4, lr}
 800707a:	4c04      	ldr	r4, [pc, #16]	@ (800708c <_has_ext_stdout_stderr+0x14>)
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	da01      	bge.n	8007086 <_has_ext_stdout_stderr+0xe>
 8007082:	f7ff ffdf 	bl	8007044 <initialise_semihosting_exts>
 8007086:	6820      	ldr	r0, [r4, #0]
 8007088:	bd10      	pop	{r4, pc}
 800708a:	bf00      	nop
 800708c:	20000028 	.word	0x20000028

08007090 <initialise_monitor_handles>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	b085      	sub	sp, #20
 8007096:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8007148 <initialise_monitor_handles+0xb8>
 800709a:	f8cd 9004 	str.w	r9, [sp, #4]
 800709e:	2303      	movs	r3, #3
 80070a0:	2400      	movs	r4, #0
 80070a2:	9303      	str	r3, [sp, #12]
 80070a4:	af01      	add	r7, sp, #4
 80070a6:	9402      	str	r4, [sp, #8]
 80070a8:	2501      	movs	r5, #1
 80070aa:	4628      	mov	r0, r5
 80070ac:	4639      	mov	r1, r7
 80070ae:	beab      	bkpt	0x00ab
 80070b0:	4605      	mov	r5, r0
 80070b2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800714c <initialise_monitor_handles+0xbc>
 80070b6:	4623      	mov	r3, r4
 80070b8:	4c20      	ldr	r4, [pc, #128]	@ (800713c <initialise_monitor_handles+0xac>)
 80070ba:	f8c8 5000 	str.w	r5, [r8]
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80070c6:	3301      	adds	r3, #1
 80070c8:	2b14      	cmp	r3, #20
 80070ca:	d1fa      	bne.n	80070c2 <initialise_monitor_handles+0x32>
 80070cc:	f7ff ffd4 	bl	8007078 <_has_ext_stdout_stderr>
 80070d0:	4d1b      	ldr	r5, [pc, #108]	@ (8007140 <initialise_monitor_handles+0xb0>)
 80070d2:	b1d0      	cbz	r0, 800710a <initialise_monitor_handles+0x7a>
 80070d4:	f04f 0a03 	mov.w	sl, #3
 80070d8:	2304      	movs	r3, #4
 80070da:	f8cd 9004 	str.w	r9, [sp, #4]
 80070de:	2601      	movs	r6, #1
 80070e0:	f8cd a00c 	str.w	sl, [sp, #12]
 80070e4:	9302      	str	r3, [sp, #8]
 80070e6:	4630      	mov	r0, r6
 80070e8:	4639      	mov	r1, r7
 80070ea:	beab      	bkpt	0x00ab
 80070ec:	4683      	mov	fp, r0
 80070ee:	4b15      	ldr	r3, [pc, #84]	@ (8007144 <initialise_monitor_handles+0xb4>)
 80070f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80070f4:	f8c3 b000 	str.w	fp, [r3]
 80070f8:	2308      	movs	r3, #8
 80070fa:	f8cd a00c 	str.w	sl, [sp, #12]
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	beab      	bkpt	0x00ab
 8007106:	4606      	mov	r6, r0
 8007108:	602e      	str	r6, [r5, #0]
 800710a:	682b      	ldr	r3, [r5, #0]
 800710c:	3301      	adds	r3, #1
 800710e:	bf02      	ittt	eq
 8007110:	4b0c      	ldreq	r3, [pc, #48]	@ (8007144 <initialise_monitor_handles+0xb4>)
 8007112:	681b      	ldreq	r3, [r3, #0]
 8007114:	602b      	streq	r3, [r5, #0]
 8007116:	2600      	movs	r6, #0
 8007118:	f8d8 3000 	ldr.w	r3, [r8]
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	6066      	str	r6, [r4, #4]
 8007120:	f7ff ffaa 	bl	8007078 <_has_ext_stdout_stderr>
 8007124:	b130      	cbz	r0, 8007134 <initialise_monitor_handles+0xa4>
 8007126:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <initialise_monitor_handles+0xb4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007134:	b005      	add	sp, #20
 8007136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713a:	bf00      	nop
 800713c:	200042b8 	.word	0x200042b8
 8007140:	200042ac 	.word	0x200042ac
 8007144:	200042b0 	.word	0x200042b0
 8007148:	08008ad2 	.word	0x08008ad2
 800714c:	200042b4 	.word	0x200042b4

08007150 <_isatty>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	f7ff fd7f 	bl	8006c54 <findslot>
 8007156:	2409      	movs	r4, #9
 8007158:	4605      	mov	r5, r0
 800715a:	b920      	cbnz	r0, 8007166 <_isatty+0x16>
 800715c:	f000 fa72 	bl	8007644 <__errno>
 8007160:	6004      	str	r4, [r0, #0]
 8007162:	2000      	movs	r0, #0
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	4620      	mov	r0, r4
 8007168:	4629      	mov	r1, r5
 800716a:	beab      	bkpt	0x00ab
 800716c:	4604      	mov	r4, r0
 800716e:	2c01      	cmp	r4, #1
 8007170:	4620      	mov	r0, r4
 8007172:	d0f7      	beq.n	8007164 <_isatty+0x14>
 8007174:	f000 fa66 	bl	8007644 <__errno>
 8007178:	2513      	movs	r5, #19
 800717a:	4604      	mov	r4, r0
 800717c:	2600      	movs	r6, #0
 800717e:	4628      	mov	r0, r5
 8007180:	4631      	mov	r1, r6
 8007182:	beab      	bkpt	0x00ab
 8007184:	4605      	mov	r5, r0
 8007186:	6025      	str	r5, [r4, #0]
 8007188:	e7eb      	b.n	8007162 <_isatty+0x12>
	...

0800718c <__sflush_r>:
 800718c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	0716      	lsls	r6, r2, #28
 8007196:	4605      	mov	r5, r0
 8007198:	460c      	mov	r4, r1
 800719a:	d454      	bmi.n	8007246 <__sflush_r+0xba>
 800719c:	684b      	ldr	r3, [r1, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dc02      	bgt.n	80071a8 <__sflush_r+0x1c>
 80071a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	dd48      	ble.n	800723a <__sflush_r+0xae>
 80071a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	d045      	beq.n	800723a <__sflush_r+0xae>
 80071ae:	2300      	movs	r3, #0
 80071b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071b4:	682f      	ldr	r7, [r5, #0]
 80071b6:	6a21      	ldr	r1, [r4, #32]
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	d030      	beq.n	800721e <__sflush_r+0x92>
 80071bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	0759      	lsls	r1, r3, #29
 80071c2:	d505      	bpl.n	80071d0 <__sflush_r+0x44>
 80071c4:	6863      	ldr	r3, [r4, #4]
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071ca:	b10b      	cbz	r3, 80071d0 <__sflush_r+0x44>
 80071cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071ce:	1ad2      	subs	r2, r2, r3
 80071d0:	2300      	movs	r3, #0
 80071d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071d4:	6a21      	ldr	r1, [r4, #32]
 80071d6:	4628      	mov	r0, r5
 80071d8:	47b0      	blx	r6
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	d106      	bne.n	80071ee <__sflush_r+0x62>
 80071e0:	6829      	ldr	r1, [r5, #0]
 80071e2:	291d      	cmp	r1, #29
 80071e4:	d82b      	bhi.n	800723e <__sflush_r+0xb2>
 80071e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007290 <__sflush_r+0x104>)
 80071e8:	40ca      	lsrs	r2, r1
 80071ea:	07d6      	lsls	r6, r2, #31
 80071ec:	d527      	bpl.n	800723e <__sflush_r+0xb2>
 80071ee:	2200      	movs	r2, #0
 80071f0:	6062      	str	r2, [r4, #4]
 80071f2:	04d9      	lsls	r1, r3, #19
 80071f4:	6922      	ldr	r2, [r4, #16]
 80071f6:	6022      	str	r2, [r4, #0]
 80071f8:	d504      	bpl.n	8007204 <__sflush_r+0x78>
 80071fa:	1c42      	adds	r2, r0, #1
 80071fc:	d101      	bne.n	8007202 <__sflush_r+0x76>
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	b903      	cbnz	r3, 8007204 <__sflush_r+0x78>
 8007202:	6560      	str	r0, [r4, #84]	@ 0x54
 8007204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007206:	602f      	str	r7, [r5, #0]
 8007208:	b1b9      	cbz	r1, 800723a <__sflush_r+0xae>
 800720a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800720e:	4299      	cmp	r1, r3
 8007210:	d002      	beq.n	8007218 <__sflush_r+0x8c>
 8007212:	4628      	mov	r0, r5
 8007214:	f000 fa52 	bl	80076bc <_free_r>
 8007218:	2300      	movs	r3, #0
 800721a:	6363      	str	r3, [r4, #52]	@ 0x34
 800721c:	e00d      	b.n	800723a <__sflush_r+0xae>
 800721e:	2301      	movs	r3, #1
 8007220:	4628      	mov	r0, r5
 8007222:	47b0      	blx	r6
 8007224:	4602      	mov	r2, r0
 8007226:	1c50      	adds	r0, r2, #1
 8007228:	d1c9      	bne.n	80071be <__sflush_r+0x32>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0c6      	beq.n	80071be <__sflush_r+0x32>
 8007230:	2b1d      	cmp	r3, #29
 8007232:	d001      	beq.n	8007238 <__sflush_r+0xac>
 8007234:	2b16      	cmp	r3, #22
 8007236:	d11e      	bne.n	8007276 <__sflush_r+0xea>
 8007238:	602f      	str	r7, [r5, #0]
 800723a:	2000      	movs	r0, #0
 800723c:	e022      	b.n	8007284 <__sflush_r+0xf8>
 800723e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007242:	b21b      	sxth	r3, r3
 8007244:	e01b      	b.n	800727e <__sflush_r+0xf2>
 8007246:	690f      	ldr	r7, [r1, #16]
 8007248:	2f00      	cmp	r7, #0
 800724a:	d0f6      	beq.n	800723a <__sflush_r+0xae>
 800724c:	0793      	lsls	r3, r2, #30
 800724e:	680e      	ldr	r6, [r1, #0]
 8007250:	bf08      	it	eq
 8007252:	694b      	ldreq	r3, [r1, #20]
 8007254:	600f      	str	r7, [r1, #0]
 8007256:	bf18      	it	ne
 8007258:	2300      	movne	r3, #0
 800725a:	eba6 0807 	sub.w	r8, r6, r7
 800725e:	608b      	str	r3, [r1, #8]
 8007260:	f1b8 0f00 	cmp.w	r8, #0
 8007264:	dde9      	ble.n	800723a <__sflush_r+0xae>
 8007266:	6a21      	ldr	r1, [r4, #32]
 8007268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800726a:	4643      	mov	r3, r8
 800726c:	463a      	mov	r2, r7
 800726e:	4628      	mov	r0, r5
 8007270:	47b0      	blx	r6
 8007272:	2800      	cmp	r0, #0
 8007274:	dc08      	bgt.n	8007288 <__sflush_r+0xfc>
 8007276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007288:	4407      	add	r7, r0
 800728a:	eba8 0800 	sub.w	r8, r8, r0
 800728e:	e7e7      	b.n	8007260 <__sflush_r+0xd4>
 8007290:	20400001 	.word	0x20400001

08007294 <_fflush_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	690b      	ldr	r3, [r1, #16]
 8007298:	4605      	mov	r5, r0
 800729a:	460c      	mov	r4, r1
 800729c:	b913      	cbnz	r3, 80072a4 <_fflush_r+0x10>
 800729e:	2500      	movs	r5, #0
 80072a0:	4628      	mov	r0, r5
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	b118      	cbz	r0, 80072ae <_fflush_r+0x1a>
 80072a6:	6a03      	ldr	r3, [r0, #32]
 80072a8:	b90b      	cbnz	r3, 80072ae <_fflush_r+0x1a>
 80072aa:	f000 f8bb 	bl	8007424 <__sinit>
 80072ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f3      	beq.n	800729e <_fflush_r+0xa>
 80072b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072b8:	07d0      	lsls	r0, r2, #31
 80072ba:	d404      	bmi.n	80072c6 <_fflush_r+0x32>
 80072bc:	0599      	lsls	r1, r3, #22
 80072be:	d402      	bmi.n	80072c6 <_fflush_r+0x32>
 80072c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072c2:	f000 f9ea 	bl	800769a <__retarget_lock_acquire_recursive>
 80072c6:	4628      	mov	r0, r5
 80072c8:	4621      	mov	r1, r4
 80072ca:	f7ff ff5f 	bl	800718c <__sflush_r>
 80072ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072d0:	07da      	lsls	r2, r3, #31
 80072d2:	4605      	mov	r5, r0
 80072d4:	d4e4      	bmi.n	80072a0 <_fflush_r+0xc>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	059b      	lsls	r3, r3, #22
 80072da:	d4e1      	bmi.n	80072a0 <_fflush_r+0xc>
 80072dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072de:	f000 f9dd 	bl	800769c <__retarget_lock_release_recursive>
 80072e2:	e7dd      	b.n	80072a0 <_fflush_r+0xc>

080072e4 <fflush>:
 80072e4:	4601      	mov	r1, r0
 80072e6:	b920      	cbnz	r0, 80072f2 <fflush+0xe>
 80072e8:	4a04      	ldr	r2, [pc, #16]	@ (80072fc <fflush+0x18>)
 80072ea:	4905      	ldr	r1, [pc, #20]	@ (8007300 <fflush+0x1c>)
 80072ec:	4805      	ldr	r0, [pc, #20]	@ (8007304 <fflush+0x20>)
 80072ee:	f000 b8b1 	b.w	8007454 <_fwalk_sglue>
 80072f2:	4b05      	ldr	r3, [pc, #20]	@ (8007308 <fflush+0x24>)
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	f7ff bfcd 	b.w	8007294 <_fflush_r>
 80072fa:	bf00      	nop
 80072fc:	20000030 	.word	0x20000030
 8007300:	08007295 	.word	0x08007295
 8007304:	20000040 	.word	0x20000040
 8007308:	2000003c 	.word	0x2000003c

0800730c <std>:
 800730c:	2300      	movs	r3, #0
 800730e:	b510      	push	{r4, lr}
 8007310:	4604      	mov	r4, r0
 8007312:	e9c0 3300 	strd	r3, r3, [r0]
 8007316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800731a:	6083      	str	r3, [r0, #8]
 800731c:	8181      	strh	r1, [r0, #12]
 800731e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007320:	81c2      	strh	r2, [r0, #14]
 8007322:	6183      	str	r3, [r0, #24]
 8007324:	4619      	mov	r1, r3
 8007326:	2208      	movs	r2, #8
 8007328:	305c      	adds	r0, #92	@ 0x5c
 800732a:	f000 f93c 	bl	80075a6 <memset>
 800732e:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <std+0x58>)
 8007330:	6263      	str	r3, [r4, #36]	@ 0x24
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <std+0x5c>)
 8007334:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007336:	4b0d      	ldr	r3, [pc, #52]	@ (800736c <std+0x60>)
 8007338:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <std+0x64>)
 800733c:	6323      	str	r3, [r4, #48]	@ 0x30
 800733e:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <std+0x68>)
 8007340:	6224      	str	r4, [r4, #32]
 8007342:	429c      	cmp	r4, r3
 8007344:	d006      	beq.n	8007354 <std+0x48>
 8007346:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800734a:	4294      	cmp	r4, r2
 800734c:	d002      	beq.n	8007354 <std+0x48>
 800734e:	33d0      	adds	r3, #208	@ 0xd0
 8007350:	429c      	cmp	r4, r3
 8007352:	d105      	bne.n	8007360 <std+0x54>
 8007354:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735c:	f000 b99c 	b.w	8007698 <__retarget_lock_init_recursive>
 8007360:	bd10      	pop	{r4, pc}
 8007362:	bf00      	nop
 8007364:	08007521 	.word	0x08007521
 8007368:	08007543 	.word	0x08007543
 800736c:	0800757b 	.word	0x0800757b
 8007370:	0800759f 	.word	0x0800759f
 8007374:	20004358 	.word	0x20004358

08007378 <stdio_exit_handler>:
 8007378:	4a02      	ldr	r2, [pc, #8]	@ (8007384 <stdio_exit_handler+0xc>)
 800737a:	4903      	ldr	r1, [pc, #12]	@ (8007388 <stdio_exit_handler+0x10>)
 800737c:	4803      	ldr	r0, [pc, #12]	@ (800738c <stdio_exit_handler+0x14>)
 800737e:	f000 b869 	b.w	8007454 <_fwalk_sglue>
 8007382:	bf00      	nop
 8007384:	20000030 	.word	0x20000030
 8007388:	08007295 	.word	0x08007295
 800738c:	20000040 	.word	0x20000040

08007390 <cleanup_stdio>:
 8007390:	6841      	ldr	r1, [r0, #4]
 8007392:	4b0c      	ldr	r3, [pc, #48]	@ (80073c4 <cleanup_stdio+0x34>)
 8007394:	4299      	cmp	r1, r3
 8007396:	b510      	push	{r4, lr}
 8007398:	4604      	mov	r4, r0
 800739a:	d001      	beq.n	80073a0 <cleanup_stdio+0x10>
 800739c:	f7ff ff7a 	bl	8007294 <_fflush_r>
 80073a0:	68a1      	ldr	r1, [r4, #8]
 80073a2:	4b09      	ldr	r3, [pc, #36]	@ (80073c8 <cleanup_stdio+0x38>)
 80073a4:	4299      	cmp	r1, r3
 80073a6:	d002      	beq.n	80073ae <cleanup_stdio+0x1e>
 80073a8:	4620      	mov	r0, r4
 80073aa:	f7ff ff73 	bl	8007294 <_fflush_r>
 80073ae:	68e1      	ldr	r1, [r4, #12]
 80073b0:	4b06      	ldr	r3, [pc, #24]	@ (80073cc <cleanup_stdio+0x3c>)
 80073b2:	4299      	cmp	r1, r3
 80073b4:	d004      	beq.n	80073c0 <cleanup_stdio+0x30>
 80073b6:	4620      	mov	r0, r4
 80073b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073bc:	f7ff bf6a 	b.w	8007294 <_fflush_r>
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	bf00      	nop
 80073c4:	20004358 	.word	0x20004358
 80073c8:	200043c0 	.word	0x200043c0
 80073cc:	20004428 	.word	0x20004428

080073d0 <global_stdio_init.part.0>:
 80073d0:	b510      	push	{r4, lr}
 80073d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007400 <global_stdio_init.part.0+0x30>)
 80073d4:	4c0b      	ldr	r4, [pc, #44]	@ (8007404 <global_stdio_init.part.0+0x34>)
 80073d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007408 <global_stdio_init.part.0+0x38>)
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	4620      	mov	r0, r4
 80073dc:	2200      	movs	r2, #0
 80073de:	2104      	movs	r1, #4
 80073e0:	f7ff ff94 	bl	800730c <std>
 80073e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073e8:	2201      	movs	r2, #1
 80073ea:	2109      	movs	r1, #9
 80073ec:	f7ff ff8e 	bl	800730c <std>
 80073f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073f4:	2202      	movs	r2, #2
 80073f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073fa:	2112      	movs	r1, #18
 80073fc:	f7ff bf86 	b.w	800730c <std>
 8007400:	20004490 	.word	0x20004490
 8007404:	20004358 	.word	0x20004358
 8007408:	08007379 	.word	0x08007379

0800740c <__sfp_lock_acquire>:
 800740c:	4801      	ldr	r0, [pc, #4]	@ (8007414 <__sfp_lock_acquire+0x8>)
 800740e:	f000 b944 	b.w	800769a <__retarget_lock_acquire_recursive>
 8007412:	bf00      	nop
 8007414:	20004499 	.word	0x20004499

08007418 <__sfp_lock_release>:
 8007418:	4801      	ldr	r0, [pc, #4]	@ (8007420 <__sfp_lock_release+0x8>)
 800741a:	f000 b93f 	b.w	800769c <__retarget_lock_release_recursive>
 800741e:	bf00      	nop
 8007420:	20004499 	.word	0x20004499

08007424 <__sinit>:
 8007424:	b510      	push	{r4, lr}
 8007426:	4604      	mov	r4, r0
 8007428:	f7ff fff0 	bl	800740c <__sfp_lock_acquire>
 800742c:	6a23      	ldr	r3, [r4, #32]
 800742e:	b11b      	cbz	r3, 8007438 <__sinit+0x14>
 8007430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007434:	f7ff bff0 	b.w	8007418 <__sfp_lock_release>
 8007438:	4b04      	ldr	r3, [pc, #16]	@ (800744c <__sinit+0x28>)
 800743a:	6223      	str	r3, [r4, #32]
 800743c:	4b04      	ldr	r3, [pc, #16]	@ (8007450 <__sinit+0x2c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1f5      	bne.n	8007430 <__sinit+0xc>
 8007444:	f7ff ffc4 	bl	80073d0 <global_stdio_init.part.0>
 8007448:	e7f2      	b.n	8007430 <__sinit+0xc>
 800744a:	bf00      	nop
 800744c:	08007391 	.word	0x08007391
 8007450:	20004490 	.word	0x20004490

08007454 <_fwalk_sglue>:
 8007454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007458:	4607      	mov	r7, r0
 800745a:	4688      	mov	r8, r1
 800745c:	4614      	mov	r4, r2
 800745e:	2600      	movs	r6, #0
 8007460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007464:	f1b9 0901 	subs.w	r9, r9, #1
 8007468:	d505      	bpl.n	8007476 <_fwalk_sglue+0x22>
 800746a:	6824      	ldr	r4, [r4, #0]
 800746c:	2c00      	cmp	r4, #0
 800746e:	d1f7      	bne.n	8007460 <_fwalk_sglue+0xc>
 8007470:	4630      	mov	r0, r6
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007476:	89ab      	ldrh	r3, [r5, #12]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d907      	bls.n	800748c <_fwalk_sglue+0x38>
 800747c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007480:	3301      	adds	r3, #1
 8007482:	d003      	beq.n	800748c <_fwalk_sglue+0x38>
 8007484:	4629      	mov	r1, r5
 8007486:	4638      	mov	r0, r7
 8007488:	47c0      	blx	r8
 800748a:	4306      	orrs	r6, r0
 800748c:	3568      	adds	r5, #104	@ 0x68
 800748e:	e7e9      	b.n	8007464 <_fwalk_sglue+0x10>

08007490 <iprintf>:
 8007490:	b40f      	push	{r0, r1, r2, r3}
 8007492:	b507      	push	{r0, r1, r2, lr}
 8007494:	4906      	ldr	r1, [pc, #24]	@ (80074b0 <iprintf+0x20>)
 8007496:	ab04      	add	r3, sp, #16
 8007498:	6808      	ldr	r0, [r1, #0]
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	6881      	ldr	r1, [r0, #8]
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	f000 fb85 	bl	8007bb0 <_vfiprintf_r>
 80074a6:	b003      	add	sp, #12
 80074a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ac:	b004      	add	sp, #16
 80074ae:	4770      	bx	lr
 80074b0:	2000003c 	.word	0x2000003c

080074b4 <sniprintf>:
 80074b4:	b40c      	push	{r2, r3}
 80074b6:	b530      	push	{r4, r5, lr}
 80074b8:	4b18      	ldr	r3, [pc, #96]	@ (800751c <sniprintf+0x68>)
 80074ba:	1e0c      	subs	r4, r1, #0
 80074bc:	681d      	ldr	r5, [r3, #0]
 80074be:	b09d      	sub	sp, #116	@ 0x74
 80074c0:	da08      	bge.n	80074d4 <sniprintf+0x20>
 80074c2:	238b      	movs	r3, #139	@ 0x8b
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ca:	b01d      	add	sp, #116	@ 0x74
 80074cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d0:	b002      	add	sp, #8
 80074d2:	4770      	bx	lr
 80074d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80074d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80074e2:	bf14      	ite	ne
 80074e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074e8:	4623      	moveq	r3, r4
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	9307      	str	r3, [sp, #28]
 80074ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074f2:	9002      	str	r0, [sp, #8]
 80074f4:	9006      	str	r0, [sp, #24]
 80074f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80074fc:	ab21      	add	r3, sp, #132	@ 0x84
 80074fe:	a902      	add	r1, sp, #8
 8007500:	4628      	mov	r0, r5
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	f000 fa2e 	bl	8007964 <_svfiprintf_r>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	bfbc      	itt	lt
 800750c:	238b      	movlt	r3, #139	@ 0x8b
 800750e:	602b      	strlt	r3, [r5, #0]
 8007510:	2c00      	cmp	r4, #0
 8007512:	d0da      	beq.n	80074ca <sniprintf+0x16>
 8007514:	9b02      	ldr	r3, [sp, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e7d6      	b.n	80074ca <sniprintf+0x16>
 800751c:	2000003c 	.word	0x2000003c

08007520 <__sread>:
 8007520:	b510      	push	{r4, lr}
 8007522:	460c      	mov	r4, r1
 8007524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007528:	f000 f868 	bl	80075fc <_read_r>
 800752c:	2800      	cmp	r0, #0
 800752e:	bfab      	itete	ge
 8007530:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007532:	89a3      	ldrhlt	r3, [r4, #12]
 8007534:	181b      	addge	r3, r3, r0
 8007536:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800753a:	bfac      	ite	ge
 800753c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800753e:	81a3      	strhlt	r3, [r4, #12]
 8007540:	bd10      	pop	{r4, pc}

08007542 <__swrite>:
 8007542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007546:	461f      	mov	r7, r3
 8007548:	898b      	ldrh	r3, [r1, #12]
 800754a:	05db      	lsls	r3, r3, #23
 800754c:	4605      	mov	r5, r0
 800754e:	460c      	mov	r4, r1
 8007550:	4616      	mov	r6, r2
 8007552:	d505      	bpl.n	8007560 <__swrite+0x1e>
 8007554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007558:	2302      	movs	r3, #2
 800755a:	2200      	movs	r2, #0
 800755c:	f000 f83c 	bl	80075d8 <_lseek_r>
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007566:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	4632      	mov	r2, r6
 800756e:	463b      	mov	r3, r7
 8007570:	4628      	mov	r0, r5
 8007572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007576:	f000 b853 	b.w	8007620 <_write_r>

0800757a <__sseek>:
 800757a:	b510      	push	{r4, lr}
 800757c:	460c      	mov	r4, r1
 800757e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007582:	f000 f829 	bl	80075d8 <_lseek_r>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	bf15      	itete	ne
 800758c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800758e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007592:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007596:	81a3      	strheq	r3, [r4, #12]
 8007598:	bf18      	it	ne
 800759a:	81a3      	strhne	r3, [r4, #12]
 800759c:	bd10      	pop	{r4, pc}

0800759e <__sclose>:
 800759e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a2:	f000 b809 	b.w	80075b8 <_close_r>

080075a6 <memset>:
 80075a6:	4402      	add	r2, r0
 80075a8:	4603      	mov	r3, r0
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d100      	bne.n	80075b0 <memset+0xa>
 80075ae:	4770      	bx	lr
 80075b0:	f803 1b01 	strb.w	r1, [r3], #1
 80075b4:	e7f9      	b.n	80075aa <memset+0x4>
	...

080075b8 <_close_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d06      	ldr	r5, [pc, #24]	@ (80075d4 <_close_r+0x1c>)
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7ff fc18 	bl	8006df8 <_close>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_close_r+0x1a>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_close_r+0x1a>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	20004494 	.word	0x20004494

080075d8 <_lseek_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d07      	ldr	r5, [pc, #28]	@ (80075f8 <_lseek_r+0x20>)
 80075dc:	4604      	mov	r4, r0
 80075de:	4608      	mov	r0, r1
 80075e0:	4611      	mov	r1, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	602a      	str	r2, [r5, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	f7ff fbc7 	bl	8006d7a <_lseek>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_lseek_r+0x1e>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_lseek_r+0x1e>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	20004494 	.word	0x20004494

080075fc <_read_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4d07      	ldr	r5, [pc, #28]	@ (800761c <_read_r+0x20>)
 8007600:	4604      	mov	r4, r0
 8007602:	4608      	mov	r0, r1
 8007604:	4611      	mov	r1, r2
 8007606:	2200      	movs	r2, #0
 8007608:	602a      	str	r2, [r5, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f7ff fb5f 	bl	8006cce <_read>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_read_r+0x1e>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b103      	cbz	r3, 800761a <_read_r+0x1e>
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	20004494 	.word	0x20004494

08007620 <_write_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d07      	ldr	r5, [pc, #28]	@ (8007640 <_write_r+0x20>)
 8007624:	4604      	mov	r4, r0
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	2200      	movs	r2, #0
 800762c:	602a      	str	r2, [r5, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	f7ff fbb5 	bl	8006d9e <_write>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_write_r+0x1e>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_write_r+0x1e>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20004494 	.word	0x20004494

08007644 <__errno>:
 8007644:	4b01      	ldr	r3, [pc, #4]	@ (800764c <__errno+0x8>)
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	2000003c 	.word	0x2000003c

08007650 <__libc_init_array>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4d0d      	ldr	r5, [pc, #52]	@ (8007688 <__libc_init_array+0x38>)
 8007654:	4c0d      	ldr	r4, [pc, #52]	@ (800768c <__libc_init_array+0x3c>)
 8007656:	1b64      	subs	r4, r4, r5
 8007658:	10a4      	asrs	r4, r4, #2
 800765a:	2600      	movs	r6, #0
 800765c:	42a6      	cmp	r6, r4
 800765e:	d109      	bne.n	8007674 <__libc_init_array+0x24>
 8007660:	4d0b      	ldr	r5, [pc, #44]	@ (8007690 <__libc_init_array+0x40>)
 8007662:	4c0c      	ldr	r4, [pc, #48]	@ (8007694 <__libc_init_array+0x44>)
 8007664:	f000 fec0 	bl	80083e8 <_init>
 8007668:	1b64      	subs	r4, r4, r5
 800766a:	10a4      	asrs	r4, r4, #2
 800766c:	2600      	movs	r6, #0
 800766e:	42a6      	cmp	r6, r4
 8007670:	d105      	bne.n	800767e <__libc_init_array+0x2e>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	f855 3b04 	ldr.w	r3, [r5], #4
 8007678:	4798      	blx	r3
 800767a:	3601      	adds	r6, #1
 800767c:	e7ee      	b.n	800765c <__libc_init_array+0xc>
 800767e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007682:	4798      	blx	r3
 8007684:	3601      	adds	r6, #1
 8007686:	e7f2      	b.n	800766e <__libc_init_array+0x1e>
 8007688:	08008b14 	.word	0x08008b14
 800768c:	08008b14 	.word	0x08008b14
 8007690:	08008b14 	.word	0x08008b14
 8007694:	08008b18 	.word	0x08008b18

08007698 <__retarget_lock_init_recursive>:
 8007698:	4770      	bx	lr

0800769a <__retarget_lock_acquire_recursive>:
 800769a:	4770      	bx	lr

0800769c <__retarget_lock_release_recursive>:
 800769c:	4770      	bx	lr

0800769e <memcpy>:
 800769e:	440a      	add	r2, r1
 80076a0:	4291      	cmp	r1, r2
 80076a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a6:	d100      	bne.n	80076aa <memcpy+0xc>
 80076a8:	4770      	bx	lr
 80076aa:	b510      	push	{r4, lr}
 80076ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b4:	4291      	cmp	r1, r2
 80076b6:	d1f9      	bne.n	80076ac <memcpy+0xe>
 80076b8:	bd10      	pop	{r4, pc}
	...

080076bc <_free_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4605      	mov	r5, r0
 80076c0:	2900      	cmp	r1, #0
 80076c2:	d041      	beq.n	8007748 <_free_r+0x8c>
 80076c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c8:	1f0c      	subs	r4, r1, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bfb8      	it	lt
 80076ce:	18e4      	addlt	r4, r4, r3
 80076d0:	f000 f8e0 	bl	8007894 <__malloc_lock>
 80076d4:	4a1d      	ldr	r2, [pc, #116]	@ (800774c <_free_r+0x90>)
 80076d6:	6813      	ldr	r3, [r2, #0]
 80076d8:	b933      	cbnz	r3, 80076e8 <_free_r+0x2c>
 80076da:	6063      	str	r3, [r4, #4]
 80076dc:	6014      	str	r4, [r2, #0]
 80076de:	4628      	mov	r0, r5
 80076e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076e4:	f000 b8dc 	b.w	80078a0 <__malloc_unlock>
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	d908      	bls.n	80076fe <_free_r+0x42>
 80076ec:	6820      	ldr	r0, [r4, #0]
 80076ee:	1821      	adds	r1, r4, r0
 80076f0:	428b      	cmp	r3, r1
 80076f2:	bf01      	itttt	eq
 80076f4:	6819      	ldreq	r1, [r3, #0]
 80076f6:	685b      	ldreq	r3, [r3, #4]
 80076f8:	1809      	addeq	r1, r1, r0
 80076fa:	6021      	streq	r1, [r4, #0]
 80076fc:	e7ed      	b.n	80076da <_free_r+0x1e>
 80076fe:	461a      	mov	r2, r3
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	b10b      	cbz	r3, 8007708 <_free_r+0x4c>
 8007704:	42a3      	cmp	r3, r4
 8007706:	d9fa      	bls.n	80076fe <_free_r+0x42>
 8007708:	6811      	ldr	r1, [r2, #0]
 800770a:	1850      	adds	r0, r2, r1
 800770c:	42a0      	cmp	r0, r4
 800770e:	d10b      	bne.n	8007728 <_free_r+0x6c>
 8007710:	6820      	ldr	r0, [r4, #0]
 8007712:	4401      	add	r1, r0
 8007714:	1850      	adds	r0, r2, r1
 8007716:	4283      	cmp	r3, r0
 8007718:	6011      	str	r1, [r2, #0]
 800771a:	d1e0      	bne.n	80076de <_free_r+0x22>
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	6053      	str	r3, [r2, #4]
 8007722:	4408      	add	r0, r1
 8007724:	6010      	str	r0, [r2, #0]
 8007726:	e7da      	b.n	80076de <_free_r+0x22>
 8007728:	d902      	bls.n	8007730 <_free_r+0x74>
 800772a:	230c      	movs	r3, #12
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	e7d6      	b.n	80076de <_free_r+0x22>
 8007730:	6820      	ldr	r0, [r4, #0]
 8007732:	1821      	adds	r1, r4, r0
 8007734:	428b      	cmp	r3, r1
 8007736:	bf04      	itt	eq
 8007738:	6819      	ldreq	r1, [r3, #0]
 800773a:	685b      	ldreq	r3, [r3, #4]
 800773c:	6063      	str	r3, [r4, #4]
 800773e:	bf04      	itt	eq
 8007740:	1809      	addeq	r1, r1, r0
 8007742:	6021      	streq	r1, [r4, #0]
 8007744:	6054      	str	r4, [r2, #4]
 8007746:	e7ca      	b.n	80076de <_free_r+0x22>
 8007748:	bd38      	pop	{r3, r4, r5, pc}
 800774a:	bf00      	nop
 800774c:	200044a0 	.word	0x200044a0

08007750 <sbrk_aligned>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	4e0f      	ldr	r6, [pc, #60]	@ (8007790 <sbrk_aligned+0x40>)
 8007754:	460c      	mov	r4, r1
 8007756:	6831      	ldr	r1, [r6, #0]
 8007758:	4605      	mov	r5, r0
 800775a:	b911      	cbnz	r1, 8007762 <sbrk_aligned+0x12>
 800775c:	f000 fd7a 	bl	8008254 <_sbrk_r>
 8007760:	6030      	str	r0, [r6, #0]
 8007762:	4621      	mov	r1, r4
 8007764:	4628      	mov	r0, r5
 8007766:	f000 fd75 	bl	8008254 <_sbrk_r>
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	d103      	bne.n	8007776 <sbrk_aligned+0x26>
 800776e:	f04f 34ff 	mov.w	r4, #4294967295
 8007772:	4620      	mov	r0, r4
 8007774:	bd70      	pop	{r4, r5, r6, pc}
 8007776:	1cc4      	adds	r4, r0, #3
 8007778:	f024 0403 	bic.w	r4, r4, #3
 800777c:	42a0      	cmp	r0, r4
 800777e:	d0f8      	beq.n	8007772 <sbrk_aligned+0x22>
 8007780:	1a21      	subs	r1, r4, r0
 8007782:	4628      	mov	r0, r5
 8007784:	f000 fd66 	bl	8008254 <_sbrk_r>
 8007788:	3001      	adds	r0, #1
 800778a:	d1f2      	bne.n	8007772 <sbrk_aligned+0x22>
 800778c:	e7ef      	b.n	800776e <sbrk_aligned+0x1e>
 800778e:	bf00      	nop
 8007790:	2000449c 	.word	0x2000449c

08007794 <_malloc_r>:
 8007794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007798:	1ccd      	adds	r5, r1, #3
 800779a:	f025 0503 	bic.w	r5, r5, #3
 800779e:	3508      	adds	r5, #8
 80077a0:	2d0c      	cmp	r5, #12
 80077a2:	bf38      	it	cc
 80077a4:	250c      	movcc	r5, #12
 80077a6:	2d00      	cmp	r5, #0
 80077a8:	4606      	mov	r6, r0
 80077aa:	db01      	blt.n	80077b0 <_malloc_r+0x1c>
 80077ac:	42a9      	cmp	r1, r5
 80077ae:	d904      	bls.n	80077ba <_malloc_r+0x26>
 80077b0:	230c      	movs	r3, #12
 80077b2:	6033      	str	r3, [r6, #0]
 80077b4:	2000      	movs	r0, #0
 80077b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007890 <_malloc_r+0xfc>
 80077be:	f000 f869 	bl	8007894 <__malloc_lock>
 80077c2:	f8d8 3000 	ldr.w	r3, [r8]
 80077c6:	461c      	mov	r4, r3
 80077c8:	bb44      	cbnz	r4, 800781c <_malloc_r+0x88>
 80077ca:	4629      	mov	r1, r5
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff ffbf 	bl	8007750 <sbrk_aligned>
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	4604      	mov	r4, r0
 80077d6:	d158      	bne.n	800788a <_malloc_r+0xf6>
 80077d8:	f8d8 4000 	ldr.w	r4, [r8]
 80077dc:	4627      	mov	r7, r4
 80077de:	2f00      	cmp	r7, #0
 80077e0:	d143      	bne.n	800786a <_malloc_r+0xd6>
 80077e2:	2c00      	cmp	r4, #0
 80077e4:	d04b      	beq.n	800787e <_malloc_r+0xea>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	4639      	mov	r1, r7
 80077ea:	4630      	mov	r0, r6
 80077ec:	eb04 0903 	add.w	r9, r4, r3
 80077f0:	f000 fd30 	bl	8008254 <_sbrk_r>
 80077f4:	4581      	cmp	r9, r0
 80077f6:	d142      	bne.n	800787e <_malloc_r+0xea>
 80077f8:	6821      	ldr	r1, [r4, #0]
 80077fa:	1a6d      	subs	r5, r5, r1
 80077fc:	4629      	mov	r1, r5
 80077fe:	4630      	mov	r0, r6
 8007800:	f7ff ffa6 	bl	8007750 <sbrk_aligned>
 8007804:	3001      	adds	r0, #1
 8007806:	d03a      	beq.n	800787e <_malloc_r+0xea>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	442b      	add	r3, r5
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	f8d8 3000 	ldr.w	r3, [r8]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	bb62      	cbnz	r2, 8007870 <_malloc_r+0xdc>
 8007816:	f8c8 7000 	str.w	r7, [r8]
 800781a:	e00f      	b.n	800783c <_malloc_r+0xa8>
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	1b52      	subs	r2, r2, r5
 8007820:	d420      	bmi.n	8007864 <_malloc_r+0xd0>
 8007822:	2a0b      	cmp	r2, #11
 8007824:	d917      	bls.n	8007856 <_malloc_r+0xc2>
 8007826:	1961      	adds	r1, r4, r5
 8007828:	42a3      	cmp	r3, r4
 800782a:	6025      	str	r5, [r4, #0]
 800782c:	bf18      	it	ne
 800782e:	6059      	strne	r1, [r3, #4]
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	bf08      	it	eq
 8007834:	f8c8 1000 	streq.w	r1, [r8]
 8007838:	5162      	str	r2, [r4, r5]
 800783a:	604b      	str	r3, [r1, #4]
 800783c:	4630      	mov	r0, r6
 800783e:	f000 f82f 	bl	80078a0 <__malloc_unlock>
 8007842:	f104 000b 	add.w	r0, r4, #11
 8007846:	1d23      	adds	r3, r4, #4
 8007848:	f020 0007 	bic.w	r0, r0, #7
 800784c:	1ac2      	subs	r2, r0, r3
 800784e:	bf1c      	itt	ne
 8007850:	1a1b      	subne	r3, r3, r0
 8007852:	50a3      	strne	r3, [r4, r2]
 8007854:	e7af      	b.n	80077b6 <_malloc_r+0x22>
 8007856:	6862      	ldr	r2, [r4, #4]
 8007858:	42a3      	cmp	r3, r4
 800785a:	bf0c      	ite	eq
 800785c:	f8c8 2000 	streq.w	r2, [r8]
 8007860:	605a      	strne	r2, [r3, #4]
 8007862:	e7eb      	b.n	800783c <_malloc_r+0xa8>
 8007864:	4623      	mov	r3, r4
 8007866:	6864      	ldr	r4, [r4, #4]
 8007868:	e7ae      	b.n	80077c8 <_malloc_r+0x34>
 800786a:	463c      	mov	r4, r7
 800786c:	687f      	ldr	r7, [r7, #4]
 800786e:	e7b6      	b.n	80077de <_malloc_r+0x4a>
 8007870:	461a      	mov	r2, r3
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	42a3      	cmp	r3, r4
 8007876:	d1fb      	bne.n	8007870 <_malloc_r+0xdc>
 8007878:	2300      	movs	r3, #0
 800787a:	6053      	str	r3, [r2, #4]
 800787c:	e7de      	b.n	800783c <_malloc_r+0xa8>
 800787e:	230c      	movs	r3, #12
 8007880:	6033      	str	r3, [r6, #0]
 8007882:	4630      	mov	r0, r6
 8007884:	f000 f80c 	bl	80078a0 <__malloc_unlock>
 8007888:	e794      	b.n	80077b4 <_malloc_r+0x20>
 800788a:	6005      	str	r5, [r0, #0]
 800788c:	e7d6      	b.n	800783c <_malloc_r+0xa8>
 800788e:	bf00      	nop
 8007890:	200044a0 	.word	0x200044a0

08007894 <__malloc_lock>:
 8007894:	4801      	ldr	r0, [pc, #4]	@ (800789c <__malloc_lock+0x8>)
 8007896:	f7ff bf00 	b.w	800769a <__retarget_lock_acquire_recursive>
 800789a:	bf00      	nop
 800789c:	20004498 	.word	0x20004498

080078a0 <__malloc_unlock>:
 80078a0:	4801      	ldr	r0, [pc, #4]	@ (80078a8 <__malloc_unlock+0x8>)
 80078a2:	f7ff befb 	b.w	800769c <__retarget_lock_release_recursive>
 80078a6:	bf00      	nop
 80078a8:	20004498 	.word	0x20004498

080078ac <__ssputs_r>:
 80078ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b0:	688e      	ldr	r6, [r1, #8]
 80078b2:	461f      	mov	r7, r3
 80078b4:	42be      	cmp	r6, r7
 80078b6:	680b      	ldr	r3, [r1, #0]
 80078b8:	4682      	mov	sl, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	4690      	mov	r8, r2
 80078be:	d82d      	bhi.n	800791c <__ssputs_r+0x70>
 80078c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078c8:	d026      	beq.n	8007918 <__ssputs_r+0x6c>
 80078ca:	6965      	ldr	r5, [r4, #20]
 80078cc:	6909      	ldr	r1, [r1, #16]
 80078ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d2:	eba3 0901 	sub.w	r9, r3, r1
 80078d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078da:	1c7b      	adds	r3, r7, #1
 80078dc:	444b      	add	r3, r9
 80078de:	106d      	asrs	r5, r5, #1
 80078e0:	429d      	cmp	r5, r3
 80078e2:	bf38      	it	cc
 80078e4:	461d      	movcc	r5, r3
 80078e6:	0553      	lsls	r3, r2, #21
 80078e8:	d527      	bpl.n	800793a <__ssputs_r+0x8e>
 80078ea:	4629      	mov	r1, r5
 80078ec:	f7ff ff52 	bl	8007794 <_malloc_r>
 80078f0:	4606      	mov	r6, r0
 80078f2:	b360      	cbz	r0, 800794e <__ssputs_r+0xa2>
 80078f4:	6921      	ldr	r1, [r4, #16]
 80078f6:	464a      	mov	r2, r9
 80078f8:	f7ff fed1 	bl	800769e <memcpy>
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007906:	81a3      	strh	r3, [r4, #12]
 8007908:	6126      	str	r6, [r4, #16]
 800790a:	6165      	str	r5, [r4, #20]
 800790c:	444e      	add	r6, r9
 800790e:	eba5 0509 	sub.w	r5, r5, r9
 8007912:	6026      	str	r6, [r4, #0]
 8007914:	60a5      	str	r5, [r4, #8]
 8007916:	463e      	mov	r6, r7
 8007918:	42be      	cmp	r6, r7
 800791a:	d900      	bls.n	800791e <__ssputs_r+0x72>
 800791c:	463e      	mov	r6, r7
 800791e:	6820      	ldr	r0, [r4, #0]
 8007920:	4632      	mov	r2, r6
 8007922:	4641      	mov	r1, r8
 8007924:	f000 fc7c 	bl	8008220 <memmove>
 8007928:	68a3      	ldr	r3, [r4, #8]
 800792a:	1b9b      	subs	r3, r3, r6
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	4433      	add	r3, r6
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	2000      	movs	r0, #0
 8007936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793a:	462a      	mov	r2, r5
 800793c:	f000 fc9a 	bl	8008274 <_realloc_r>
 8007940:	4606      	mov	r6, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	d1e0      	bne.n	8007908 <__ssputs_r+0x5c>
 8007946:	6921      	ldr	r1, [r4, #16]
 8007948:	4650      	mov	r0, sl
 800794a:	f7ff feb7 	bl	80076bc <_free_r>
 800794e:	230c      	movs	r3, #12
 8007950:	f8ca 3000 	str.w	r3, [sl]
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	e7e9      	b.n	8007936 <__ssputs_r+0x8a>
	...

08007964 <_svfiprintf_r>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4698      	mov	r8, r3
 800796a:	898b      	ldrh	r3, [r1, #12]
 800796c:	061b      	lsls	r3, r3, #24
 800796e:	b09d      	sub	sp, #116	@ 0x74
 8007970:	4607      	mov	r7, r0
 8007972:	460d      	mov	r5, r1
 8007974:	4614      	mov	r4, r2
 8007976:	d510      	bpl.n	800799a <_svfiprintf_r+0x36>
 8007978:	690b      	ldr	r3, [r1, #16]
 800797a:	b973      	cbnz	r3, 800799a <_svfiprintf_r+0x36>
 800797c:	2140      	movs	r1, #64	@ 0x40
 800797e:	f7ff ff09 	bl	8007794 <_malloc_r>
 8007982:	6028      	str	r0, [r5, #0]
 8007984:	6128      	str	r0, [r5, #16]
 8007986:	b930      	cbnz	r0, 8007996 <_svfiprintf_r+0x32>
 8007988:	230c      	movs	r3, #12
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b01d      	add	sp, #116	@ 0x74
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	2340      	movs	r3, #64	@ 0x40
 8007998:	616b      	str	r3, [r5, #20]
 800799a:	2300      	movs	r3, #0
 800799c:	9309      	str	r3, [sp, #36]	@ 0x24
 800799e:	2320      	movs	r3, #32
 80079a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a8:	2330      	movs	r3, #48	@ 0x30
 80079aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b48 <_svfiprintf_r+0x1e4>
 80079ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079b2:	f04f 0901 	mov.w	r9, #1
 80079b6:	4623      	mov	r3, r4
 80079b8:	469a      	mov	sl, r3
 80079ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079be:	b10a      	cbz	r2, 80079c4 <_svfiprintf_r+0x60>
 80079c0:	2a25      	cmp	r2, #37	@ 0x25
 80079c2:	d1f9      	bne.n	80079b8 <_svfiprintf_r+0x54>
 80079c4:	ebba 0b04 	subs.w	fp, sl, r4
 80079c8:	d00b      	beq.n	80079e2 <_svfiprintf_r+0x7e>
 80079ca:	465b      	mov	r3, fp
 80079cc:	4622      	mov	r2, r4
 80079ce:	4629      	mov	r1, r5
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7ff ff6b 	bl	80078ac <__ssputs_r>
 80079d6:	3001      	adds	r0, #1
 80079d8:	f000 80a7 	beq.w	8007b2a <_svfiprintf_r+0x1c6>
 80079dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079de:	445a      	add	r2, fp
 80079e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80079e2:	f89a 3000 	ldrb.w	r3, [sl]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 809f 	beq.w	8007b2a <_svfiprintf_r+0x1c6>
 80079ec:	2300      	movs	r3, #0
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079f6:	f10a 0a01 	add.w	sl, sl, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	9307      	str	r3, [sp, #28]
 80079fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a04:	4654      	mov	r4, sl
 8007a06:	2205      	movs	r2, #5
 8007a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a0c:	484e      	ldr	r0, [pc, #312]	@ (8007b48 <_svfiprintf_r+0x1e4>)
 8007a0e:	f7f8 fc07 	bl	8000220 <memchr>
 8007a12:	9a04      	ldr	r2, [sp, #16]
 8007a14:	b9d8      	cbnz	r0, 8007a4e <_svfiprintf_r+0xea>
 8007a16:	06d0      	lsls	r0, r2, #27
 8007a18:	bf44      	itt	mi
 8007a1a:	2320      	movmi	r3, #32
 8007a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a20:	0711      	lsls	r1, r2, #28
 8007a22:	bf44      	itt	mi
 8007a24:	232b      	movmi	r3, #43	@ 0x2b
 8007a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a30:	d015      	beq.n	8007a5e <_svfiprintf_r+0xfa>
 8007a32:	9a07      	ldr	r2, [sp, #28]
 8007a34:	4654      	mov	r4, sl
 8007a36:	2000      	movs	r0, #0
 8007a38:	f04f 0c0a 	mov.w	ip, #10
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a42:	3b30      	subs	r3, #48	@ 0x30
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	d94b      	bls.n	8007ae0 <_svfiprintf_r+0x17c>
 8007a48:	b1b0      	cbz	r0, 8007a78 <_svfiprintf_r+0x114>
 8007a4a:	9207      	str	r2, [sp, #28]
 8007a4c:	e014      	b.n	8007a78 <_svfiprintf_r+0x114>
 8007a4e:	eba0 0308 	sub.w	r3, r0, r8
 8007a52:	fa09 f303 	lsl.w	r3, r9, r3
 8007a56:	4313      	orrs	r3, r2
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	46a2      	mov	sl, r4
 8007a5c:	e7d2      	b.n	8007a04 <_svfiprintf_r+0xa0>
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	1d19      	adds	r1, r3, #4
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	9103      	str	r1, [sp, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfbb      	ittet	lt
 8007a6a:	425b      	neglt	r3, r3
 8007a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a70:	9307      	strge	r3, [sp, #28]
 8007a72:	9307      	strlt	r3, [sp, #28]
 8007a74:	bfb8      	it	lt
 8007a76:	9204      	strlt	r2, [sp, #16]
 8007a78:	7823      	ldrb	r3, [r4, #0]
 8007a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a7c:	d10a      	bne.n	8007a94 <_svfiprintf_r+0x130>
 8007a7e:	7863      	ldrb	r3, [r4, #1]
 8007a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a82:	d132      	bne.n	8007aea <_svfiprintf_r+0x186>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	1d1a      	adds	r2, r3, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	9203      	str	r2, [sp, #12]
 8007a8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a90:	3402      	adds	r4, #2
 8007a92:	9305      	str	r3, [sp, #20]
 8007a94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b58 <_svfiprintf_r+0x1f4>
 8007a98:	7821      	ldrb	r1, [r4, #0]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	f7f8 fbbf 	bl	8000220 <memchr>
 8007aa2:	b138      	cbz	r0, 8007ab4 <_svfiprintf_r+0x150>
 8007aa4:	9b04      	ldr	r3, [sp, #16]
 8007aa6:	eba0 000a 	sub.w	r0, r0, sl
 8007aaa:	2240      	movs	r2, #64	@ 0x40
 8007aac:	4082      	lsls	r2, r0
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	3401      	adds	r4, #1
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab8:	4824      	ldr	r0, [pc, #144]	@ (8007b4c <_svfiprintf_r+0x1e8>)
 8007aba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007abe:	2206      	movs	r2, #6
 8007ac0:	f7f8 fbae 	bl	8000220 <memchr>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d036      	beq.n	8007b36 <_svfiprintf_r+0x1d2>
 8007ac8:	4b21      	ldr	r3, [pc, #132]	@ (8007b50 <_svfiprintf_r+0x1ec>)
 8007aca:	bb1b      	cbnz	r3, 8007b14 <_svfiprintf_r+0x1b0>
 8007acc:	9b03      	ldr	r3, [sp, #12]
 8007ace:	3307      	adds	r3, #7
 8007ad0:	f023 0307 	bic.w	r3, r3, #7
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	9303      	str	r3, [sp, #12]
 8007ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ada:	4433      	add	r3, r6
 8007adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ade:	e76a      	b.n	80079b6 <_svfiprintf_r+0x52>
 8007ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	e7a8      	b.n	8007a3c <_svfiprintf_r+0xd8>
 8007aea:	2300      	movs	r3, #0
 8007aec:	3401      	adds	r4, #1
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	4619      	mov	r1, r3
 8007af2:	f04f 0c0a 	mov.w	ip, #10
 8007af6:	4620      	mov	r0, r4
 8007af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007afc:	3a30      	subs	r2, #48	@ 0x30
 8007afe:	2a09      	cmp	r2, #9
 8007b00:	d903      	bls.n	8007b0a <_svfiprintf_r+0x1a6>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0c6      	beq.n	8007a94 <_svfiprintf_r+0x130>
 8007b06:	9105      	str	r1, [sp, #20]
 8007b08:	e7c4      	b.n	8007a94 <_svfiprintf_r+0x130>
 8007b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b0e:	4604      	mov	r4, r0
 8007b10:	2301      	movs	r3, #1
 8007b12:	e7f0      	b.n	8007af6 <_svfiprintf_r+0x192>
 8007b14:	ab03      	add	r3, sp, #12
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	462a      	mov	r2, r5
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b54 <_svfiprintf_r+0x1f0>)
 8007b1c:	a904      	add	r1, sp, #16
 8007b1e:	4638      	mov	r0, r7
 8007b20:	f3af 8000 	nop.w
 8007b24:	1c42      	adds	r2, r0, #1
 8007b26:	4606      	mov	r6, r0
 8007b28:	d1d6      	bne.n	8007ad8 <_svfiprintf_r+0x174>
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	065b      	lsls	r3, r3, #25
 8007b2e:	f53f af2d 	bmi.w	800798c <_svfiprintf_r+0x28>
 8007b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b34:	e72c      	b.n	8007990 <_svfiprintf_r+0x2c>
 8007b36:	ab03      	add	r3, sp, #12
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4b05      	ldr	r3, [pc, #20]	@ (8007b54 <_svfiprintf_r+0x1f0>)
 8007b3e:	a904      	add	r1, sp, #16
 8007b40:	4638      	mov	r0, r7
 8007b42:	f000 f9bb 	bl	8007ebc <_printf_i>
 8007b46:	e7ed      	b.n	8007b24 <_svfiprintf_r+0x1c0>
 8007b48:	08008ad6 	.word	0x08008ad6
 8007b4c:	08008ae0 	.word	0x08008ae0
 8007b50:	00000000 	.word	0x00000000
 8007b54:	080078ad 	.word	0x080078ad
 8007b58:	08008adc 	.word	0x08008adc

08007b5c <__sfputc_r>:
 8007b5c:	6893      	ldr	r3, [r2, #8]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	b410      	push	{r4}
 8007b64:	6093      	str	r3, [r2, #8]
 8007b66:	da08      	bge.n	8007b7a <__sfputc_r+0x1e>
 8007b68:	6994      	ldr	r4, [r2, #24]
 8007b6a:	42a3      	cmp	r3, r4
 8007b6c:	db01      	blt.n	8007b72 <__sfputc_r+0x16>
 8007b6e:	290a      	cmp	r1, #10
 8007b70:	d103      	bne.n	8007b7a <__sfputc_r+0x1e>
 8007b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b76:	f000 babf 	b.w	80080f8 <__swbuf_r>
 8007b7a:	6813      	ldr	r3, [r2, #0]
 8007b7c:	1c58      	adds	r0, r3, #1
 8007b7e:	6010      	str	r0, [r2, #0]
 8007b80:	7019      	strb	r1, [r3, #0]
 8007b82:	4608      	mov	r0, r1
 8007b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <__sfputs_r>:
 8007b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	460f      	mov	r7, r1
 8007b90:	4614      	mov	r4, r2
 8007b92:	18d5      	adds	r5, r2, r3
 8007b94:	42ac      	cmp	r4, r5
 8007b96:	d101      	bne.n	8007b9c <__sfputs_r+0x12>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e007      	b.n	8007bac <__sfputs_r+0x22>
 8007b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba0:	463a      	mov	r2, r7
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f7ff ffda 	bl	8007b5c <__sfputc_r>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d1f3      	bne.n	8007b94 <__sfputs_r+0xa>
 8007bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bb0 <_vfiprintf_r>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	b09d      	sub	sp, #116	@ 0x74
 8007bb8:	4614      	mov	r4, r2
 8007bba:	4698      	mov	r8, r3
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	b118      	cbz	r0, 8007bc8 <_vfiprintf_r+0x18>
 8007bc0:	6a03      	ldr	r3, [r0, #32]
 8007bc2:	b90b      	cbnz	r3, 8007bc8 <_vfiprintf_r+0x18>
 8007bc4:	f7ff fc2e 	bl	8007424 <__sinit>
 8007bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bca:	07d9      	lsls	r1, r3, #31
 8007bcc:	d405      	bmi.n	8007bda <_vfiprintf_r+0x2a>
 8007bce:	89ab      	ldrh	r3, [r5, #12]
 8007bd0:	059a      	lsls	r2, r3, #22
 8007bd2:	d402      	bmi.n	8007bda <_vfiprintf_r+0x2a>
 8007bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bd6:	f7ff fd60 	bl	800769a <__retarget_lock_acquire_recursive>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	071b      	lsls	r3, r3, #28
 8007bde:	d501      	bpl.n	8007be4 <_vfiprintf_r+0x34>
 8007be0:	692b      	ldr	r3, [r5, #16]
 8007be2:	b99b      	cbnz	r3, 8007c0c <_vfiprintf_r+0x5c>
 8007be4:	4629      	mov	r1, r5
 8007be6:	4630      	mov	r0, r6
 8007be8:	f000 fac4 	bl	8008174 <__swsetup_r>
 8007bec:	b170      	cbz	r0, 8007c0c <_vfiprintf_r+0x5c>
 8007bee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bf0:	07dc      	lsls	r4, r3, #31
 8007bf2:	d504      	bpl.n	8007bfe <_vfiprintf_r+0x4e>
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	b01d      	add	sp, #116	@ 0x74
 8007bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfe:	89ab      	ldrh	r3, [r5, #12]
 8007c00:	0598      	lsls	r0, r3, #22
 8007c02:	d4f7      	bmi.n	8007bf4 <_vfiprintf_r+0x44>
 8007c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c06:	f7ff fd49 	bl	800769c <__retarget_lock_release_recursive>
 8007c0a:	e7f3      	b.n	8007bf4 <_vfiprintf_r+0x44>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c10:	2320      	movs	r3, #32
 8007c12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c1a:	2330      	movs	r3, #48	@ 0x30
 8007c1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dcc <_vfiprintf_r+0x21c>
 8007c20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c24:	f04f 0901 	mov.w	r9, #1
 8007c28:	4623      	mov	r3, r4
 8007c2a:	469a      	mov	sl, r3
 8007c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c30:	b10a      	cbz	r2, 8007c36 <_vfiprintf_r+0x86>
 8007c32:	2a25      	cmp	r2, #37	@ 0x25
 8007c34:	d1f9      	bne.n	8007c2a <_vfiprintf_r+0x7a>
 8007c36:	ebba 0b04 	subs.w	fp, sl, r4
 8007c3a:	d00b      	beq.n	8007c54 <_vfiprintf_r+0xa4>
 8007c3c:	465b      	mov	r3, fp
 8007c3e:	4622      	mov	r2, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff ffa1 	bl	8007b8a <__sfputs_r>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f000 80a7 	beq.w	8007d9c <_vfiprintf_r+0x1ec>
 8007c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c50:	445a      	add	r2, fp
 8007c52:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c54:	f89a 3000 	ldrb.w	r3, [sl]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 809f 	beq.w	8007d9c <_vfiprintf_r+0x1ec>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f04f 32ff 	mov.w	r2, #4294967295
 8007c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c68:	f10a 0a01 	add.w	sl, sl, #1
 8007c6c:	9304      	str	r3, [sp, #16]
 8007c6e:	9307      	str	r3, [sp, #28]
 8007c70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c74:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c76:	4654      	mov	r4, sl
 8007c78:	2205      	movs	r2, #5
 8007c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7e:	4853      	ldr	r0, [pc, #332]	@ (8007dcc <_vfiprintf_r+0x21c>)
 8007c80:	f7f8 face 	bl	8000220 <memchr>
 8007c84:	9a04      	ldr	r2, [sp, #16]
 8007c86:	b9d8      	cbnz	r0, 8007cc0 <_vfiprintf_r+0x110>
 8007c88:	06d1      	lsls	r1, r2, #27
 8007c8a:	bf44      	itt	mi
 8007c8c:	2320      	movmi	r3, #32
 8007c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c92:	0713      	lsls	r3, r2, #28
 8007c94:	bf44      	itt	mi
 8007c96:	232b      	movmi	r3, #43	@ 0x2b
 8007c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca2:	d015      	beq.n	8007cd0 <_vfiprintf_r+0x120>
 8007ca4:	9a07      	ldr	r2, [sp, #28]
 8007ca6:	4654      	mov	r4, sl
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f04f 0c0a 	mov.w	ip, #10
 8007cae:	4621      	mov	r1, r4
 8007cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb4:	3b30      	subs	r3, #48	@ 0x30
 8007cb6:	2b09      	cmp	r3, #9
 8007cb8:	d94b      	bls.n	8007d52 <_vfiprintf_r+0x1a2>
 8007cba:	b1b0      	cbz	r0, 8007cea <_vfiprintf_r+0x13a>
 8007cbc:	9207      	str	r2, [sp, #28]
 8007cbe:	e014      	b.n	8007cea <_vfiprintf_r+0x13a>
 8007cc0:	eba0 0308 	sub.w	r3, r0, r8
 8007cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	9304      	str	r3, [sp, #16]
 8007ccc:	46a2      	mov	sl, r4
 8007cce:	e7d2      	b.n	8007c76 <_vfiprintf_r+0xc6>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	1d19      	adds	r1, r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	9103      	str	r1, [sp, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	bfbb      	ittet	lt
 8007cdc:	425b      	neglt	r3, r3
 8007cde:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce2:	9307      	strge	r3, [sp, #28]
 8007ce4:	9307      	strlt	r3, [sp, #28]
 8007ce6:	bfb8      	it	lt
 8007ce8:	9204      	strlt	r2, [sp, #16]
 8007cea:	7823      	ldrb	r3, [r4, #0]
 8007cec:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cee:	d10a      	bne.n	8007d06 <_vfiprintf_r+0x156>
 8007cf0:	7863      	ldrb	r3, [r4, #1]
 8007cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf4:	d132      	bne.n	8007d5c <_vfiprintf_r+0x1ac>
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	1d1a      	adds	r2, r3, #4
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	9203      	str	r2, [sp, #12]
 8007cfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d02:	3402      	adds	r4, #2
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ddc <_vfiprintf_r+0x22c>
 8007d0a:	7821      	ldrb	r1, [r4, #0]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	4650      	mov	r0, sl
 8007d10:	f7f8 fa86 	bl	8000220 <memchr>
 8007d14:	b138      	cbz	r0, 8007d26 <_vfiprintf_r+0x176>
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	eba0 000a 	sub.w	r0, r0, sl
 8007d1c:	2240      	movs	r2, #64	@ 0x40
 8007d1e:	4082      	lsls	r2, r0
 8007d20:	4313      	orrs	r3, r2
 8007d22:	3401      	adds	r4, #1
 8007d24:	9304      	str	r3, [sp, #16]
 8007d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2a:	4829      	ldr	r0, [pc, #164]	@ (8007dd0 <_vfiprintf_r+0x220>)
 8007d2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d30:	2206      	movs	r2, #6
 8007d32:	f7f8 fa75 	bl	8000220 <memchr>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d03f      	beq.n	8007dba <_vfiprintf_r+0x20a>
 8007d3a:	4b26      	ldr	r3, [pc, #152]	@ (8007dd4 <_vfiprintf_r+0x224>)
 8007d3c:	bb1b      	cbnz	r3, 8007d86 <_vfiprintf_r+0x1d6>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	3307      	adds	r3, #7
 8007d42:	f023 0307 	bic.w	r3, r3, #7
 8007d46:	3308      	adds	r3, #8
 8007d48:	9303      	str	r3, [sp, #12]
 8007d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d4c:	443b      	add	r3, r7
 8007d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d50:	e76a      	b.n	8007c28 <_vfiprintf_r+0x78>
 8007d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d56:	460c      	mov	r4, r1
 8007d58:	2001      	movs	r0, #1
 8007d5a:	e7a8      	b.n	8007cae <_vfiprintf_r+0xfe>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	3401      	adds	r4, #1
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	4619      	mov	r1, r3
 8007d64:	f04f 0c0a 	mov.w	ip, #10
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d6e:	3a30      	subs	r2, #48	@ 0x30
 8007d70:	2a09      	cmp	r2, #9
 8007d72:	d903      	bls.n	8007d7c <_vfiprintf_r+0x1cc>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0c6      	beq.n	8007d06 <_vfiprintf_r+0x156>
 8007d78:	9105      	str	r1, [sp, #20]
 8007d7a:	e7c4      	b.n	8007d06 <_vfiprintf_r+0x156>
 8007d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d80:	4604      	mov	r4, r0
 8007d82:	2301      	movs	r3, #1
 8007d84:	e7f0      	b.n	8007d68 <_vfiprintf_r+0x1b8>
 8007d86:	ab03      	add	r3, sp, #12
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	4b12      	ldr	r3, [pc, #72]	@ (8007dd8 <_vfiprintf_r+0x228>)
 8007d8e:	a904      	add	r1, sp, #16
 8007d90:	4630      	mov	r0, r6
 8007d92:	f3af 8000 	nop.w
 8007d96:	4607      	mov	r7, r0
 8007d98:	1c78      	adds	r0, r7, #1
 8007d9a:	d1d6      	bne.n	8007d4a <_vfiprintf_r+0x19a>
 8007d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d9e:	07d9      	lsls	r1, r3, #31
 8007da0:	d405      	bmi.n	8007dae <_vfiprintf_r+0x1fe>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	059a      	lsls	r2, r3, #22
 8007da6:	d402      	bmi.n	8007dae <_vfiprintf_r+0x1fe>
 8007da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007daa:	f7ff fc77 	bl	800769c <__retarget_lock_release_recursive>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	065b      	lsls	r3, r3, #25
 8007db2:	f53f af1f 	bmi.w	8007bf4 <_vfiprintf_r+0x44>
 8007db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007db8:	e71e      	b.n	8007bf8 <_vfiprintf_r+0x48>
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4b05      	ldr	r3, [pc, #20]	@ (8007dd8 <_vfiprintf_r+0x228>)
 8007dc2:	a904      	add	r1, sp, #16
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 f879 	bl	8007ebc <_printf_i>
 8007dca:	e7e4      	b.n	8007d96 <_vfiprintf_r+0x1e6>
 8007dcc:	08008ad6 	.word	0x08008ad6
 8007dd0:	08008ae0 	.word	0x08008ae0
 8007dd4:	00000000 	.word	0x00000000
 8007dd8:	08007b8b 	.word	0x08007b8b
 8007ddc:	08008adc 	.word	0x08008adc

08007de0 <_printf_common>:
 8007de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de4:	4616      	mov	r6, r2
 8007de6:	4698      	mov	r8, r3
 8007de8:	688a      	ldr	r2, [r1, #8]
 8007dea:	690b      	ldr	r3, [r1, #16]
 8007dec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bfb8      	it	lt
 8007df4:	4613      	movlt	r3, r2
 8007df6:	6033      	str	r3, [r6, #0]
 8007df8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	b10a      	cbz	r2, 8007e06 <_printf_common+0x26>
 8007e02:	3301      	adds	r3, #1
 8007e04:	6033      	str	r3, [r6, #0]
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	0699      	lsls	r1, r3, #26
 8007e0a:	bf42      	ittt	mi
 8007e0c:	6833      	ldrmi	r3, [r6, #0]
 8007e0e:	3302      	addmi	r3, #2
 8007e10:	6033      	strmi	r3, [r6, #0]
 8007e12:	6825      	ldr	r5, [r4, #0]
 8007e14:	f015 0506 	ands.w	r5, r5, #6
 8007e18:	d106      	bne.n	8007e28 <_printf_common+0x48>
 8007e1a:	f104 0a19 	add.w	sl, r4, #25
 8007e1e:	68e3      	ldr	r3, [r4, #12]
 8007e20:	6832      	ldr	r2, [r6, #0]
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	42ab      	cmp	r3, r5
 8007e26:	dc26      	bgt.n	8007e76 <_printf_common+0x96>
 8007e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e2c:	6822      	ldr	r2, [r4, #0]
 8007e2e:	3b00      	subs	r3, #0
 8007e30:	bf18      	it	ne
 8007e32:	2301      	movne	r3, #1
 8007e34:	0692      	lsls	r2, r2, #26
 8007e36:	d42b      	bmi.n	8007e90 <_printf_common+0xb0>
 8007e38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	4638      	mov	r0, r7
 8007e40:	47c8      	blx	r9
 8007e42:	3001      	adds	r0, #1
 8007e44:	d01e      	beq.n	8007e84 <_printf_common+0xa4>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	6922      	ldr	r2, [r4, #16]
 8007e4a:	f003 0306 	and.w	r3, r3, #6
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	bf02      	ittt	eq
 8007e52:	68e5      	ldreq	r5, [r4, #12]
 8007e54:	6833      	ldreq	r3, [r6, #0]
 8007e56:	1aed      	subeq	r5, r5, r3
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	bf0c      	ite	eq
 8007e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e60:	2500      	movne	r5, #0
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bfc4      	itt	gt
 8007e66:	1a9b      	subgt	r3, r3, r2
 8007e68:	18ed      	addgt	r5, r5, r3
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	341a      	adds	r4, #26
 8007e6e:	42b5      	cmp	r5, r6
 8007e70:	d11a      	bne.n	8007ea8 <_printf_common+0xc8>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e008      	b.n	8007e88 <_printf_common+0xa8>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4652      	mov	r2, sl
 8007e7a:	4641      	mov	r1, r8
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	47c8      	blx	r9
 8007e80:	3001      	adds	r0, #1
 8007e82:	d103      	bne.n	8007e8c <_printf_common+0xac>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	e7c6      	b.n	8007e1e <_printf_common+0x3e>
 8007e90:	18e1      	adds	r1, r4, r3
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	2030      	movs	r0, #48	@ 0x30
 8007e96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e9a:	4422      	add	r2, r4
 8007e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	e7c7      	b.n	8007e38 <_printf_common+0x58>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4641      	mov	r1, r8
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c8      	blx	r9
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d0e6      	beq.n	8007e84 <_printf_common+0xa4>
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7d9      	b.n	8007e6e <_printf_common+0x8e>
	...

08007ebc <_printf_i>:
 8007ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	7e0f      	ldrb	r7, [r1, #24]
 8007ec2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ec4:	2f78      	cmp	r7, #120	@ 0x78
 8007ec6:	4691      	mov	r9, r2
 8007ec8:	4680      	mov	r8, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	469a      	mov	sl, r3
 8007ece:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ed2:	d807      	bhi.n	8007ee4 <_printf_i+0x28>
 8007ed4:	2f62      	cmp	r7, #98	@ 0x62
 8007ed6:	d80a      	bhi.n	8007eee <_printf_i+0x32>
 8007ed8:	2f00      	cmp	r7, #0
 8007eda:	f000 80d1 	beq.w	8008080 <_printf_i+0x1c4>
 8007ede:	2f58      	cmp	r7, #88	@ 0x58
 8007ee0:	f000 80b8 	beq.w	8008054 <_printf_i+0x198>
 8007ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007eec:	e03a      	b.n	8007f64 <_printf_i+0xa8>
 8007eee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ef2:	2b15      	cmp	r3, #21
 8007ef4:	d8f6      	bhi.n	8007ee4 <_printf_i+0x28>
 8007ef6:	a101      	add	r1, pc, #4	@ (adr r1, 8007efc <_printf_i+0x40>)
 8007ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007efc:	08007f55 	.word	0x08007f55
 8007f00:	08007f69 	.word	0x08007f69
 8007f04:	08007ee5 	.word	0x08007ee5
 8007f08:	08007ee5 	.word	0x08007ee5
 8007f0c:	08007ee5 	.word	0x08007ee5
 8007f10:	08007ee5 	.word	0x08007ee5
 8007f14:	08007f69 	.word	0x08007f69
 8007f18:	08007ee5 	.word	0x08007ee5
 8007f1c:	08007ee5 	.word	0x08007ee5
 8007f20:	08007ee5 	.word	0x08007ee5
 8007f24:	08007ee5 	.word	0x08007ee5
 8007f28:	08008067 	.word	0x08008067
 8007f2c:	08007f93 	.word	0x08007f93
 8007f30:	08008021 	.word	0x08008021
 8007f34:	08007ee5 	.word	0x08007ee5
 8007f38:	08007ee5 	.word	0x08007ee5
 8007f3c:	08008089 	.word	0x08008089
 8007f40:	08007ee5 	.word	0x08007ee5
 8007f44:	08007f93 	.word	0x08007f93
 8007f48:	08007ee5 	.word	0x08007ee5
 8007f4c:	08007ee5 	.word	0x08007ee5
 8007f50:	08008029 	.word	0x08008029
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	1d1a      	adds	r2, r3, #4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6032      	str	r2, [r6, #0]
 8007f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f64:	2301      	movs	r3, #1
 8007f66:	e09c      	b.n	80080a2 <_printf_i+0x1e6>
 8007f68:	6833      	ldr	r3, [r6, #0]
 8007f6a:	6820      	ldr	r0, [r4, #0]
 8007f6c:	1d19      	adds	r1, r3, #4
 8007f6e:	6031      	str	r1, [r6, #0]
 8007f70:	0606      	lsls	r6, r0, #24
 8007f72:	d501      	bpl.n	8007f78 <_printf_i+0xbc>
 8007f74:	681d      	ldr	r5, [r3, #0]
 8007f76:	e003      	b.n	8007f80 <_printf_i+0xc4>
 8007f78:	0645      	lsls	r5, r0, #25
 8007f7a:	d5fb      	bpl.n	8007f74 <_printf_i+0xb8>
 8007f7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	da03      	bge.n	8007f8c <_printf_i+0xd0>
 8007f84:	232d      	movs	r3, #45	@ 0x2d
 8007f86:	426d      	negs	r5, r5
 8007f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f8c:	4858      	ldr	r0, [pc, #352]	@ (80080f0 <_printf_i+0x234>)
 8007f8e:	230a      	movs	r3, #10
 8007f90:	e011      	b.n	8007fb6 <_printf_i+0xfa>
 8007f92:	6821      	ldr	r1, [r4, #0]
 8007f94:	6833      	ldr	r3, [r6, #0]
 8007f96:	0608      	lsls	r0, r1, #24
 8007f98:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f9c:	d402      	bmi.n	8007fa4 <_printf_i+0xe8>
 8007f9e:	0649      	lsls	r1, r1, #25
 8007fa0:	bf48      	it	mi
 8007fa2:	b2ad      	uxthmi	r5, r5
 8007fa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fa6:	4852      	ldr	r0, [pc, #328]	@ (80080f0 <_printf_i+0x234>)
 8007fa8:	6033      	str	r3, [r6, #0]
 8007faa:	bf14      	ite	ne
 8007fac:	230a      	movne	r3, #10
 8007fae:	2308      	moveq	r3, #8
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fb6:	6866      	ldr	r6, [r4, #4]
 8007fb8:	60a6      	str	r6, [r4, #8]
 8007fba:	2e00      	cmp	r6, #0
 8007fbc:	db05      	blt.n	8007fca <_printf_i+0x10e>
 8007fbe:	6821      	ldr	r1, [r4, #0]
 8007fc0:	432e      	orrs	r6, r5
 8007fc2:	f021 0104 	bic.w	r1, r1, #4
 8007fc6:	6021      	str	r1, [r4, #0]
 8007fc8:	d04b      	beq.n	8008062 <_printf_i+0x1a6>
 8007fca:	4616      	mov	r6, r2
 8007fcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fd0:	fb03 5711 	mls	r7, r3, r1, r5
 8007fd4:	5dc7      	ldrb	r7, [r0, r7]
 8007fd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fda:	462f      	mov	r7, r5
 8007fdc:	42bb      	cmp	r3, r7
 8007fde:	460d      	mov	r5, r1
 8007fe0:	d9f4      	bls.n	8007fcc <_printf_i+0x110>
 8007fe2:	2b08      	cmp	r3, #8
 8007fe4:	d10b      	bne.n	8007ffe <_printf_i+0x142>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	07df      	lsls	r7, r3, #31
 8007fea:	d508      	bpl.n	8007ffe <_printf_i+0x142>
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	6861      	ldr	r1, [r4, #4]
 8007ff0:	4299      	cmp	r1, r3
 8007ff2:	bfde      	ittt	le
 8007ff4:	2330      	movle	r3, #48	@ 0x30
 8007ff6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ffa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ffe:	1b92      	subs	r2, r2, r6
 8008000:	6122      	str	r2, [r4, #16]
 8008002:	f8cd a000 	str.w	sl, [sp]
 8008006:	464b      	mov	r3, r9
 8008008:	aa03      	add	r2, sp, #12
 800800a:	4621      	mov	r1, r4
 800800c:	4640      	mov	r0, r8
 800800e:	f7ff fee7 	bl	8007de0 <_printf_common>
 8008012:	3001      	adds	r0, #1
 8008014:	d14a      	bne.n	80080ac <_printf_i+0x1f0>
 8008016:	f04f 30ff 	mov.w	r0, #4294967295
 800801a:	b004      	add	sp, #16
 800801c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	f043 0320 	orr.w	r3, r3, #32
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	4832      	ldr	r0, [pc, #200]	@ (80080f4 <_printf_i+0x238>)
 800802a:	2778      	movs	r7, #120	@ 0x78
 800802c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	6831      	ldr	r1, [r6, #0]
 8008034:	061f      	lsls	r7, r3, #24
 8008036:	f851 5b04 	ldr.w	r5, [r1], #4
 800803a:	d402      	bmi.n	8008042 <_printf_i+0x186>
 800803c:	065f      	lsls	r7, r3, #25
 800803e:	bf48      	it	mi
 8008040:	b2ad      	uxthmi	r5, r5
 8008042:	6031      	str	r1, [r6, #0]
 8008044:	07d9      	lsls	r1, r3, #31
 8008046:	bf44      	itt	mi
 8008048:	f043 0320 	orrmi.w	r3, r3, #32
 800804c:	6023      	strmi	r3, [r4, #0]
 800804e:	b11d      	cbz	r5, 8008058 <_printf_i+0x19c>
 8008050:	2310      	movs	r3, #16
 8008052:	e7ad      	b.n	8007fb0 <_printf_i+0xf4>
 8008054:	4826      	ldr	r0, [pc, #152]	@ (80080f0 <_printf_i+0x234>)
 8008056:	e7e9      	b.n	800802c <_printf_i+0x170>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	f023 0320 	bic.w	r3, r3, #32
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	e7f6      	b.n	8008050 <_printf_i+0x194>
 8008062:	4616      	mov	r6, r2
 8008064:	e7bd      	b.n	8007fe2 <_printf_i+0x126>
 8008066:	6833      	ldr	r3, [r6, #0]
 8008068:	6825      	ldr	r5, [r4, #0]
 800806a:	6961      	ldr	r1, [r4, #20]
 800806c:	1d18      	adds	r0, r3, #4
 800806e:	6030      	str	r0, [r6, #0]
 8008070:	062e      	lsls	r6, r5, #24
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	d501      	bpl.n	800807a <_printf_i+0x1be>
 8008076:	6019      	str	r1, [r3, #0]
 8008078:	e002      	b.n	8008080 <_printf_i+0x1c4>
 800807a:	0668      	lsls	r0, r5, #25
 800807c:	d5fb      	bpl.n	8008076 <_printf_i+0x1ba>
 800807e:	8019      	strh	r1, [r3, #0]
 8008080:	2300      	movs	r3, #0
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	4616      	mov	r6, r2
 8008086:	e7bc      	b.n	8008002 <_printf_i+0x146>
 8008088:	6833      	ldr	r3, [r6, #0]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	6032      	str	r2, [r6, #0]
 800808e:	681e      	ldr	r6, [r3, #0]
 8008090:	6862      	ldr	r2, [r4, #4]
 8008092:	2100      	movs	r1, #0
 8008094:	4630      	mov	r0, r6
 8008096:	f7f8 f8c3 	bl	8000220 <memchr>
 800809a:	b108      	cbz	r0, 80080a0 <_printf_i+0x1e4>
 800809c:	1b80      	subs	r0, r0, r6
 800809e:	6060      	str	r0, [r4, #4]
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	6123      	str	r3, [r4, #16]
 80080a4:	2300      	movs	r3, #0
 80080a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080aa:	e7aa      	b.n	8008002 <_printf_i+0x146>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	4632      	mov	r2, r6
 80080b0:	4649      	mov	r1, r9
 80080b2:	4640      	mov	r0, r8
 80080b4:	47d0      	blx	sl
 80080b6:	3001      	adds	r0, #1
 80080b8:	d0ad      	beq.n	8008016 <_printf_i+0x15a>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	079b      	lsls	r3, r3, #30
 80080be:	d413      	bmi.n	80080e8 <_printf_i+0x22c>
 80080c0:	68e0      	ldr	r0, [r4, #12]
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	4298      	cmp	r0, r3
 80080c6:	bfb8      	it	lt
 80080c8:	4618      	movlt	r0, r3
 80080ca:	e7a6      	b.n	800801a <_printf_i+0x15e>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4632      	mov	r2, r6
 80080d0:	4649      	mov	r1, r9
 80080d2:	4640      	mov	r0, r8
 80080d4:	47d0      	blx	sl
 80080d6:	3001      	adds	r0, #1
 80080d8:	d09d      	beq.n	8008016 <_printf_i+0x15a>
 80080da:	3501      	adds	r5, #1
 80080dc:	68e3      	ldr	r3, [r4, #12]
 80080de:	9903      	ldr	r1, [sp, #12]
 80080e0:	1a5b      	subs	r3, r3, r1
 80080e2:	42ab      	cmp	r3, r5
 80080e4:	dcf2      	bgt.n	80080cc <_printf_i+0x210>
 80080e6:	e7eb      	b.n	80080c0 <_printf_i+0x204>
 80080e8:	2500      	movs	r5, #0
 80080ea:	f104 0619 	add.w	r6, r4, #25
 80080ee:	e7f5      	b.n	80080dc <_printf_i+0x220>
 80080f0:	08008ae7 	.word	0x08008ae7
 80080f4:	08008af8 	.word	0x08008af8

080080f8 <__swbuf_r>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	460e      	mov	r6, r1
 80080fc:	4614      	mov	r4, r2
 80080fe:	4605      	mov	r5, r0
 8008100:	b118      	cbz	r0, 800810a <__swbuf_r+0x12>
 8008102:	6a03      	ldr	r3, [r0, #32]
 8008104:	b90b      	cbnz	r3, 800810a <__swbuf_r+0x12>
 8008106:	f7ff f98d 	bl	8007424 <__sinit>
 800810a:	69a3      	ldr	r3, [r4, #24]
 800810c:	60a3      	str	r3, [r4, #8]
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	071a      	lsls	r2, r3, #28
 8008112:	d501      	bpl.n	8008118 <__swbuf_r+0x20>
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	b943      	cbnz	r3, 800812a <__swbuf_r+0x32>
 8008118:	4621      	mov	r1, r4
 800811a:	4628      	mov	r0, r5
 800811c:	f000 f82a 	bl	8008174 <__swsetup_r>
 8008120:	b118      	cbz	r0, 800812a <__swbuf_r+0x32>
 8008122:	f04f 37ff 	mov.w	r7, #4294967295
 8008126:	4638      	mov	r0, r7
 8008128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	6922      	ldr	r2, [r4, #16]
 800812e:	1a98      	subs	r0, r3, r2
 8008130:	6963      	ldr	r3, [r4, #20]
 8008132:	b2f6      	uxtb	r6, r6
 8008134:	4283      	cmp	r3, r0
 8008136:	4637      	mov	r7, r6
 8008138:	dc05      	bgt.n	8008146 <__swbuf_r+0x4e>
 800813a:	4621      	mov	r1, r4
 800813c:	4628      	mov	r0, r5
 800813e:	f7ff f8a9 	bl	8007294 <_fflush_r>
 8008142:	2800      	cmp	r0, #0
 8008144:	d1ed      	bne.n	8008122 <__swbuf_r+0x2a>
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	3b01      	subs	r3, #1
 800814a:	60a3      	str	r3, [r4, #8]
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	6022      	str	r2, [r4, #0]
 8008152:	701e      	strb	r6, [r3, #0]
 8008154:	6962      	ldr	r2, [r4, #20]
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	429a      	cmp	r2, r3
 800815a:	d004      	beq.n	8008166 <__swbuf_r+0x6e>
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	07db      	lsls	r3, r3, #31
 8008160:	d5e1      	bpl.n	8008126 <__swbuf_r+0x2e>
 8008162:	2e0a      	cmp	r6, #10
 8008164:	d1df      	bne.n	8008126 <__swbuf_r+0x2e>
 8008166:	4621      	mov	r1, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f7ff f893 	bl	8007294 <_fflush_r>
 800816e:	2800      	cmp	r0, #0
 8008170:	d0d9      	beq.n	8008126 <__swbuf_r+0x2e>
 8008172:	e7d6      	b.n	8008122 <__swbuf_r+0x2a>

08008174 <__swsetup_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4b29      	ldr	r3, [pc, #164]	@ (800821c <__swsetup_r+0xa8>)
 8008178:	4605      	mov	r5, r0
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	460c      	mov	r4, r1
 800817e:	b118      	cbz	r0, 8008188 <__swsetup_r+0x14>
 8008180:	6a03      	ldr	r3, [r0, #32]
 8008182:	b90b      	cbnz	r3, 8008188 <__swsetup_r+0x14>
 8008184:	f7ff f94e 	bl	8007424 <__sinit>
 8008188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800818c:	0719      	lsls	r1, r3, #28
 800818e:	d422      	bmi.n	80081d6 <__swsetup_r+0x62>
 8008190:	06da      	lsls	r2, r3, #27
 8008192:	d407      	bmi.n	80081a4 <__swsetup_r+0x30>
 8008194:	2209      	movs	r2, #9
 8008196:	602a      	str	r2, [r5, #0]
 8008198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800819c:	81a3      	strh	r3, [r4, #12]
 800819e:	f04f 30ff 	mov.w	r0, #4294967295
 80081a2:	e033      	b.n	800820c <__swsetup_r+0x98>
 80081a4:	0758      	lsls	r0, r3, #29
 80081a6:	d512      	bpl.n	80081ce <__swsetup_r+0x5a>
 80081a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081aa:	b141      	cbz	r1, 80081be <__swsetup_r+0x4a>
 80081ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d002      	beq.n	80081ba <__swsetup_r+0x46>
 80081b4:	4628      	mov	r0, r5
 80081b6:	f7ff fa81 	bl	80076bc <_free_r>
 80081ba:	2300      	movs	r3, #0
 80081bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	2300      	movs	r3, #0
 80081c8:	6063      	str	r3, [r4, #4]
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f043 0308 	orr.w	r3, r3, #8
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	b94b      	cbnz	r3, 80081ee <__swsetup_r+0x7a>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081e4:	d003      	beq.n	80081ee <__swsetup_r+0x7a>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4628      	mov	r0, r5
 80081ea:	f000 f897 	bl	800831c <__smakebuf_r>
 80081ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f2:	f013 0201 	ands.w	r2, r3, #1
 80081f6:	d00a      	beq.n	800820e <__swsetup_r+0x9a>
 80081f8:	2200      	movs	r2, #0
 80081fa:	60a2      	str	r2, [r4, #8]
 80081fc:	6962      	ldr	r2, [r4, #20]
 80081fe:	4252      	negs	r2, r2
 8008200:	61a2      	str	r2, [r4, #24]
 8008202:	6922      	ldr	r2, [r4, #16]
 8008204:	b942      	cbnz	r2, 8008218 <__swsetup_r+0xa4>
 8008206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800820a:	d1c5      	bne.n	8008198 <__swsetup_r+0x24>
 800820c:	bd38      	pop	{r3, r4, r5, pc}
 800820e:	0799      	lsls	r1, r3, #30
 8008210:	bf58      	it	pl
 8008212:	6962      	ldrpl	r2, [r4, #20]
 8008214:	60a2      	str	r2, [r4, #8]
 8008216:	e7f4      	b.n	8008202 <__swsetup_r+0x8e>
 8008218:	2000      	movs	r0, #0
 800821a:	e7f7      	b.n	800820c <__swsetup_r+0x98>
 800821c:	2000003c 	.word	0x2000003c

08008220 <memmove>:
 8008220:	4288      	cmp	r0, r1
 8008222:	b510      	push	{r4, lr}
 8008224:	eb01 0402 	add.w	r4, r1, r2
 8008228:	d902      	bls.n	8008230 <memmove+0x10>
 800822a:	4284      	cmp	r4, r0
 800822c:	4623      	mov	r3, r4
 800822e:	d807      	bhi.n	8008240 <memmove+0x20>
 8008230:	1e43      	subs	r3, r0, #1
 8008232:	42a1      	cmp	r1, r4
 8008234:	d008      	beq.n	8008248 <memmove+0x28>
 8008236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800823a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800823e:	e7f8      	b.n	8008232 <memmove+0x12>
 8008240:	4402      	add	r2, r0
 8008242:	4601      	mov	r1, r0
 8008244:	428a      	cmp	r2, r1
 8008246:	d100      	bne.n	800824a <memmove+0x2a>
 8008248:	bd10      	pop	{r4, pc}
 800824a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800824e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008252:	e7f7      	b.n	8008244 <memmove+0x24>

08008254 <_sbrk_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4d06      	ldr	r5, [pc, #24]	@ (8008270 <_sbrk_r+0x1c>)
 8008258:	2300      	movs	r3, #0
 800825a:	4604      	mov	r4, r0
 800825c:	4608      	mov	r0, r1
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	f7f8 fcca 	bl	8000bf8 <_sbrk>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_sbrk_r+0x1a>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_sbrk_r+0x1a>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	20004494 	.word	0x20004494

08008274 <_realloc_r>:
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	4607      	mov	r7, r0
 800827a:	4614      	mov	r4, r2
 800827c:	460d      	mov	r5, r1
 800827e:	b921      	cbnz	r1, 800828a <_realloc_r+0x16>
 8008280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008284:	4611      	mov	r1, r2
 8008286:	f7ff ba85 	b.w	8007794 <_malloc_r>
 800828a:	b92a      	cbnz	r2, 8008298 <_realloc_r+0x24>
 800828c:	f7ff fa16 	bl	80076bc <_free_r>
 8008290:	4625      	mov	r5, r4
 8008292:	4628      	mov	r0, r5
 8008294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008298:	f000 f89e 	bl	80083d8 <_malloc_usable_size_r>
 800829c:	4284      	cmp	r4, r0
 800829e:	4606      	mov	r6, r0
 80082a0:	d802      	bhi.n	80082a8 <_realloc_r+0x34>
 80082a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082a6:	d8f4      	bhi.n	8008292 <_realloc_r+0x1e>
 80082a8:	4621      	mov	r1, r4
 80082aa:	4638      	mov	r0, r7
 80082ac:	f7ff fa72 	bl	8007794 <_malloc_r>
 80082b0:	4680      	mov	r8, r0
 80082b2:	b908      	cbnz	r0, 80082b8 <_realloc_r+0x44>
 80082b4:	4645      	mov	r5, r8
 80082b6:	e7ec      	b.n	8008292 <_realloc_r+0x1e>
 80082b8:	42b4      	cmp	r4, r6
 80082ba:	4622      	mov	r2, r4
 80082bc:	4629      	mov	r1, r5
 80082be:	bf28      	it	cs
 80082c0:	4632      	movcs	r2, r6
 80082c2:	f7ff f9ec 	bl	800769e <memcpy>
 80082c6:	4629      	mov	r1, r5
 80082c8:	4638      	mov	r0, r7
 80082ca:	f7ff f9f7 	bl	80076bc <_free_r>
 80082ce:	e7f1      	b.n	80082b4 <_realloc_r+0x40>

080082d0 <__swhatbuf_r>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	460c      	mov	r4, r1
 80082d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d8:	2900      	cmp	r1, #0
 80082da:	b096      	sub	sp, #88	@ 0x58
 80082dc:	4615      	mov	r5, r2
 80082de:	461e      	mov	r6, r3
 80082e0:	da0d      	bge.n	80082fe <__swhatbuf_r+0x2e>
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082e8:	f04f 0100 	mov.w	r1, #0
 80082ec:	bf14      	ite	ne
 80082ee:	2340      	movne	r3, #64	@ 0x40
 80082f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082f4:	2000      	movs	r0, #0
 80082f6:	6031      	str	r1, [r6, #0]
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	b016      	add	sp, #88	@ 0x58
 80082fc:	bd70      	pop	{r4, r5, r6, pc}
 80082fe:	466a      	mov	r2, sp
 8008300:	f000 f848 	bl	8008394 <_fstat_r>
 8008304:	2800      	cmp	r0, #0
 8008306:	dbec      	blt.n	80082e2 <__swhatbuf_r+0x12>
 8008308:	9901      	ldr	r1, [sp, #4]
 800830a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800830e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008312:	4259      	negs	r1, r3
 8008314:	4159      	adcs	r1, r3
 8008316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800831a:	e7eb      	b.n	80082f4 <__swhatbuf_r+0x24>

0800831c <__smakebuf_r>:
 800831c:	898b      	ldrh	r3, [r1, #12]
 800831e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008320:	079d      	lsls	r5, r3, #30
 8008322:	4606      	mov	r6, r0
 8008324:	460c      	mov	r4, r1
 8008326:	d507      	bpl.n	8008338 <__smakebuf_r+0x1c>
 8008328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	2301      	movs	r3, #1
 8008332:	6163      	str	r3, [r4, #20]
 8008334:	b003      	add	sp, #12
 8008336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008338:	ab01      	add	r3, sp, #4
 800833a:	466a      	mov	r2, sp
 800833c:	f7ff ffc8 	bl	80082d0 <__swhatbuf_r>
 8008340:	9f00      	ldr	r7, [sp, #0]
 8008342:	4605      	mov	r5, r0
 8008344:	4639      	mov	r1, r7
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff fa24 	bl	8007794 <_malloc_r>
 800834c:	b948      	cbnz	r0, 8008362 <__smakebuf_r+0x46>
 800834e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008352:	059a      	lsls	r2, r3, #22
 8008354:	d4ee      	bmi.n	8008334 <__smakebuf_r+0x18>
 8008356:	f023 0303 	bic.w	r3, r3, #3
 800835a:	f043 0302 	orr.w	r3, r3, #2
 800835e:	81a3      	strh	r3, [r4, #12]
 8008360:	e7e2      	b.n	8008328 <__smakebuf_r+0xc>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	6020      	str	r0, [r4, #0]
 8008366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008372:	b15b      	cbz	r3, 800838c <__smakebuf_r+0x70>
 8008374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f81d 	bl	80083b8 <_isatty_r>
 800837e:	b128      	cbz	r0, 800838c <__smakebuf_r+0x70>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	81a3      	strh	r3, [r4, #12]
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	431d      	orrs	r5, r3
 8008390:	81a5      	strh	r5, [r4, #12]
 8008392:	e7cf      	b.n	8008334 <__smakebuf_r+0x18>

08008394 <_fstat_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	@ (80083b4 <_fstat_r+0x20>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	4611      	mov	r1, r2
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	f7fe fd70 	bl	8006e86 <_fstat>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d102      	bne.n	80083b0 <_fstat_r+0x1c>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	b103      	cbz	r3, 80083b0 <_fstat_r+0x1c>
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	bf00      	nop
 80083b4:	20004494 	.word	0x20004494

080083b8 <_isatty_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	@ (80083d4 <_isatty_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7fe fec4 	bl	8007150 <_isatty>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_isatty_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_isatty_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20004494 	.word	0x20004494

080083d8 <_malloc_usable_size_r>:
 80083d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083dc:	1f18      	subs	r0, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bfbc      	itt	lt
 80083e2:	580b      	ldrlt	r3, [r1, r0]
 80083e4:	18c0      	addlt	r0, r0, r3
 80083e6:	4770      	bx	lr

080083e8 <_init>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr

080083f4 <_fini>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr
