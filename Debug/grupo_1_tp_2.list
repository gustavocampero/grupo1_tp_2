
grupo_1_tp_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  080094b0  080094b0  0000a4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc4  08009bc4  0000b08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009bc4  08009bc4  0000abc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bcc  08009bcc  0000b08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bcc  08009bcc  0000abcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bd0  08009bd0  0000abd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08009bd4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004478  2000008c  08009c60  0000b08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004504  08009c60  0000b504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017276  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eba  00000000  00000000  00022332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  000261f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100e  00000000  00000000  000276c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c5b  00000000  00000000  000286ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001baff  00000000  00000000  0004e329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db6cc  00000000  00000000  00069e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001454f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061a4  00000000  00000000  00145538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009498 	.word	0x08009498

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08009498 	.word	0x08009498

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationIdleHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <vApplicationGetIdleTaskMemory+0x2c>)
 800060c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	4a06      	ldr	r2, [pc, #24]	@ (800062c <vApplicationGetIdleTaskMemory+0x30>)
 8000612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2280      	movs	r2, #128	@ 0x80
 8000618:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200000a8 	.word	0x200000a8
 800062c:	2000010c 	.word	0x2000010c

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000634:	f007 fd84 	bl	8008140 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fbc0 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f814 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f916 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 8000644:	f000 f8f4 	bl	8000830 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f8c8 	bl	80007dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800064c:	f000 f87a 	bl	8000744 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <main+0x34>)
 8000652:	f002 f883 	bl	800275c <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 8000656:	f005 fbed 	bl	8005e34 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f003 fbd1 	bl	8003e00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0x2e>
 8000662:	bf00      	nop
 8000664:	2000030c 	.word	0x2000030c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	@ 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f007 ffed 	bl	8008656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <SystemClock_Config+0xd4>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a29      	ldr	r2, [pc, #164]	@ (800073c <SystemClock_Config+0xd4>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <SystemClock_Config+0xd4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemClock_Config+0xd8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b4:	4a22      	ldr	r2, [pc, #136]	@ (8000740 <SystemClock_Config+0xd8>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006dc:	2310      	movs	r3, #16
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fd42 	bl	8002180 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000702:	f000 f959 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f9b0 	bl	8001a88 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800072e:	f000 f943 	bl	80009b8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	@ 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_TIM2_Init+0x94>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_TIM2_Init+0x94>)
 800076a:	2201      	movs	r2, #1
 800076c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_TIM2_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_TIM2_Init+0x94>)
 8000776:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800077a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_TIM2_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_TIM2_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000788:	4813      	ldr	r0, [pc, #76]	@ (80007d8 <MX_TIM2_Init+0x94>)
 800078a:	f001 ff97 	bl	80026bc <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000794:	f000 f910 	bl	80009b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_TIM2_Init+0x94>)
 80007a6:	f002 f939 	bl	8002a1c <HAL_TIM_ConfigClockSource>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007b0:	f000 f902 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_TIM2_Init+0x94>)
 80007c2:	f002 fb5b 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007cc:	f000 f8f4 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000030c 	.word	0x2000030c

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f002 fbc2 	bl	8002f9c <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f8cb 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000354 	.word	0x20000354
 800082c:	40004400 	.word	0x40004400

08000830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_DMA_Init+0x3c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <MX_DMA_Init+0x3c>)
 8000840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_DMA_Init+0x3c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2105      	movs	r1, #5
 8000856:	2011      	movs	r0, #17
 8000858:	f000 fbaa 	bl	8000fb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800085c:	2011      	movs	r0, #17
 800085e:	f000 fbc3 	bl	8000fe8 <HAL_NVIC_EnableIRQ>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a2c      	ldr	r2, [pc, #176]	@ (8000940 <MX_GPIO_Init+0xd0>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a25      	ldr	r2, [pc, #148]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a17      	ldr	r2, [pc, #92]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	4812      	ldr	r0, [pc, #72]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008fc:	f001 f8aa 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000906:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480c      	ldr	r0, [pc, #48]	@ (8000948 <MX_GPIO_Init+0xd8>)
 8000918:	f000 fef0 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800091c:	2320      	movs	r3, #32
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4804      	ldr	r0, [pc, #16]	@ (8000944 <MX_GPIO_Init+0xd4>)
 8000934:	f000 fee2 	bl	80016fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	@ 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000
 8000948:	40020800 	.word	0x40020800

0800094c <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <configureTimerForRunTimeStats+0x14>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	200003fc 	.word	0x200003fc

08000964 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <getRunTimeCounterValue+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	200003fc 	.word	0x200003fc

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a09      	ldr	r2, [pc, #36]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fa37 	bl	8000e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800099a:	d104      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009a4:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010000 	.word	0x40010000
 80009b4:	200003fc 	.word	0x200003fc

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a11      	ldr	r2, [pc, #68]	@ (8000a18 <HAL_MspInit+0x54>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_MspInit+0x54>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_MspInit+0x54>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_MspInit+0x54>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	210f      	movs	r1, #15
 8000a06:	f06f 0001 	mvn.w	r0, #1
 8000a0a:	f000 fad1 	bl	8000fb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a2c:	d115      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <HAL_TIM_Base_MspInit+0x48>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <HAL_TIM_Base_MspInit+0x48>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_TIM_Base_MspInit+0x48>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	201c      	movs	r0, #28
 8000a50:	f000 faae 	bl	8000fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a54:	201c      	movs	r0, #28
 8000a56:	f000 fac7 	bl	8000fe8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a34      	ldr	r2, [pc, #208]	@ (8000b58 <HAL_UART_MspInit+0xf0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d161      	bne.n	8000b4e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a32      	ldr	r2, [pc, #200]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a2b      	ldr	r2, [pc, #172]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b29      	ldr	r3, [pc, #164]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4820      	ldr	r0, [pc, #128]	@ (8000b60 <HAL_UART_MspInit+0xf8>)
 8000ade:	f000 fe0d 	bl	80016fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000ae4:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <HAL_UART_MspInit+0x100>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000aea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000aee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000af2:	2240      	movs	r2, #64	@ 0x40
 8000af4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000afc:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000afe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b22:	4810      	ldr	r0, [pc, #64]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b24:	f000 fa6e 	bl	8001004 <HAL_DMA_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000b2e:	f7ff ff43 	bl	80009b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b36:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2105      	movs	r1, #5
 8000b42:	2026      	movs	r0, #38	@ 0x26
 8000b44:	f000 fa34 	bl	8000fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b48:	2026      	movs	r0, #38	@ 0x26
 8000b4a:	f000 fa4d 	bl	8000fe8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	2000039c 	.word	0x2000039c
 8000b68:	400260a0 	.word	0x400260a0

08000b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b2e      	ldr	r3, [pc, #184]	@ (8000c3c <HAL_InitTick+0xd0>)
 8000b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b84:	4a2d      	ldr	r2, [pc, #180]	@ (8000c3c <HAL_InitTick+0xd0>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c3c <HAL_InitTick+0xd0>)
 8000b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b98:	f107 020c 	add.w	r2, r7, #12
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 f88a 	bl	8001cbc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ba8:	f001 f874 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8000bac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb0:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <HAL_InitTick+0xd4>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <HAL_InitTick+0xd8>)
 8000bbe:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <HAL_InitTick+0xdc>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <HAL_InitTick+0xd8>)
 8000bc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a1e      	ldr	r2, [pc, #120]	@ (8000c44 <HAL_InitTick+0xd8>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_InitTick+0xd8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <HAL_InitTick+0xd8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_InitTick+0xd8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000be2:	4818      	ldr	r0, [pc, #96]	@ (8000c44 <HAL_InitTick+0xd8>)
 8000be4:	f001 fd6a 	bl	80026bc <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11b      	bne.n	8000c2e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bf6:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <HAL_InitTick+0xd8>)
 8000bf8:	f001 fdb0 	bl	800275c <HAL_TIM_Base_Start_IT>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d111      	bne.n	8000c2e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f000 f9ec 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d808      	bhi.n	8000c28 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c16:	2200      	movs	r2, #0
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	2019      	movs	r0, #25
 8000c1c:	f000 f9c8 	bl	8000fb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c20:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <HAL_InitTick+0xe0>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e002      	b.n	8000c2e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3730      	adds	r7, #48	@ 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	431bde83 	.word	0x431bde83
 8000c44:	20000400 	.word	0x20000400
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <NMI_Handler+0x4>

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <MemManage_Handler+0x4>

08000c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <DMA1_Stream6_IRQHandler+0x10>)
 8000c8e:	f000 faf9 	bl	8001284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000039c 	.word	0x2000039c

08000c9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ca2:	f001 fdcb 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000400 	.word	0x20000400

08000cb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <TIM2_IRQHandler+0x10>)
 8000cb6:	f001 fdc1 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000030c 	.word	0x2000030c

08000cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <USART2_IRQHandler+0x10>)
 8000cca:	f002 f9b7 	bl	800303c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000354 	.word	0x20000354

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f007 fcf4 	bl	80086f4 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20020000 	.word	0x20020000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000448 	.word	0x20000448
 8000d40:	20004508 	.word	0x20004508

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d6c:	f7ff ffea 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f007 fcb3 	bl	8008700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fc49 	bl	8000630 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000dac:	08009bd4 	.word	0x08009bd4
  ldr r2, =_sbss
 8000db0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000db4:	20004504 	.word	0x20004504

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f8d8 	bl	8000f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f7ff febe 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fde8 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	2000044c 	.word	0x2000044c

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2000044c 	.word	0x2000044c

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff4c 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc2:	f7ff ff61 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f7ff ffb1 	bl	8000f34 <NVIC_EncodePriority>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff80 	bl	8000ee0 <__NVIC_SetPriority>
}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff54 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ff0a 	bl	8000e28 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e099      	b.n	8001154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001040:	e00f      	b.n	8001062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001042:	f7ff fef1 	bl	8000e28 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b05      	cmp	r3, #5
 800104e:	d908      	bls.n	8001062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2220      	movs	r2, #32
 8001054:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2203      	movs	r2, #3
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e078      	b.n	8001154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1e8      	bne.n	8001042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4b38      	ldr	r3, [pc, #224]	@ (800115c <HAL_DMA_Init+0x158>)
 800107c:	4013      	ands	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800108e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d107      	bne.n	80010cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	4313      	orrs	r3, r2
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f023 0307 	bic.w	r3, r3, #7
 80010e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d117      	bne.n	8001126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00e      	beq.n	8001126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fa7b 	bl	8001604 <DMA_CheckFifoParam>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2240      	movs	r2, #64	@ 0x40
 8001118:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001122:	2301      	movs	r3, #1
 8001124:	e016      	b.n	8001154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fa32 	bl	8001598 <DMA_CalcBaseAndBitshift>
 8001134:	4603      	mov	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800113c:	223f      	movs	r2, #63	@ 0x3f
 800113e:	409a      	lsls	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	f010803f 	.word	0xf010803f

08001160 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800116e:	f7ff fe5b 	bl	8000e28 <HAL_GetTick>
 8001172:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d008      	beq.n	8001192 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2280      	movs	r2, #128	@ 0x80
 8001184:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e052      	b.n	8001238 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0216 	bic.w	r2, r2, #22
 80011a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <HAL_DMA_Abort+0x62>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0208 	bic.w	r2, r2, #8
 80011d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0201 	bic.w	r2, r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e2:	e013      	b.n	800120c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011e4:	f7ff fe20 	bl	8000e28 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b05      	cmp	r3, #5
 80011f0:	d90c      	bls.n	800120c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2220      	movs	r2, #32
 80011f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e015      	b.n	8001238 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1e4      	bne.n	80011e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800121e:	223f      	movs	r2, #63	@ 0x3f
 8001220:	409a      	lsls	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d004      	beq.n	800125e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00c      	b.n	8001278 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2205      	movs	r2, #5
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001290:	4b8e      	ldr	r3, [pc, #568]	@ (80014cc <HAL_DMA_IRQHandler+0x248>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a8e      	ldr	r2, [pc, #568]	@ (80014d0 <HAL_DMA_IRQHandler+0x24c>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0a9b      	lsrs	r3, r3, #10
 800129c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ae:	2208      	movs	r2, #8
 80012b0:	409a      	lsls	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d01a      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0204 	bic.w	r2, r2, #4
 80012d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012dc:	2208      	movs	r2, #8
 80012de:	409a      	lsls	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f4:	2201      	movs	r2, #1
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d012      	beq.n	8001326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001312:	2201      	movs	r2, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131e:	f043 0202 	orr.w	r2, r3, #2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132a:	2204      	movs	r2, #4
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d012      	beq.n	800135c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001348:	2204      	movs	r2, #4
 800134a:	409a      	lsls	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001354:	f043 0204 	orr.w	r2, r3, #4
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001360:	2210      	movs	r2, #16
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d043      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d03c      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137e:	2210      	movs	r2, #16
 8001380:	409a      	lsls	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d108      	bne.n	80013b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d024      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
 80013b2:	e01f      	b.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01b      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
 80013c4:	e016      	b.n	80013f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0208 	bic.w	r2, r2, #8
 80013e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f8:	2220      	movs	r2, #32
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 808f 	beq.w	8001524 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8087 	beq.w	8001524 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800141a:	2220      	movs	r2, #32
 800141c:	409a      	lsls	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b05      	cmp	r3, #5
 800142c:	d136      	bne.n	800149c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0216 	bic.w	r2, r2, #22
 800143c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800144c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <HAL_DMA_IRQHandler+0x1da>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0208 	bic.w	r2, r2, #8
 800146c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	223f      	movs	r2, #63	@ 0x3f
 8001474:	409a      	lsls	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800148e:	2b00      	cmp	r3, #0
 8001490:	d07e      	beq.n	8001590 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
        }
        return;
 800149a:	e079      	b.n	8001590 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01d      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10d      	bne.n	80014d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d031      	beq.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
 80014c8:	e02c      	b.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000
 80014d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d023      	beq.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	4798      	blx	r3
 80014e4:	e01e      	b.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10f      	bne.n	8001514 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0210 	bic.w	r2, r2, #16
 8001502:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001528:	2b00      	cmp	r3, #0
 800152a:	d032      	beq.n	8001592 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d022      	beq.n	800157e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2205      	movs	r2, #5
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	3301      	adds	r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	d307      	bcc.n	800156c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f2      	bne.n	8001550 <HAL_DMA_IRQHandler+0x2cc>
 800156a:	e000      	b.n	800156e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800156c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
 800158e:	e000      	b.n	8001592 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001590:	bf00      	nop
    }
  }
}
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3b10      	subs	r3, #16
 80015a8:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <DMA_CalcBaseAndBitshift+0x64>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015b2:	4a13      	ldr	r2, [pc, #76]	@ (8001600 <DMA_CalcBaseAndBitshift+0x68>)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d909      	bls.n	80015da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015ce:	f023 0303 	bic.w	r3, r3, #3
 80015d2:	1d1a      	adds	r2, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80015d8:	e007      	b.n	80015ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015e2:	f023 0303 	bic.w	r3, r3, #3
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	aaaaaaab 	.word	0xaaaaaaab
 8001600:	08009b68 	.word	0x08009b68

08001604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11f      	bne.n	800165e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d856      	bhi.n	80016d2 <DMA_CheckFifoParam+0xce>
 8001624:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <DMA_CheckFifoParam+0x28>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	0800164f 	.word	0x0800164f
 8001634:	0800163d 	.word	0x0800163d
 8001638:	080016d3 	.word	0x080016d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d046      	beq.n	80016d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800164c:	e043      	b.n	80016d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001656:	d140      	bne.n	80016da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800165c:	e03d      	b.n	80016da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001666:	d121      	bne.n	80016ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d837      	bhi.n	80016de <DMA_CheckFifoParam+0xda>
 800166e:	a201      	add	r2, pc, #4	@ (adr r2, 8001674 <DMA_CheckFifoParam+0x70>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	08001685 	.word	0x08001685
 8001678:	0800168b 	.word	0x0800168b
 800167c:	08001685 	.word	0x08001685
 8001680:	0800169d 	.word	0x0800169d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
      break;
 8001688:	e030      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d025      	beq.n	80016e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800169a:	e022      	b.n	80016e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016a4:	d11f      	bne.n	80016e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016aa:	e01c      	b.n	80016e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d903      	bls.n	80016ba <DMA_CheckFifoParam+0xb6>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d003      	beq.n	80016c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016b8:	e018      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
      break;
 80016be:	e015      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00e      	beq.n	80016ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      break;
 80016d0:	e00b      	b.n	80016ea <DMA_CheckFifoParam+0xe6>
      break;
 80016d2:	bf00      	nop
 80016d4:	e00a      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016d6:	bf00      	nop
 80016d8:	e008      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016da:	bf00      	nop
 80016dc:	e006      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016de:	bf00      	nop
 80016e0:	e004      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016e2:	bf00      	nop
 80016e4:	e002      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;   
 80016e6:	bf00      	nop
 80016e8:	e000      	b.n	80016ec <DMA_CheckFifoParam+0xe8>
      break;
 80016ea:	bf00      	nop
    }
  } 
  
  return status; 
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e165      	b.n	80019e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8154 	bne.w	80019de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	2b02      	cmp	r3, #2
 800174c:	d130      	bne.n	80017b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d017      	beq.n	80017ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d123      	bne.n	8001840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80ae 	beq.w	80019de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b5d      	ldr	r3, [pc, #372]	@ (80019fc <HAL_GPIO_Init+0x300>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a5c      	ldr	r2, [pc, #368]	@ (80019fc <HAL_GPIO_Init+0x300>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b5a      	ldr	r3, [pc, #360]	@ (80019fc <HAL_GPIO_Init+0x300>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189e:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a04 <HAL_GPIO_Init+0x308>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d025      	beq.n	8001916 <HAL_GPIO_Init+0x21a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a08 <HAL_GPIO_Init+0x30c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d01f      	beq.n	8001912 <HAL_GPIO_Init+0x216>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4d      	ldr	r2, [pc, #308]	@ (8001a0c <HAL_GPIO_Init+0x310>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d019      	beq.n	800190e <HAL_GPIO_Init+0x212>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001a10 <HAL_GPIO_Init+0x314>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001a14 <HAL_GPIO_Init+0x318>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00d      	beq.n	8001906 <HAL_GPIO_Init+0x20a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001a18 <HAL_GPIO_Init+0x31c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x206>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a49      	ldr	r2, [pc, #292]	@ (8001a1c <HAL_GPIO_Init+0x320>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_GPIO_Init+0x202>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00c      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 80018fe:	2307      	movs	r3, #7
 8001900:	e00a      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 8001902:	2305      	movs	r3, #5
 8001904:	e008      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 8001906:	2304      	movs	r3, #4
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 800190a:	2303      	movs	r3, #3
 800190c:	e004      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 800190e:	2302      	movs	r3, #2
 8001910:	e002      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 8001916:	2300      	movs	r3, #0
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f002 0203 	and.w	r2, r2, #3
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	4093      	lsls	r3, r2
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001928:	4935      	ldr	r1, [pc, #212]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001936:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195a:	4a31      	ldr	r2, [pc, #196]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001960:	4b2f      	ldr	r3, [pc, #188]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001984:	4a26      	ldr	r2, [pc, #152]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800198a:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3301      	adds	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	f67f ae96 	bls.w	8001718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40013800 	.word	0x40013800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a70:	e003      	b.n	8001a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	041a      	lsls	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0cc      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b68      	ldr	r3, [pc, #416]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d90c      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b65      	ldr	r3, [pc, #404]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b63      	ldr	r3, [pc, #396]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b8      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001adc:	4b59      	ldr	r3, [pc, #356]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af4:	4b53      	ldr	r3, [pc, #332]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a52      	ldr	r2, [pc, #328]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b50      	ldr	r3, [pc, #320]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	494d      	ldr	r1, [pc, #308]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d044      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b47      	ldr	r3, [pc, #284]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d119      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e07f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b3f      	ldr	r3, [pc, #252]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e067      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4934      	ldr	r1, [pc, #208]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f956 	bl	8000e28 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff f952 	bl	8000e28 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e04f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20c      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e032      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4916      	ldr	r1, [pc, #88]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	490e      	ldr	r1, [pc, #56]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c0e:	f000 f887 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001c12:	4602      	mov	r2, r0
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	490a      	ldr	r1, [pc, #40]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	5ccb      	ldrb	r3, [r1, r3]
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	4a09      	ldr	r2, [pc, #36]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe ff9c 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08009b50 	.word	0x08009b50
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000000 	.word	0x20000000

08001c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c70:	f7ff fff0 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0a9b      	lsrs	r3, r3, #10
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	@ (8001c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08009b60 	.word	0x08009b60

08001c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c98:	f7ff ffdc 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0b5b      	lsrs	r3, r3, #13
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	@ (8001cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08009b60 	.word	0x08009b60

08001cbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	220f      	movs	r2, #15
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0203 	and.w	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <HAL_RCC_GetClockConfig+0x60>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 020f 	and.w	r2, r3, #15
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40023c00 	.word	0x40023c00

08001d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d24:	b0ae      	sub	sp, #184	@ 0xb8
 8001d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d46:	4bcb      	ldr	r3, [pc, #812]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	f200 8206 	bhi.w	8002160 <HAL_RCC_GetSysClockFreq+0x440>
 8001d54:	a201      	add	r2, pc, #4	@ (adr r2, 8001d5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d91 	.word	0x08001d91
 8001d60:	08002161 	.word	0x08002161
 8001d64:	08002161 	.word	0x08002161
 8001d68:	08002161 	.word	0x08002161
 8001d6c:	08001d99 	.word	0x08001d99
 8001d70:	08002161 	.word	0x08002161
 8001d74:	08002161 	.word	0x08002161
 8001d78:	08002161 	.word	0x08002161
 8001d7c:	08001da1 	.word	0x08001da1
 8001d80:	08002161 	.word	0x08002161
 8001d84:	08002161 	.word	0x08002161
 8001d88:	08002161 	.word	0x08002161
 8001d8c:	08001f91 	.word	0x08001f91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4bb9      	ldr	r3, [pc, #740]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d96:	e1e7      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4bb8      	ldr	r3, [pc, #736]	@ (800207c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d9e:	e1e3      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da0:	4bb4      	ldr	r3, [pc, #720]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dac:	4bb1      	ldr	r3, [pc, #708]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d071      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db8:	4bae      	ldr	r3, [pc, #696]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001dc4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001dde:	4622      	mov	r2, r4
 8001de0:	462b      	mov	r3, r5
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	0159      	lsls	r1, r3, #5
 8001dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df0:	0150      	lsls	r0, r2, #5
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4621      	mov	r1, r4
 8001df8:	1a51      	subs	r1, r2, r1
 8001dfa:	6439      	str	r1, [r7, #64]	@ 0x40
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e10:	4649      	mov	r1, r9
 8001e12:	018b      	lsls	r3, r1, #6
 8001e14:	4641      	mov	r1, r8
 8001e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	018a      	lsls	r2, r1, #6
 8001e1e:	4641      	mov	r1, r8
 8001e20:	1a51      	subs	r1, r2, r1
 8001e22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e24:	4649      	mov	r1, r9
 8001e26:	eb63 0301 	sbc.w	r3, r3, r1
 8001e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001e38:	4649      	mov	r1, r9
 8001e3a:	00cb      	lsls	r3, r1, #3
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e42:	4641      	mov	r1, r8
 8001e44:	00ca      	lsls	r2, r1, #3
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	189b      	adds	r3, r3, r2
 8001e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e52:	462b      	mov	r3, r5
 8001e54:	460a      	mov	r2, r1
 8001e56:	eb42 0303 	adc.w	r3, r2, r3
 8001e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e68:	4629      	mov	r1, r5
 8001e6a:	024b      	lsls	r3, r1, #9
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e72:	4621      	mov	r1, r4
 8001e74:	024a      	lsls	r2, r1, #9
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e8c:	f7fe fa18 	bl	80002c0 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4613      	mov	r3, r2
 8001e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e9a:	e067      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9c:	4b75      	ldr	r3, [pc, #468]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ea8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001eba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001ebe:	4622      	mov	r2, r4
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	f04f 0000 	mov.w	r0, #0
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	0159      	lsls	r1, r3, #5
 8001ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed0:	0150      	lsls	r0, r2, #5
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	1a51      	subs	r1, r2, r1
 8001eda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001edc:	4629      	mov	r1, r5
 8001ede:	eb63 0301 	sbc.w	r3, r3, r1
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	018b      	lsls	r3, r1, #6
 8001ef4:	4641      	mov	r1, r8
 8001ef6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001efa:	4641      	mov	r1, r8
 8001efc:	018a      	lsls	r2, r1, #6
 8001efe:	4641      	mov	r1, r8
 8001f00:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f04:	4649      	mov	r1, r9
 8001f06:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f1e:	4692      	mov	sl, r2
 8001f20:	469b      	mov	fp, r3
 8001f22:	4623      	mov	r3, r4
 8001f24:	eb1a 0303 	adds.w	r3, sl, r3
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	462b      	mov	r3, r5
 8001f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f3e:	4629      	mov	r1, r5
 8001f40:	028b      	lsls	r3, r1, #10
 8001f42:	4621      	mov	r1, r4
 8001f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f48:	4621      	mov	r1, r4
 8001f4a:	028a      	lsls	r2, r1, #10
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f54:	2200      	movs	r2, #0
 8001f56:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f58:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f5e:	f7fe f9af 	bl	80002c0 <__aeabi_uldivmod>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4613      	mov	r3, r2
 8001f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f6c:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	3301      	adds	r3, #1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001f7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f8e:	e0eb      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f90:	4b38      	ldr	r3, [pc, #224]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9c:	4b35      	ldr	r3, [pc, #212]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d06b      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa8:	4b32      	ldr	r3, [pc, #200]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x354>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	2200      	movs	r2, #0
 8001fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001fb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fba:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001fc4:	4622      	mov	r2, r4
 8001fc6:	462b      	mov	r3, r5
 8001fc8:	f04f 0000 	mov.w	r0, #0
 8001fcc:	f04f 0100 	mov.w	r1, #0
 8001fd0:	0159      	lsls	r1, r3, #5
 8001fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd6:	0150      	lsls	r0, r2, #5
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4621      	mov	r1, r4
 8001fde:	1a51      	subs	r1, r2, r1
 8001fe0:	61b9      	str	r1, [r7, #24]
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ff6:	4659      	mov	r1, fp
 8001ff8:	018b      	lsls	r3, r1, #6
 8001ffa:	4651      	mov	r1, sl
 8001ffc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002000:	4651      	mov	r1, sl
 8002002:	018a      	lsls	r2, r1, #6
 8002004:	4651      	mov	r1, sl
 8002006:	ebb2 0801 	subs.w	r8, r2, r1
 800200a:	4659      	mov	r1, fp
 800200c:	eb63 0901 	sbc.w	r9, r3, r1
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800201c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002020:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002024:	4690      	mov	r8, r2
 8002026:	4699      	mov	r9, r3
 8002028:	4623      	mov	r3, r4
 800202a:	eb18 0303 	adds.w	r3, r8, r3
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	462b      	mov	r3, r5
 8002032:	eb49 0303 	adc.w	r3, r9, r3
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002044:	4629      	mov	r1, r5
 8002046:	024b      	lsls	r3, r1, #9
 8002048:	4621      	mov	r1, r4
 800204a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800204e:	4621      	mov	r1, r4
 8002050:	024a      	lsls	r2, r1, #9
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800205a:	2200      	movs	r2, #0
 800205c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800205e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002060:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002064:	f7fe f92c 	bl	80002c0 <__aeabi_uldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4613      	mov	r3, r2
 800206e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002072:	e065      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x420>
 8002074:	40023800 	.word	0x40023800
 8002078:	00f42400 	.word	0x00f42400
 800207c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002080:	4b3d      	ldr	r3, [pc, #244]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x458>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	2200      	movs	r2, #0
 8002088:	4618      	mov	r0, r3
 800208a:	4611      	mov	r1, r2
 800208c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002090:	653b      	str	r3, [r7, #80]	@ 0x50
 8002092:	2300      	movs	r3, #0
 8002094:	657b      	str	r3, [r7, #84]	@ 0x54
 8002096:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800209a:	4642      	mov	r2, r8
 800209c:	464b      	mov	r3, r9
 800209e:	f04f 0000 	mov.w	r0, #0
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	0159      	lsls	r1, r3, #5
 80020a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ac:	0150      	lsls	r0, r2, #5
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4641      	mov	r1, r8
 80020b4:	1a51      	subs	r1, r2, r1
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	4649      	mov	r1, r9
 80020ba:	eb63 0301 	sbc.w	r3, r3, r1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80020cc:	4659      	mov	r1, fp
 80020ce:	018b      	lsls	r3, r1, #6
 80020d0:	4651      	mov	r1, sl
 80020d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020d6:	4651      	mov	r1, sl
 80020d8:	018a      	lsls	r2, r1, #6
 80020da:	4651      	mov	r1, sl
 80020dc:	1a54      	subs	r4, r2, r1
 80020de:	4659      	mov	r1, fp
 80020e0:	eb63 0501 	sbc.w	r5, r3, r1
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	00eb      	lsls	r3, r5, #3
 80020ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f2:	00e2      	lsls	r2, r4, #3
 80020f4:	4614      	mov	r4, r2
 80020f6:	461d      	mov	r5, r3
 80020f8:	4643      	mov	r3, r8
 80020fa:	18e3      	adds	r3, r4, r3
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	464b      	mov	r3, r9
 8002100:	eb45 0303 	adc.w	r3, r5, r3
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002112:	4629      	mov	r1, r5
 8002114:	028b      	lsls	r3, r1, #10
 8002116:	4621      	mov	r1, r4
 8002118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800211c:	4621      	mov	r1, r4
 800211e:	028a      	lsls	r2, r1, #10
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002128:	2200      	movs	r2, #0
 800212a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800212c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800212e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002132:	f7fe f8c5 	bl	80002c0 <__aeabi_uldivmod>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4613      	mov	r3, r2
 800213c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002140:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x458>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	0f1b      	lsrs	r3, r3, #28
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800214e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800215e:	e003      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002166:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002168:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800216c:	4618      	mov	r0, r3
 800216e:	37b8      	adds	r7, #184	@ 0xb8
 8002170:	46bd      	mov	sp, r7
 8002172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	00f42400 	.word	0x00f42400

08002180 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e28d      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8083 	beq.w	80022a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021a0:	4b94      	ldr	r3, [pc, #592]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d019      	beq.n	80021e0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021ac:	4b91      	ldr	r3, [pc, #580]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
        || \
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021b8:	4b8e      	ldr	r3, [pc, #568]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c4:	d00c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	4b8b      	ldr	r3, [pc, #556]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d112      	bne.n	80021f8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	4b88      	ldr	r3, [pc, #544]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021de:	d10b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	4b84      	ldr	r3, [pc, #528]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d05b      	beq.n	80022a4 <HAL_RCC_OscConfig+0x124>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d157      	bne.n	80022a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e25a      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x90>
 8002202:	4b7c      	ldr	r3, [pc, #496]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7b      	ldr	r2, [pc, #492]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xcc>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0xb4>
 800221a:	4b76      	ldr	r3, [pc, #472]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a75      	ldr	r2, [pc, #468]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a72      	ldr	r2, [pc, #456]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xcc>
 8002234:	4b6f      	ldr	r3, [pc, #444]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6e      	ldr	r2, [pc, #440]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b6c      	ldr	r3, [pc, #432]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6b      	ldr	r2, [pc, #428]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe fde8 	bl	8000e28 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe fde4 	bl	8000e28 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e21f      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b61      	ldr	r3, [pc, #388]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xdc>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fdd4 	bl	8000e28 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fdd0 	bl	8000e28 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	@ 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e20b      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b57      	ldr	r3, [pc, #348]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x104>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d06f      	beq.n	8002392 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022b2:	4b50      	ldr	r3, [pc, #320]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d017      	beq.n	80022ee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022be:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022ca:	4b4a      	ldr	r3, [pc, #296]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d6:	4b47      	ldr	r3, [pc, #284]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d11c      	bne.n	800231c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e2:	4b44      	ldr	r3, [pc, #272]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_RCC_OscConfig+0x186>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1d3      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b3b      	ldr	r3, [pc, #236]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4937      	ldr	r1, [pc, #220]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	e03a      	b.n	8002392 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	4b34      	ldr	r3, [pc, #208]	@ (80023f8 <HAL_RCC_OscConfig+0x278>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fd7d 	bl	8000e28 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002332:	f7fe fd79 	bl	8000e28 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1b4      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	4b2b      	ldr	r3, [pc, #172]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b28      	ldr	r3, [pc, #160]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4925      	ldr	r1, [pc, #148]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e015      	b.n	8002392 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002366:	4b24      	ldr	r3, [pc, #144]	@ (80023f8 <HAL_RCC_OscConfig+0x278>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fd5c 	bl	8000e28 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7fe fd58 	bl	8000e28 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e193      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d036      	beq.n	800240c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <HAL_RCC_OscConfig+0x27c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7fe fd3c 	bl	8000e28 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7fe fd38 	bl	8000e28 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e173      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x234>
 80023d2:	e01b      	b.n	800240c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d4:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_RCC_OscConfig+0x27c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7fe fd25 	bl	8000e28 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	e00e      	b.n	8002400 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e2:	f7fe fd21 	bl	8000e28 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d907      	bls.n	8002400 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e15c      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
 80023f4:	40023800 	.word	0x40023800
 80023f8:	42470000 	.word	0x42470000
 80023fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	4b8a      	ldr	r3, [pc, #552]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ea      	bne.n	80023e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8097 	beq.w	8002548 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241e:	4b83      	ldr	r3, [pc, #524]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	4b7f      	ldr	r3, [pc, #508]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a7e      	ldr	r2, [pc, #504]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b7c      	ldr	r3, [pc, #496]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b79      	ldr	r3, [pc, #484]	@ (8002630 <HAL_RCC_OscConfig+0x4b0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002456:	4b76      	ldr	r3, [pc, #472]	@ (8002630 <HAL_RCC_OscConfig+0x4b0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a75      	ldr	r2, [pc, #468]	@ (8002630 <HAL_RCC_OscConfig+0x4b0>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002462:	f7fe fce1 	bl	8000e28 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246a:	f7fe fcdd 	bl	8000e28 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e118      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	4b6c      	ldr	r3, [pc, #432]	@ (8002630 <HAL_RCC_OscConfig+0x4b0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x31e>
 8002490:	4b66      	ldr	r3, [pc, #408]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002494:	4a65      	ldr	r2, [pc, #404]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	@ 0x70
 800249c:	e01c      	b.n	80024d8 <HAL_RCC_OscConfig+0x358>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x340>
 80024a6:	4b61      	ldr	r3, [pc, #388]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024aa:	4a60      	ldr	r2, [pc, #384]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b2:	4b5e      	ldr	r3, [pc, #376]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	4a5d      	ldr	r2, [pc, #372]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x358>
 80024c0:	4b5a      	ldr	r3, [pc, #360]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c4:	4a59      	ldr	r2, [pc, #356]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80024cc:	4b57      	ldr	r3, [pc, #348]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d0:	4a56      	ldr	r2, [pc, #344]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80024d2:	f023 0304 	bic.w	r3, r3, #4
 80024d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d015      	beq.n	800250c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7fe fca2 	bl	8000e28 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe fc9e 	bl	8000e28 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0d7      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	4b4b      	ldr	r3, [pc, #300]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0ee      	beq.n	80024e8 <HAL_RCC_OscConfig+0x368>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe fc8c 	bl	8000e28 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fc88 	bl	8000e28 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0c1      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252a:	4b40      	ldr	r3, [pc, #256]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ee      	bne.n	8002514 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002536:	7dfb      	ldrb	r3, [r7, #23]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b3b      	ldr	r3, [pc, #236]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	4a3a      	ldr	r2, [pc, #232]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002546:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80ad 	beq.w	80026ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002552:	4b36      	ldr	r3, [pc, #216]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b08      	cmp	r3, #8
 800255c:	d060      	beq.n	8002620 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d145      	bne.n	80025f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b33      	ldr	r3, [pc, #204]	@ (8002634 <HAL_RCC_OscConfig+0x4b4>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fc5c 	bl	8000e28 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe fc58 	bl	8000e28 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e093      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	4b29      	ldr	r3, [pc, #164]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	071b      	lsls	r3, r3, #28
 80025be:	491b      	ldr	r1, [pc, #108]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002634 <HAL_RCC_OscConfig+0x4b4>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe fc2d 	bl	8000e28 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d2:	f7fe fc29 	bl	8000e28 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e064      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x452>
 80025f0:	e05c      	b.n	80026ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <HAL_RCC_OscConfig+0x4b4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fc16 	bl	8000e28 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7fe fc12 	bl	8000e28 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e04d      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_RCC_OscConfig+0x4ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x480>
 800261e:	e045      	b.n	80026ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d107      	bne.n	8002638 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e040      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000
 8002634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002638:	4b1f      	ldr	r3, [pc, #124]	@ (80026b8 <HAL_RCC_OscConfig+0x538>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d030      	beq.n	80026a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d129      	bne.n	80026a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d122      	bne.n	80026a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800266e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002670:	4293      	cmp	r3, r2
 8002672:	d119      	bne.n	80026a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	3b01      	subs	r3, #1
 8002682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d10f      	bne.n	80026a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800

080026bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e041      	b.n	8002752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe f99a 	bl	8000a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f000 fa7e 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d001      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e04e      	b.n	8002812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a23      	ldr	r2, [pc, #140]	@ (8002820 <HAL_TIM_Base_Start_IT+0xc4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d022      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279e:	d01d      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002824 <HAL_TIM_Base_Start_IT+0xc8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d018      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002828 <HAL_TIM_Base_Start_IT+0xcc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d013      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <HAL_TIM_Base_Start_IT+0xd0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00e      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <HAL_TIM_Base_Start_IT+0xd4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a19      	ldr	r2, [pc, #100]	@ (8002834 <HAL_TIM_Base_Start_IT+0xd8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a18      	ldr	r2, [pc, #96]	@ (8002838 <HAL_TIM_Base_Start_IT+0xdc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d111      	bne.n	8002800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d010      	beq.n	8002810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fe:	e007      	b.n	8002810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800
 800282c:	40000c00 	.word	0x40000c00
 8002830:	40010400 	.word	0x40010400
 8002834:	40014000 	.word	0x40014000
 8002838:	40001800 	.word	0x40001800

0800283c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0202 	mvn.w	r2, #2
 8002870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f999 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f98b 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f99c 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d020      	beq.n	80028ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0204 	mvn.w	r2, #4
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f973 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f965 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f976 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d020      	beq.n	8002938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0208 	mvn.w	r2, #8
 8002908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2204      	movs	r2, #4
 800290e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f94d 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f93f 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f950 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d020      	beq.n	8002984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0210 	mvn.w	r2, #16
 8002954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2208      	movs	r2, #8
 800295a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f927 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f919 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f92a 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0201 	mvn.w	r2, #1
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd ffea 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fade 	bl	8002f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f8fb 	bl	8002be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0220 	mvn.w	r2, #32
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fab0 	bl	8002f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_TIM_ConfigClockSource+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e0b4      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x186>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a70:	d03e      	beq.n	8002af0 <HAL_TIM_ConfigClockSource+0xd4>
 8002a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a76:	f200 8087 	bhi.w	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7e:	f000 8086 	beq.w	8002b8e <HAL_TIM_ConfigClockSource+0x172>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a86:	d87f      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a88:	2b70      	cmp	r3, #112	@ 0x70
 8002a8a:	d01a      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8002a8c:	2b70      	cmp	r3, #112	@ 0x70
 8002a8e:	d87b      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b60      	cmp	r3, #96	@ 0x60
 8002a92:	d050      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x11a>
 8002a94:	2b60      	cmp	r3, #96	@ 0x60
 8002a96:	d877      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b50      	cmp	r3, #80	@ 0x50
 8002a9a:	d03c      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0xfa>
 8002a9c:	2b50      	cmp	r3, #80	@ 0x50
 8002a9e:	d873      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b40      	cmp	r3, #64	@ 0x40
 8002aa2:	d058      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x13a>
 8002aa4:	2b40      	cmp	r3, #64	@ 0x40
 8002aa6:	d86f      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b30      	cmp	r3, #48	@ 0x30
 8002aaa:	d064      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002aac:	2b30      	cmp	r3, #48	@ 0x30
 8002aae:	d86b      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d060      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d867      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05c      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d05a      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac0:	e062      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ad2:	f000 f9b3 	bl	8002e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	609a      	str	r2, [r3, #8]
      break;
 8002aee:	e04f      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b00:	f000 f99c 	bl	8002e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b12:	609a      	str	r2, [r3, #8]
      break;
 8002b14:	e03c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 f910 	bl	8002d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2150      	movs	r1, #80	@ 0x50
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f969 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b34:	e02c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 f92f 	bl	8002da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2160      	movs	r1, #96	@ 0x60
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f959 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b54:	e01c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 f8f0 	bl	8002d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2140      	movs	r1, #64	@ 0x40
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f949 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b74:	e00c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 f940 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b86:	e003      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e000      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a43      	ldr	r2, [pc, #268]	@ (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1a:	d00f      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a40      	ldr	r2, [pc, #256]	@ (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3f      	ldr	r2, [pc, #252]	@ (8002d24 <TIM_Base_SetConfig+0x128>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d28 <TIM_Base_SetConfig+0x12c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3d      	ldr	r2, [pc, #244]	@ (8002d2c <TIM_Base_SetConfig+0x130>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a32      	ldr	r2, [pc, #200]	@ (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c5c:	d027      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2f      	ldr	r2, [pc, #188]	@ (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d023      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2e      	ldr	r2, [pc, #184]	@ (8002d24 <TIM_Base_SetConfig+0x128>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2d      	ldr	r2, [pc, #180]	@ (8002d28 <TIM_Base_SetConfig+0x12c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a2c      	ldr	r2, [pc, #176]	@ (8002d2c <TIM_Base_SetConfig+0x130>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d017      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a2b      	ldr	r2, [pc, #172]	@ (8002d30 <TIM_Base_SetConfig+0x134>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2a      	ldr	r2, [pc, #168]	@ (8002d34 <TIM_Base_SetConfig+0x138>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a29      	ldr	r2, [pc, #164]	@ (8002d38 <TIM_Base_SetConfig+0x13c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a28      	ldr	r2, [pc, #160]	@ (8002d3c <TIM_Base_SetConfig+0x140>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a27      	ldr	r2, [pc, #156]	@ (8002d40 <TIM_Base_SetConfig+0x144>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a26      	ldr	r2, [pc, #152]	@ (8002d44 <TIM_Base_SetConfig+0x148>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8002d1c <TIM_Base_SetConfig+0x120>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d003      	beq.n	8002cee <TIM_Base_SetConfig+0xf2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a10      	ldr	r2, [pc, #64]	@ (8002d2c <TIM_Base_SetConfig+0x130>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d103      	bne.n	8002cf6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40010400 	.word	0x40010400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40001800 	.word	0x40001800
 8002d40:	40001c00 	.word	0x40001c00
 8002d44:	40002000 	.word	0x40002000

08002d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f023 030a 	bic.w	r3, r3, #10
 8002d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b087      	sub	sp, #28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f023 0210 	bic.w	r2, r3, #16
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	031b      	lsls	r3, r3, #12
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 0307 	orr.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e05a      	b.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a21      	ldr	r2, [pc, #132]	@ (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee0:	d01d      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d018      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1a      	ldr	r2, [pc, #104]	@ (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a17      	ldr	r2, [pc, #92]	@ (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10c      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40010400 	.word	0x40010400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40001800 	.word	0x40001800

08002f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e042      	b.n	8003034 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fd50 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	@ 0x24
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fc99 	bl	8003918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b0ba      	sub	sp, #232	@ 0xe8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800307a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_UART_IRQHandler+0x66>
 800308e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fb7e 	bl	800379c <UART_Receive_IT>
      return;
 80030a0:	e273      	b.n	800358a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80de 	beq.w	8003268 <HAL_UART_IRQHandler+0x22c>
 80030ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80d1 	beq.w	8003268 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0xae>
 80030d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	f043 0201 	orr.w	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0xd2>
 80030f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_UART_IRQHandler+0xf6>
 800311a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	f043 0204 	orr.w	r2, r3, #4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d011      	beq.n	8003162 <HAL_UART_IRQHandler+0x126>
 800313e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800314a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f043 0208 	orr.w	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 820a 	beq.w	8003580 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_UART_IRQHandler+0x14e>
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fb09 	bl	800379c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003194:	2b40      	cmp	r3, #64	@ 0x40
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <HAL_UART_IRQHandler+0x17a>
 80031ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04f      	beq.n	8003256 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fa14 	bl	80035e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d141      	bne.n	800324e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3314      	adds	r3, #20
 80031d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3314      	adds	r3, #20
 80031f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800320e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1d9      	bne.n	80031ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003222:	4a8a      	ldr	r2, [pc, #552]	@ (800344c <HAL_UART_IRQHandler+0x410>)
 8003224:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe f808 	bl	8001240 <HAL_DMA_Abort_IT>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e00e      	b.n	8003264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f9b6 	bl	80035b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e00a      	b.n	8003264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f9b2 	bl	80035b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e006      	b.n	8003264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9ae 	bl	80035b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003262:	e18d      	b.n	8003580 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	bf00      	nop
    return;
 8003266:	e18b      	b.n	8003580 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 8167 	bne.w	8003540 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8160 	beq.w	8003540 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8159 	beq.w	8003540 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b40      	cmp	r3, #64	@ 0x40
 80032b0:	f040 80ce 	bne.w	8003450 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a9 	beq.w	800341c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032d2:	429a      	cmp	r2, r3
 80032d4:	f080 80a2 	bcs.w	800341c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ea:	f000 8088 	beq.w	80033fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800331a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800331e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003326:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003332:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1d9      	bne.n	80032ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800334a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3314      	adds	r3, #20
 800335a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800335e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003362:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003366:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e1      	bne.n	800333a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800338c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3314      	adds	r3, #20
 8003396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800339a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800339c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e3      	bne.n	8003376 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ce:	f023 0310 	bic.w	r3, r3, #16
 80033d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e3      	bne.n	80033bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd feb1 	bl	8001160 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800340c:	b29b      	uxth	r3, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f8d9 	bl	80035cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800341a:	e0b3      	b.n	8003584 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003420:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003424:	429a      	cmp	r2, r3
 8003426:	f040 80ad 	bne.w	8003584 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003434:	f040 80a6 	bne.w	8003584 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f8c1 	bl	80035cc <HAL_UARTEx_RxEventCallback>
      return;
 800344a:	e09b      	b.n	8003584 <HAL_UART_IRQHandler+0x548>
 800344c:	080036ab 	.word	0x080036ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003458:	b29b      	uxth	r3, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 808e 	beq.w	8003588 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800346c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8089 	beq.w	8003588 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003488:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800348c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800349a:	647a      	str	r2, [r7, #68]	@ 0x44
 800349c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e3      	bne.n	8003476 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3314      	adds	r3, #20
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	623b      	str	r3, [r7, #32]
   return(result);
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3314      	adds	r3, #20
 80034ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e3      	bne.n	80034ae <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	60fb      	str	r3, [r7, #12]
   return(result);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0310 	bic.w	r3, r3, #16
 800350a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003518:	61fa      	str	r2, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	69b9      	ldr	r1, [r7, #24]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	617b      	str	r3, [r7, #20]
   return(result);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e3      	bne.n	80034f4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003532:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f847 	bl	80035cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800353e:	e023      	b.n	8003588 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_UART_IRQHandler+0x524>
 800354c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f8b7 	bl	80036cc <UART_Transmit_IT>
    return;
 800355e:	e014      	b.n	800358a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <HAL_UART_IRQHandler+0x54e>
 800356c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8f7 	bl	800376c <UART_EndTransmit_IT>
    return;
 800357e:	e004      	b.n	800358a <HAL_UART_IRQHandler+0x54e>
    return;
 8003580:	bf00      	nop
 8003582:	e002      	b.n	800358a <HAL_UART_IRQHandler+0x54e>
      return;
 8003584:	bf00      	nop
 8003586:	e000      	b.n	800358a <HAL_UART_IRQHandler+0x54e>
      return;
 8003588:	bf00      	nop
  }
}
 800358a:	37e8      	adds	r7, #232	@ 0xe8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b095      	sub	sp, #84	@ 0x54
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800360c:	643a      	str	r2, [r7, #64]	@ 0x40
 800360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3314      	adds	r3, #20
 8003626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3314      	adds	r3, #20
 800363e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003640:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003642:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e5      	bne.n	8003620 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	2b01      	cmp	r3, #1
 800365a:	d119      	bne.n	8003690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	60bb      	str	r3, [r7, #8]
   return(result);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f023 0310 	bic.w	r3, r3, #16
 8003672:	647b      	str	r3, [r7, #68]	@ 0x44
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800367c:	61ba      	str	r2, [r7, #24]
 800367e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6979      	ldr	r1, [r7, #20]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	613b      	str	r3, [r7, #16]
   return(result);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800369e:	bf00      	nop
 80036a0:	3754      	adds	r7, #84	@ 0x54
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff ff7a 	bl	80035b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b21      	cmp	r3, #33	@ 0x21
 80036de:	d13e      	bne.n	800375e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e8:	d114      	bne.n	8003714 <UART_Transmit_IT+0x48>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d110      	bne.n	8003714 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003706:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]
 8003712:	e008      	b.n	8003726 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	1c59      	adds	r1, r3, #1
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6211      	str	r1, [r2, #32]
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29b      	uxth	r3, r3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4619      	mov	r1, r3
 8003734:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003748:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003758:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003782:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff feff 	bl	8003590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	@ 0x30
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b22      	cmp	r3, #34	@ 0x22
 80037b6:	f040 80aa 	bne.w	800390e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c2:	d115      	bne.n	80037f0 <UART_Receive_IT+0x54>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d111      	bne.n	80037f0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	b29a      	uxth	r2, r3
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	1c9a      	adds	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80037ee:	e024      	b.n	800383a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fe:	d007      	beq.n	8003810 <UART_Receive_IT+0x74>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <UART_Receive_IT+0x82>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e008      	b.n	8003830 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800382a:	b2da      	uxtb	r2, r3
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29b      	uxth	r3, r3
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4619      	mov	r1, r3
 8003848:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800384a:	2b00      	cmp	r3, #0
 800384c:	d15d      	bne.n	800390a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0220 	bic.w	r2, r2, #32
 800385c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800386c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	2b01      	cmp	r3, #1
 8003892:	d135      	bne.n	8003900 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	613b      	str	r3, [r7, #16]
   return(result);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f023 0310 	bic.w	r3, r3, #16
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ba:	623a      	str	r2, [r7, #32]
 80038bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	69f9      	ldr	r1, [r7, #28]
 80038c0:	6a3a      	ldr	r2, [r7, #32]
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e5      	bne.n	800389a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d10a      	bne.n	80038f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fe67 	bl	80035cc <HAL_UARTEx_RxEventCallback>
 80038fe:	e002      	b.n	8003906 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fe4f 	bl	80035a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e002      	b.n	8003910 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3730      	adds	r7, #48	@ 0x30
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b0c0      	sub	sp, #256	@ 0x100
 800391e:	af00      	add	r7, sp, #0
 8003920:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	68d9      	ldr	r1, [r3, #12]
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	ea40 0301 	orr.w	r3, r0, r1
 8003940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	431a      	orrs	r2, r3
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	431a      	orrs	r2, r3
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003970:	f021 010c 	bic.w	r1, r1, #12
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800397e:	430b      	orrs	r3, r1
 8003980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003992:	6999      	ldr	r1, [r3, #24]
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	ea40 0301 	orr.w	r3, r0, r1
 800399e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b8f      	ldr	r3, [pc, #572]	@ (8003be4 <UART_SetConfig+0x2cc>)
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d005      	beq.n	80039b8 <UART_SetConfig+0xa0>
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b8d      	ldr	r3, [pc, #564]	@ (8003be8 <UART_SetConfig+0x2d0>)
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d104      	bne.n	80039c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7fe f96c 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 80039bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039c0:	e003      	b.n	80039ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039c2:	f7fe f953 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
 80039c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d4:	f040 810c 	bne.w	8003bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	1891      	adds	r1, r2, r2
 80039f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039f2:	415b      	adcs	r3, r3
 80039f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039fa:	4621      	mov	r1, r4
 80039fc:	eb12 0801 	adds.w	r8, r2, r1
 8003a00:	4629      	mov	r1, r5
 8003a02:	eb43 0901 	adc.w	r9, r3, r1
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1a:	4690      	mov	r8, r2
 8003a1c:	4699      	mov	r9, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	eb18 0303 	adds.w	r3, r8, r3
 8003a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a28:	462b      	mov	r3, r5
 8003a2a:	eb49 0303 	adc.w	r3, r9, r3
 8003a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a46:	460b      	mov	r3, r1
 8003a48:	18db      	adds	r3, r3, r3
 8003a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	eb42 0303 	adc.w	r3, r2, r3
 8003a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a5c:	f7fc fc30 	bl	80002c0 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4b61      	ldr	r3, [pc, #388]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003a66:	fba3 2302 	umull	r2, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	011c      	lsls	r4, r3, #4
 8003a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a90:	4641      	mov	r1, r8
 8003a92:	eb12 0a01 	adds.w	sl, r2, r1
 8003a96:	4649      	mov	r1, r9
 8003a98:	eb43 0b01 	adc.w	fp, r3, r1
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab0:	4692      	mov	sl, r2
 8003ab2:	469b      	mov	fp, r3
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003adc:	460b      	mov	r3, r1
 8003ade:	18db      	adds	r3, r3, r3
 8003ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003af2:	f7fc fbe5 	bl	80002c0 <__aeabi_uldivmod>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003afe:	fba3 2301 	umull	r2, r3, r3, r1
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2264      	movs	r2, #100	@ 0x64
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	1acb      	subs	r3, r1, r3
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b12:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003b14:	fba3 2302 	umull	r2, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b20:	441c      	add	r4, r3
 8003b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b34:	4642      	mov	r2, r8
 8003b36:	464b      	mov	r3, r9
 8003b38:	1891      	adds	r1, r2, r2
 8003b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b3c:	415b      	adcs	r3, r3
 8003b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b44:	4641      	mov	r1, r8
 8003b46:	1851      	adds	r1, r2, r1
 8003b48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	414b      	adcs	r3, r1
 8003b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	00cb      	lsls	r3, r1, #3
 8003b60:	4651      	mov	r1, sl
 8003b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b66:	4651      	mov	r1, sl
 8003b68:	00ca      	lsls	r2, r1, #3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4642      	mov	r2, r8
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b78:	464b      	mov	r3, r9
 8003b7a:	460a      	mov	r2, r1
 8003b7c:	eb42 0303 	adc.w	r3, r2, r3
 8003b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b98:	460b      	mov	r3, r1
 8003b9a:	18db      	adds	r3, r3, r3
 8003b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	eb42 0303 	adc.w	r3, r2, r3
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bae:	f7fc fb87 	bl	80002c0 <__aeabi_uldivmod>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	2164      	movs	r1, #100	@ 0x64
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	3332      	adds	r3, #50	@ 0x32
 8003bca:	4a08      	ldr	r2, [pc, #32]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 0207 	and.w	r2, r3, #7
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4422      	add	r2, r4
 8003bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be0:	e106      	b.n	8003df0 <UART_SetConfig+0x4d8>
 8003be2:	bf00      	nop
 8003be4:	40011000 	.word	0x40011000
 8003be8:	40011400 	.word	0x40011400
 8003bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c02:	4642      	mov	r2, r8
 8003c04:	464b      	mov	r3, r9
 8003c06:	1891      	adds	r1, r2, r2
 8003c08:	6239      	str	r1, [r7, #32]
 8003c0a:	415b      	adcs	r3, r3
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c12:	4641      	mov	r1, r8
 8003c14:	1854      	adds	r4, r2, r1
 8003c16:	4649      	mov	r1, r9
 8003c18:	eb43 0501 	adc.w	r5, r3, r1
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	00eb      	lsls	r3, r5, #3
 8003c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2a:	00e2      	lsls	r2, r4, #3
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	461d      	mov	r5, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	18e3      	adds	r3, r4, r3
 8003c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c38:	464b      	mov	r3, r9
 8003c3a:	eb45 0303 	adc.w	r3, r5, r3
 8003c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c5e:	4629      	mov	r1, r5
 8003c60:	008b      	lsls	r3, r1, #2
 8003c62:	4621      	mov	r1, r4
 8003c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c68:	4621      	mov	r1, r4
 8003c6a:	008a      	lsls	r2, r1, #2
 8003c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c70:	f7fc fb26 	bl	80002c0 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4b60      	ldr	r3, [pc, #384]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	011c      	lsls	r4, r3, #4
 8003c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	1891      	adds	r1, r2, r2
 8003c9a:	61b9      	str	r1, [r7, #24]
 8003c9c:	415b      	adcs	r3, r3
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	1851      	adds	r1, r2, r1
 8003ca8:	6139      	str	r1, [r7, #16]
 8003caa:	4649      	mov	r1, r9
 8003cac:	414b      	adcs	r3, r1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	00cb      	lsls	r3, r1, #3
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	00ca      	lsls	r2, r1, #3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cd8:	464b      	mov	r3, r9
 8003cda:	460a      	mov	r2, r1
 8003cdc:	eb42 0303 	adc.w	r3, r2, r3
 8003ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	008b      	lsls	r3, r1, #2
 8003d00:	4641      	mov	r1, r8
 8003d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d06:	4641      	mov	r1, r8
 8003d08:	008a      	lsls	r2, r1, #2
 8003d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d0e:	f7fc fad7 	bl	80002c0 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	4b38      	ldr	r3, [pc, #224]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2264      	movs	r2, #100	@ 0x64
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	1acb      	subs	r3, r1, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	3332      	adds	r3, #50	@ 0x32
 8003d2c:	4a33      	ldr	r2, [pc, #204]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d38:	441c      	add	r4, r3
 8003d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d3e:	2200      	movs	r2, #0
 8003d40:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d42:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	1891      	adds	r1, r2, r2
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	415b      	adcs	r3, r3
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d58:	4641      	mov	r1, r8
 8003d5a:	1851      	adds	r1, r2, r1
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	4649      	mov	r1, r9
 8003d60:	414b      	adcs	r3, r1
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d70:	4659      	mov	r1, fp
 8003d72:	00cb      	lsls	r3, r1, #3
 8003d74:	4651      	mov	r1, sl
 8003d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	00ca      	lsls	r2, r1, #3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	4642      	mov	r2, r8
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	eb42 0303 	adc.w	r3, r2, r3
 8003d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dac:	4649      	mov	r1, r9
 8003dae:	008b      	lsls	r3, r1, #2
 8003db0:	4641      	mov	r1, r8
 8003db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db6:	4641      	mov	r1, r8
 8003db8:	008a      	lsls	r2, r1, #2
 8003dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dbe:	f7fc fa7f 	bl	80002c0 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	2164      	movs	r1, #100	@ 0x64
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	3332      	adds	r3, #50	@ 0x32
 8003dda:	4a08      	ldr	r2, [pc, #32]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4422      	add	r2, r4
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003df6:	46bd      	mov	sp, r7
 8003df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfc:	51eb851f 	.word	0x51eb851f

08003e00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e04:	f000 fee4 	bl	8004bd0 <vTaskStartScheduler>
  
  return osOK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f103 0208 	add.w	r2, r3, #8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f103 0208 	add.w	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f103 0208 	add.w	r2, r3, #8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d103      	bne.n	8003ed0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	e00c      	b.n	8003eea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e002      	b.n	8003ede <vListInsert+0x2e>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d2f6      	bcs.n	8003ed8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6892      	ldr	r2, [r2, #8]
 8003f38:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6852      	ldr	r2, [r2, #4]
 8003f42:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d103      	bne.n	8003f56 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	1e5a      	subs	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fa4:	f001 fc78 	bl	8005898 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	441a      	add	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	22ff      	movs	r2, #255	@ 0xff
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	22ff      	movs	r2, #255	@ 0xff
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d114      	bne.n	8004024 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01a      	beq.n	8004038 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3310      	adds	r3, #16
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f84a 	bl	80050a0 <xTaskRemoveFromEventList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d012      	beq.n	8004038 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <xQueueGenericReset+0xd0>)
 8004014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	e009      	b.n	8004038 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3310      	adds	r3, #16
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fef0 	bl	8003e0e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3324      	adds	r3, #36	@ 0x24
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff feeb 	bl	8003e0e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004038:	f001 fc60 	bl	80058fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800403c:	2301      	movs	r3, #1
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	@ 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	613b      	str	r3, [r7, #16]
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3350      	adds	r3, #80	@ 0x50
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fce6 	bl	8005a58 <pvPortMalloc>
 800408c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d011      	beq.n	80040b8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3350      	adds	r3, #80	@ 0x50
 800409c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040a6:	79fa      	ldrb	r2, [r7, #7]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f805 	bl	80040c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040b8:	69bb      	ldr	r3, [r7, #24]
	}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e002      	b.n	80040e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040f0:	2101      	movs	r1, #1
 80040f2:	69b8      	ldr	r0, [r7, #24]
 80040f4:	f7ff ff40 	bl	8003f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	@ 0x38
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004116:	2300      	movs	r3, #0
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <xQueueGenericSend+0x34>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <xQueueGenericSend+0x42>
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <xQueueGenericSend+0x46>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <xQueueGenericSend+0x48>
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <xQueueGenericSend+0x64>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d103      	bne.n	800417a <xQueueGenericSend+0x72>
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <xQueueGenericSend+0x76>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericSend+0x78>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <xQueueGenericSend+0x94>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	623b      	str	r3, [r7, #32]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800419c:	f001 f942 	bl	8005424 <xTaskGetSchedulerState>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <xQueueGenericSend+0xa4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <xQueueGenericSend+0xa8>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <xQueueGenericSend+0xaa>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10b      	bne.n	80041ce <xQueueGenericSend+0xc6>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61fb      	str	r3, [r7, #28]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ce:	f001 fb63 	bl	8005898 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <xQueueGenericSend+0xdc>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d129      	bne.n	8004238 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041ea:	f000 f971 	bl	80044d0 <prvCopyDataToQueue>
 80041ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d010      	beq.n	800421a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	3324      	adds	r3, #36	@ 0x24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 ff4f 	bl	80050a0 <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004208:	4b3f      	ldr	r3, [pc, #252]	@ (8004308 <xQueueGenericSend+0x200>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	e00a      	b.n	8004230 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800421a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004220:	4b39      	ldr	r3, [pc, #228]	@ (8004308 <xQueueGenericSend+0x200>)
 8004222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004230:	f001 fb64 	bl	80058fc <vPortExitCritical>
				return pdPASS;
 8004234:	2301      	movs	r3, #1
 8004236:	e063      	b.n	8004300 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800423e:	f001 fb5d 	bl	80058fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004242:	2300      	movs	r3, #0
 8004244:	e05c      	b.n	8004300 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	4618      	mov	r0, r3
 8004252:	f000 ff89 	bl	8005168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800425a:	f001 fb4f 	bl	80058fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800425e:	f000 fd1b 	bl	8004c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004262:	f001 fb19 	bl	8005898 <vPortEnterCritical>
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800426c:	b25b      	sxtb	r3, r3
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d103      	bne.n	800427c <xQueueGenericSend+0x174>
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004282:	b25b      	sxtb	r3, r3
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d103      	bne.n	8004292 <xQueueGenericSend+0x18a>
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004292:	f001 fb33 	bl	80058fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004296:	1d3a      	adds	r2, r7, #4
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 ff78 	bl	8005194 <xTaskCheckForTimeOut>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d124      	bne.n	80042f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042ac:	f000 fa08 	bl	80046c0 <prvIsQueueFull>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d018      	beq.n	80042e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	3310      	adds	r3, #16
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fec8 	bl	8005054 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042c6:	f000 f993 	bl	80045f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ca:	f000 fcf3 	bl	8004cb4 <xTaskResumeAll>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f47f af7c 	bne.w	80041ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80042d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <xQueueGenericSend+0x200>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	e772      	b.n	80041ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042ea:	f000 f981 	bl	80045f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ee:	f000 fce1 	bl	8004cb4 <xTaskResumeAll>
 80042f2:	e76c      	b.n	80041ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042f6:	f000 f97b 	bl	80045f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042fa:	f000 fcdb 	bl	8004cb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004300:	4618      	mov	r0, r3
 8004302:	3738      	adds	r7, #56	@ 0x38
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08c      	sub	sp, #48	@ 0x30
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <xQueueReceive+0x32>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	623b      	str	r3, [r7, #32]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d103      	bne.n	800434c <xQueueReceive+0x40>
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <xQueueReceive+0x44>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <xQueueReceive+0x46>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <xQueueReceive+0x62>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	61fb      	str	r3, [r7, #28]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800436e:	f001 f859 	bl	8005424 <xTaskGetSchedulerState>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <xQueueReceive+0x72>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <xQueueReceive+0x76>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <xQueueReceive+0x78>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <xQueueReceive+0x94>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	61bb      	str	r3, [r7, #24]
}
 800439a:	bf00      	nop
 800439c:	bf00      	nop
 800439e:	e7fd      	b.n	800439c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043a0:	f001 fa7a 	bl	8005898 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01f      	beq.n	80043f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043b4:	f000 f8f6 	bl	80045a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	1e5a      	subs	r2, r3, #1
 80043bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00f      	beq.n	80043e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ca:	3310      	adds	r3, #16
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fe67 	bl	80050a0 <xTaskRemoveFromEventList>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043d8:	4b3c      	ldr	r3, [pc, #240]	@ (80044cc <xQueueReceive+0x1c0>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043e8:	f001 fa88 	bl	80058fc <vPortExitCritical>
				return pdPASS;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e069      	b.n	80044c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043f6:	f001 fa81 	bl	80058fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e062      	b.n	80044c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004404:	f107 0310 	add.w	r3, r7, #16
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fead 	bl	8005168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004412:	f001 fa73 	bl	80058fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004416:	f000 fc3f 	bl	8004c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800441a:	f001 fa3d 	bl	8005898 <vPortEnterCritical>
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004424:	b25b      	sxtb	r3, r3
 8004426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442a:	d103      	bne.n	8004434 <xQueueReceive+0x128>
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800443a:	b25b      	sxtb	r3, r3
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d103      	bne.n	800444a <xQueueReceive+0x13e>
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800444a:	f001 fa57 	bl	80058fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800444e:	1d3a      	adds	r2, r7, #4
 8004450:	f107 0310 	add.w	r3, r7, #16
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fe9c 	bl	8005194 <xTaskCheckForTimeOut>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d123      	bne.n	80044aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004464:	f000 f916 	bl	8004694 <prvIsQueueEmpty>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d017      	beq.n	800449e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	3324      	adds	r3, #36	@ 0x24
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fdec 	bl	8005054 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800447c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800447e:	f000 f8b7 	bl	80045f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004482:	f000 fc17 	bl	8004cb4 <xTaskResumeAll>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d189      	bne.n	80043a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800448c:	4b0f      	ldr	r3, [pc, #60]	@ (80044cc <xQueueReceive+0x1c0>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	e780      	b.n	80043a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800449e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a0:	f000 f8a6 	bl	80045f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a4:	f000 fc06 	bl	8004cb4 <xTaskResumeAll>
 80044a8:	e77a      	b.n	80043a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044ac:	f000 f8a0 	bl	80045f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044b0:	f000 fc00 	bl	8004cb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044b6:	f000 f8ed 	bl	8004694 <prvIsQueueEmpty>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f43f af6f 	beq.w	80043a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3730      	adds	r7, #48	@ 0x30
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d14d      	bne.n	8004592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ffb0 	bl	8005460 <xTaskPriorityDisinherit>
 8004500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	e043      	b.n	8004592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d119      	bne.n	8004544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6858      	ldr	r0, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	461a      	mov	r2, r3
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	f004 f917 	bl	800874e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	441a      	add	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d32b      	bcc.n	8004592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	e026      	b.n	8004592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68d8      	ldr	r0, [r3, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	461a      	mov	r2, r3
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	f004 f8fd 	bl	800874e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	425b      	negs	r3, r3
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d207      	bcs.n	8004580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	425b      	negs	r3, r3
 800457a:	441a      	add	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d105      	bne.n	8004592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3b01      	subs	r3, #1
 8004590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800459a:	697b      	ldr	r3, [r7, #20]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d018      	beq.n	80045e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	441a      	add	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d303      	bcc.n	80045d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68d9      	ldr	r1, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	461a      	mov	r2, r3
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f004 f8b3 	bl	800874e <memcpy>
	}
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045f8:	f001 f94e 	bl	8005898 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004604:	e011      	b.n	800462a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d012      	beq.n	8004634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3324      	adds	r3, #36	@ 0x24
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fd44 	bl	80050a0 <xTaskRemoveFromEventList>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800461e:	f000 fe1d 	bl	800525c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	3b01      	subs	r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800462a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	dce9      	bgt.n	8004606 <prvUnlockQueue+0x16>
 8004632:	e000      	b.n	8004636 <prvUnlockQueue+0x46>
					break;
 8004634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	22ff      	movs	r2, #255	@ 0xff
 800463a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800463e:	f001 f95d 	bl	80058fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004642:	f001 f929 	bl	8005898 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800464c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800464e:	e011      	b.n	8004674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3310      	adds	r3, #16
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fd1f 	bl	80050a0 <xTaskRemoveFromEventList>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004668:	f000 fdf8 	bl	800525c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800466c:	7bbb      	ldrb	r3, [r7, #14]
 800466e:	3b01      	subs	r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004678:	2b00      	cmp	r3, #0
 800467a:	dce9      	bgt.n	8004650 <prvUnlockQueue+0x60>
 800467c:	e000      	b.n	8004680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800467e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	22ff      	movs	r2, #255	@ 0xff
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004688:	f001 f938 	bl	80058fc <vPortExitCritical>
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800469c:	f001 f8fc 	bl	8005898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e001      	b.n	80046b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046b2:	f001 f923 	bl	80058fc <vPortExitCritical>

	return xReturn;
 80046b6:	68fb      	ldr	r3, [r7, #12]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046c8:	f001 f8e6 	bl	8005898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d102      	bne.n	80046de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	e001      	b.n	80046e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046e2:	f001 f90b 	bl	80058fc <vPortExitCritical>

	return xReturn;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	@ 0x38
 80046f4:	af04      	add	r7, sp, #16
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	623b      	str	r3, [r7, #32]
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	61fb      	str	r3, [r7, #28]
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800473a:	2364      	movs	r3, #100	@ 0x64
 800473c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b64      	cmp	r3, #100	@ 0x64
 8004742:	d00b      	beq.n	800475c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	61bb      	str	r3, [r7, #24]
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800475c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01e      	beq.n	80047a2 <xTaskCreateStatic+0xb2>
 8004764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01b      	beq.n	80047a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800477c:	2300      	movs	r3, #0
 800477e:	9303      	str	r3, [sp, #12]
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	9302      	str	r3, [sp, #8]
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f850 	bl	800483a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800479a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800479c:	f000 f8e4 	bl	8004968 <prvAddNewTaskToReadyList>
 80047a0:	e001      	b.n	80047a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047a6:	697b      	ldr	r3, [r7, #20]
	}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3728      	adds	r7, #40	@ 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	@ 0x30
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 f947 	bl	8005a58 <pvPortMalloc>
 80047ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047d2:	2064      	movs	r0, #100	@ 0x64
 80047d4:	f001 f940 	bl	8005a58 <pvPortMalloc>
 80047d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e6:	e005      	b.n	80047f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047e8:	6978      	ldr	r0, [r7, #20]
 80047ea:	f001 fa03 	bl	8005bf4 <vPortFree>
 80047ee:	e001      	b.n	80047f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	2300      	movs	r3, #0
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	9302      	str	r3, [sp, #8]
 800480c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f80e 	bl	800483a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800481e:	69f8      	ldr	r0, [r7, #28]
 8004820:	f000 f8a2 	bl	8004968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004824:	2301      	movs	r3, #1
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	e002      	b.n	8004830 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295
 800482e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004830:	69bb      	ldr	r3, [r7, #24]
	}
 8004832:	4618      	mov	r0, r3
 8004834:	3720      	adds	r7, #32
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b088      	sub	sp, #32
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	461a      	mov	r2, r3
 8004852:	21a5      	movs	r1, #165	@ 0xa5
 8004854:	f003 feff 	bl	8008656 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004862:	3b01      	subs	r3, #1
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	617b      	str	r3, [r7, #20]
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01f      	beq.n	80048e0 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	e012      	b.n	80048cc <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	7819      	ldrb	r1, [r3, #0]
 80048ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	3334      	adds	r3, #52	@ 0x34
 80048b6:	460a      	mov	r2, r1
 80048b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3301      	adds	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	d9e9      	bls.n	80048a6 <prvInitialiseNewTask+0x6c>
 80048d2:	e000      	b.n	80048d6 <prvInitialiseNewTask+0x9c>
			{
				break;
 80048d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048de:	e003      	b.n	80048e8 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d901      	bls.n	80048f2 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048ee:	2306      	movs	r3, #6
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048fc:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	2200      	movs	r2, #0
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	3304      	adds	r3, #4
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff faa0 	bl	8003e4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	3318      	adds	r3, #24
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fa9b 	bl	8003e4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800491c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	f1c3 0207 	rsb	r2, r3, #7
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	2200      	movs	r2, #0
 8004932:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	2200      	movs	r2, #0
 8004938:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	69b8      	ldr	r0, [r7, #24]
 8004948:	f000 fe78 	bl	800563c <pxPortInitialiseStack>
 800494c:	4602      	mov	r2, r0
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800495c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800495e:	bf00      	nop
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004970:	f000 ff92 	bl	8005898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004974:	4b2c      	ldr	r3, [pc, #176]	@ (8004a28 <prvAddNewTaskToReadyList+0xc0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a28 <prvAddNewTaskToReadyList+0xc0>)
 800497c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800497e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004986:	4a29      	ldr	r2, [pc, #164]	@ (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800498c:	4b26      	ldr	r3, [pc, #152]	@ (8004a28 <prvAddNewTaskToReadyList+0xc0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d110      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004994:	f000 fc88 	bl	80052a8 <prvInitialiseTaskLists>
 8004998:	e00d      	b.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800499a:	4b25      	ldr	r3, [pc, #148]	@ (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049a2:	4b22      	ldr	r3, [pc, #136]	@ (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d802      	bhi.n	80049b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049b0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a34 <prvAddNewTaskToReadyList+0xcc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a34 <prvAddNewTaskToReadyList+0xcc>)
 80049be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a34 <prvAddNewTaskToReadyList+0xcc>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	2201      	movs	r2, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	4b19      	ldr	r3, [pc, #100]	@ (8004a38 <prvAddNewTaskToReadyList+0xd0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	4a18      	ldr	r2, [pc, #96]	@ (8004a38 <prvAddNewTaskToReadyList+0xd0>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4a15      	ldr	r2, [pc, #84]	@ (8004a3c <prvAddNewTaskToReadyList+0xd4>)
 80049e8:	441a      	add	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7ff fa39 	bl	8003e68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049f6:	f000 ff81 	bl	80058fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <prvAddNewTaskToReadyList+0xc8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00e      	beq.n	8004a20 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a02:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <prvAddNewTaskToReadyList+0xc4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d207      	bcs.n	8004a20 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a10:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <prvAddNewTaskToReadyList+0xd8>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000550 	.word	0x20000550
 8004a2c:	20000450 	.word	0x20000450
 8004a30:	2000055c 	.word	0x2000055c
 8004a34:	2000056c 	.word	0x2000056c
 8004a38:	20000558 	.word	0x20000558
 8004a3c:	20000454 	.word	0x20000454
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004a4c:	f000 ff24 	bl	8005898 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <vTaskDelete+0x18>
 8004a56:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <vTaskDelete+0xf8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	e000      	b.n	8004a5e <vTaskDelete+0x1a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff fa5c 	bl	8003f22 <uxListRemove>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d115      	bne.n	8004a9c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a74:	4932      	ldr	r1, [pc, #200]	@ (8004b40 <vTaskDelete+0xfc>)
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <vTaskDelete+0x58>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43da      	mvns	r2, r3
 8004a92:	4b2c      	ldr	r3, [pc, #176]	@ (8004b44 <vTaskDelete+0x100>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4013      	ands	r3, r2
 8004a98:	4a2a      	ldr	r2, [pc, #168]	@ (8004b44 <vTaskDelete+0x100>)
 8004a9a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fa3a 	bl	8003f22 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004aae:	4b26      	ldr	r3, [pc, #152]	@ (8004b48 <vTaskDelete+0x104>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	4a24      	ldr	r2, [pc, #144]	@ (8004b48 <vTaskDelete+0x104>)
 8004ab6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004ab8:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <vTaskDelete+0xf8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d10b      	bne.n	8004ada <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4820      	ldr	r0, [pc, #128]	@ (8004b4c <vTaskDelete+0x108>)
 8004aca:	f7ff f9cd 	bl	8003e68 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004ace:	4b20      	ldr	r3, [pc, #128]	@ (8004b50 <vTaskDelete+0x10c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b50 <vTaskDelete+0x10c>)
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e009      	b.n	8004aee <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004ada:	4b1e      	ldr	r3, [pc, #120]	@ (8004b54 <vTaskDelete+0x110>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b54 <vTaskDelete+0x110>)
 8004ae2:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fc4d 	bl	8005384 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004aea:	f000 fc7b 	bl	80053e4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004aee:	f000 ff05 	bl	80058fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004af2:	4b19      	ldr	r3, [pc, #100]	@ (8004b58 <vTaskDelete+0x114>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01c      	beq.n	8004b34 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8004afa:	4b10      	ldr	r3, [pc, #64]	@ (8004b3c <vTaskDelete+0xf8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d117      	bne.n	8004b34 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004b04:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <vTaskDelete+0x118>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <vTaskDelete+0xe0>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	60bb      	str	r3, [r7, #8]
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8004b24:	4b0e      	ldr	r3, [pc, #56]	@ (8004b60 <vTaskDelete+0x11c>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000450 	.word	0x20000450
 8004b40:	20000454 	.word	0x20000454
 8004b44:	20000558 	.word	0x20000558
 8004b48:	2000056c 	.word	0x2000056c
 8004b4c:	20000524 	.word	0x20000524
 8004b50:	20000538 	.word	0x20000538
 8004b54:	20000550 	.word	0x20000550
 8004b58:	2000055c 	.word	0x2000055c
 8004b5c:	20000578 	.word	0x20000578
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d018      	beq.n	8004ba8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b76:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <vTaskDelay+0x64>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <vTaskDelay+0x32>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	60bb      	str	r3, [r7, #8]
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	e7fd      	b.n	8004b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b96:	f000 f87f 	bl	8004c98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fce7 	bl	8005570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ba2:	f000 f887 	bl	8004cb4 <xTaskResumeAll>
 8004ba6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d107      	bne.n	8004bbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004bae:	4b07      	ldr	r3, [pc, #28]	@ (8004bcc <vTaskDelay+0x68>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000578 	.word	0x20000578
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	@ 0x28
 8004bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bde:	463a      	mov	r2, r7
 8004be0:	1d39      	adds	r1, r7, #4
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fb fd08 	bl	80005fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	9202      	str	r2, [sp, #8]
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	4920      	ldr	r1, [pc, #128]	@ (8004c80 <vTaskStartScheduler+0xb0>)
 8004c00:	4820      	ldr	r0, [pc, #128]	@ (8004c84 <vTaskStartScheduler+0xb4>)
 8004c02:	f7ff fd75 	bl	80046f0 <xTaskCreateStatic>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4a1f      	ldr	r2, [pc, #124]	@ (8004c88 <vTaskStartScheduler+0xb8>)
 8004c0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <vTaskStartScheduler+0xb8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c14:	2301      	movs	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e001      	b.n	8004c1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d118      	bne.n	8004c56 <vTaskStartScheduler+0x86>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	613b      	str	r3, [r7, #16]
}
 8004c36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c38:	4b14      	ldr	r3, [pc, #80]	@ (8004c8c <vTaskStartScheduler+0xbc>)
 8004c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c40:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <vTaskStartScheduler+0xc0>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c46:	4b13      	ldr	r3, [pc, #76]	@ (8004c94 <vTaskStartScheduler+0xc4>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004c4c:	f7fb fe7e 	bl	800094c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c50:	f000 fd7e 	bl	8005750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c54:	e00f      	b.n	8004c76 <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d10b      	bne.n	8004c76 <vTaskStartScheduler+0xa6>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	60fb      	str	r3, [r7, #12]
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	e7fd      	b.n	8004c72 <vTaskStartScheduler+0xa2>
}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	080094b0 	.word	0x080094b0
 8004c84:	08005275 	.word	0x08005275
 8004c88:	20000574 	.word	0x20000574
 8004c8c:	20000570 	.word	0x20000570
 8004c90:	2000055c 	.word	0x2000055c
 8004c94:	20000554 	.word	0x20000554

08004c98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <vTaskSuspendAll+0x18>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	4a03      	ldr	r2, [pc, #12]	@ (8004cb0 <vTaskSuspendAll+0x18>)
 8004ca4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ca6:	bf00      	nop
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000578 	.word	0x20000578

08004cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cc2:	4b42      	ldr	r3, [pc, #264]	@ (8004dcc <xTaskResumeAll+0x118>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10b      	bne.n	8004ce2 <xTaskResumeAll+0x2e>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	603b      	str	r3, [r7, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	e7fd      	b.n	8004cde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ce2:	f000 fdd9 	bl	8005898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ce6:	4b39      	ldr	r3, [pc, #228]	@ (8004dcc <xTaskResumeAll+0x118>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	4a37      	ldr	r2, [pc, #220]	@ (8004dcc <xTaskResumeAll+0x118>)
 8004cee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf0:	4b36      	ldr	r3, [pc, #216]	@ (8004dcc <xTaskResumeAll+0x118>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d161      	bne.n	8004dbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cf8:	4b35      	ldr	r3, [pc, #212]	@ (8004dd0 <xTaskResumeAll+0x11c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d05d      	beq.n	8004dbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d00:	e02e      	b.n	8004d60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d02:	4b34      	ldr	r3, [pc, #208]	@ (8004dd4 <xTaskResumeAll+0x120>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff f907 	bl	8003f22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff f902 	bl	8003f22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	2201      	movs	r2, #1
 8004d24:	409a      	lsls	r2, r3
 8004d26:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd8 <xTaskResumeAll+0x124>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd8 <xTaskResumeAll+0x124>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4a27      	ldr	r2, [pc, #156]	@ (8004ddc <xTaskResumeAll+0x128>)
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f7ff f88e 	bl	8003e68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d50:	4b23      	ldr	r3, [pc, #140]	@ (8004de0 <xTaskResumeAll+0x12c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d5a:	4b22      	ldr	r3, [pc, #136]	@ (8004de4 <xTaskResumeAll+0x130>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d60:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd4 <xTaskResumeAll+0x120>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1cc      	bne.n	8004d02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d6e:	f000 fb39 	bl	80053e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d72:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <xTaskResumeAll+0x134>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d7e:	f000 f837 	bl	8004df0 <xTaskIncrementTick>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d88:	4b16      	ldr	r3, [pc, #88]	@ (8004de4 <xTaskResumeAll+0x130>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f1      	bne.n	8004d7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d9a:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <xTaskResumeAll+0x134>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004da0:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <xTaskResumeAll+0x130>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dac:	4b0f      	ldr	r3, [pc, #60]	@ (8004dec <xTaskResumeAll+0x138>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dbc:	f000 fd9e 	bl	80058fc <vPortExitCritical>

	return xAlreadyYielded;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000578 	.word	0x20000578
 8004dd0:	20000550 	.word	0x20000550
 8004dd4:	20000510 	.word	0x20000510
 8004dd8:	20000558 	.word	0x20000558
 8004ddc:	20000454 	.word	0x20000454
 8004de0:	20000450 	.word	0x20000450
 8004de4:	20000564 	.word	0x20000564
 8004de8:	20000560 	.word	0x20000560
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <xTaskIncrementTick+0x148>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 808f 	bne.w	8004f22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e04:	4b4d      	ldr	r3, [pc, #308]	@ (8004f3c <xTaskIncrementTick+0x14c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f3c <xTaskIncrementTick+0x14c>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d121      	bne.n	8004e5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e18:	4b49      	ldr	r3, [pc, #292]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	603b      	str	r3, [r7, #0]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <xTaskIncrementTick+0x46>
 8004e3a:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	4b40      	ldr	r3, [pc, #256]	@ (8004f44 <xTaskIncrementTick+0x154>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3e      	ldr	r2, [pc, #248]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4a3e      	ldr	r2, [pc, #248]	@ (8004f44 <xTaskIncrementTick+0x154>)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f48 <xTaskIncrementTick+0x158>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4a3c      	ldr	r2, [pc, #240]	@ (8004f48 <xTaskIncrementTick+0x158>)
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	f000 fac4 	bl	80053e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d348      	bcc.n	8004ef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e66:	4b36      	ldr	r3, [pc, #216]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e70:	4b36      	ldr	r3, [pc, #216]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295
 8004e76:	601a      	str	r2, [r3, #0]
					break;
 8004e78:	e03e      	b.n	8004ef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7a:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d203      	bcs.n	8004e9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e92:	4a2e      	ldr	r2, [pc, #184]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e98:	e02e      	b.n	8004ef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff f83f 	bl	8003f22 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	3318      	adds	r3, #24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff f836 	bl	8003f22 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	2201      	movs	r2, #1
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	4b24      	ldr	r3, [pc, #144]	@ (8004f50 <xTaskIncrementTick+0x160>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	4a22      	ldr	r2, [pc, #136]	@ (8004f50 <xTaskIncrementTick+0x160>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f54 <xTaskIncrementTick+0x164>)
 8004ed6:	441a      	add	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7fe ffc2 	bl	8003e68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <xTaskIncrementTick+0x168>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3b9      	bcc.n	8004e66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	e7b6      	b.n	8004e66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ef8:	4b17      	ldr	r3, [pc, #92]	@ (8004f58 <xTaskIncrementTick+0x168>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	4915      	ldr	r1, [pc, #84]	@ (8004f54 <xTaskIncrementTick+0x164>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d901      	bls.n	8004f14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f14:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <xTaskIncrementTick+0x16c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e004      	b.n	8004f2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f22:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <xTaskIncrementTick+0x170>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4a0d      	ldr	r2, [pc, #52]	@ (8004f60 <xTaskIncrementTick+0x170>)
 8004f2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f2c:	697b      	ldr	r3, [r7, #20]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000578 	.word	0x20000578
 8004f3c:	20000554 	.word	0x20000554
 8004f40:	20000508 	.word	0x20000508
 8004f44:	2000050c 	.word	0x2000050c
 8004f48:	20000568 	.word	0x20000568
 8004f4c:	20000570 	.word	0x20000570
 8004f50:	20000558 	.word	0x20000558
 8004f54:	20000454 	.word	0x20000454
 8004f58:	20000450 	.word	0x20000450
 8004f5c:	20000564 	.word	0x20000564
 8004f60:	20000560 	.word	0x20000560

08004f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f6a:	4b33      	ldr	r3, [pc, #204]	@ (8005038 <vTaskSwitchContext+0xd4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f72:	4b32      	ldr	r3, [pc, #200]	@ (800503c <vTaskSwitchContext+0xd8>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f78:	e059      	b.n	800502e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8004f7a:	4b30      	ldr	r3, [pc, #192]	@ (800503c <vTaskSwitchContext+0xd8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004f80:	f7fb fcf0 	bl	8000964 <getRunTimeCounterValue>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4a2e      	ldr	r2, [pc, #184]	@ (8005040 <vTaskSwitchContext+0xdc>)
 8004f88:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005040 <vTaskSwitchContext+0xdc>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005044 <vTaskSwitchContext+0xe0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d909      	bls.n	8004faa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004f96:	4b2c      	ldr	r3, [pc, #176]	@ (8005048 <vTaskSwitchContext+0xe4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8004f9c:	4a28      	ldr	r2, [pc, #160]	@ (8005040 <vTaskSwitchContext+0xdc>)
 8004f9e:	6810      	ldr	r0, [r2, #0]
 8004fa0:	4a28      	ldr	r2, [pc, #160]	@ (8005044 <vTaskSwitchContext+0xe0>)
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	1a82      	subs	r2, r0, r2
 8004fa6:	440a      	add	r2, r1
 8004fa8:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004faa:	4b25      	ldr	r3, [pc, #148]	@ (8005040 <vTaskSwitchContext+0xdc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a25      	ldr	r2, [pc, #148]	@ (8005044 <vTaskSwitchContext+0xe0>)
 8004fb0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb2:	4b26      	ldr	r3, [pc, #152]	@ (800504c <vTaskSwitchContext+0xe8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004fc0:	7afb      	ldrb	r3, [r7, #11]
 8004fc2:	f1c3 031f 	rsb	r3, r3, #31
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	4921      	ldr	r1, [pc, #132]	@ (8005050 <vTaskSwitchContext+0xec>)
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <vTaskSwitchContext+0x90>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	607b      	str	r3, [r7, #4]
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	e7fd      	b.n	8004ff0 <vTaskSwitchContext+0x8c>
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <vTaskSwitchContext+0xec>)
 8005000:	4413      	add	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3308      	adds	r3, #8
 8005016:	429a      	cmp	r2, r3
 8005018:	d104      	bne.n	8005024 <vTaskSwitchContext+0xc0>
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	605a      	str	r2, [r3, #4]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	4a07      	ldr	r2, [pc, #28]	@ (8005048 <vTaskSwitchContext+0xe4>)
 800502c:	6013      	str	r3, [r2, #0]
}
 800502e:	bf00      	nop
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000578 	.word	0x20000578
 800503c:	20000564 	.word	0x20000564
 8005040:	20000580 	.word	0x20000580
 8005044:	2000057c 	.word	0x2000057c
 8005048:	20000450 	.word	0x20000450
 800504c:	20000558 	.word	0x20000558
 8005050:	20000454 	.word	0x20000454

08005054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	60fb      	str	r3, [r7, #12]
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	e7fd      	b.n	8005078 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800507c:	4b07      	ldr	r3, [pc, #28]	@ (800509c <vTaskPlaceOnEventList+0x48>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3318      	adds	r3, #24
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7fe ff13 	bl	8003eb0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800508a:	2101      	movs	r1, #1
 800508c:	6838      	ldr	r0, [r7, #0]
 800508e:	f000 fa6f 	bl	8005570 <prvAddCurrentTaskToDelayedList>
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000450 	.word	0x20000450

080050a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60fb      	str	r3, [r7, #12]
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3318      	adds	r3, #24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe ff25 	bl	8003f22 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005150 <xTaskRemoveFromEventList+0xb0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11c      	bne.n	800511a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe ff1c 	bl	8003f22 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	2201      	movs	r2, #1
 80050f0:	409a      	lsls	r2, r3
 80050f2:	4b18      	ldr	r3, [pc, #96]	@ (8005154 <xTaskRemoveFromEventList+0xb4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	4a16      	ldr	r2, [pc, #88]	@ (8005154 <xTaskRemoveFromEventList+0xb4>)
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4a13      	ldr	r2, [pc, #76]	@ (8005158 <xTaskRemoveFromEventList+0xb8>)
 800510a:	441a      	add	r2, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7fe fea8 	bl	8003e68 <vListInsertEnd>
 8005118:	e005      	b.n	8005126 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3318      	adds	r3, #24
 800511e:	4619      	mov	r1, r3
 8005120:	480e      	ldr	r0, [pc, #56]	@ (800515c <xTaskRemoveFromEventList+0xbc>)
 8005122:	f7fe fea1 	bl	8003e68 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512a:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <xTaskRemoveFromEventList+0xc0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d905      	bls.n	8005140 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005138:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <xTaskRemoveFromEventList+0xc4>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e001      	b.n	8005144 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005144:	697b      	ldr	r3, [r7, #20]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000578 	.word	0x20000578
 8005154:	20000558 	.word	0x20000558
 8005158:	20000454 	.word	0x20000454
 800515c:	20000510 	.word	0x20000510
 8005160:	20000450 	.word	0x20000450
 8005164:	20000564 	.word	0x20000564

08005168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005170:	4b06      	ldr	r3, [pc, #24]	@ (800518c <vTaskInternalSetTimeOutState+0x24>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005178:	4b05      	ldr	r3, [pc, #20]	@ (8005190 <vTaskInternalSetTimeOutState+0x28>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	605a      	str	r2, [r3, #4]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000568 	.word	0x20000568
 8005190:	20000554 	.word	0x20000554

08005194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	613b      	str	r3, [r7, #16]
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60fb      	str	r3, [r7, #12]
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80051da:	f000 fb5d 	bl	8005898 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051de:	4b1d      	ldr	r3, [pc, #116]	@ (8005254 <xTaskCheckForTimeOut+0xc0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d102      	bne.n	80051fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	e023      	b.n	8005246 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b15      	ldr	r3, [pc, #84]	@ (8005258 <xTaskCheckForTimeOut+0xc4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d007      	beq.n	800521a <xTaskCheckForTimeOut+0x86>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005214:	2301      	movs	r3, #1
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	e015      	b.n	8005246 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	429a      	cmp	r2, r3
 8005222:	d20b      	bcs.n	800523c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	1ad2      	subs	r2, r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff ff99 	bl	8005168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e004      	b.n	8005246 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005246:	f000 fb59 	bl	80058fc <vPortExitCritical>

	return xReturn;
 800524a:	69fb      	ldr	r3, [r7, #28]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000554 	.word	0x20000554
 8005258:	20000568 	.word	0x20000568

0800525c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005260:	4b03      	ldr	r3, [pc, #12]	@ (8005270 <vTaskMissedYield+0x14>)
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000564 	.word	0x20000564

08005274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800527c:	f000 f854 	bl	8005328 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005280:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <prvIdleTask+0x2c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d907      	bls.n	8005298 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005288:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <prvIdleTask+0x30>)
 800528a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005298:	f7fb f9a8 	bl	80005ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800529c:	e7ee      	b.n	800527c <prvIdleTask+0x8>
 800529e:	bf00      	nop
 80052a0:	20000454 	.word	0x20000454
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	e00c      	b.n	80052ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4a12      	ldr	r2, [pc, #72]	@ (8005308 <prvInitialiseTaskLists+0x60>)
 80052c0:	4413      	add	r3, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fda3 	bl	8003e0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d9ef      	bls.n	80052b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052d4:	480d      	ldr	r0, [pc, #52]	@ (800530c <prvInitialiseTaskLists+0x64>)
 80052d6:	f7fe fd9a 	bl	8003e0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052da:	480d      	ldr	r0, [pc, #52]	@ (8005310 <prvInitialiseTaskLists+0x68>)
 80052dc:	f7fe fd97 	bl	8003e0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052e0:	480c      	ldr	r0, [pc, #48]	@ (8005314 <prvInitialiseTaskLists+0x6c>)
 80052e2:	f7fe fd94 	bl	8003e0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052e6:	480c      	ldr	r0, [pc, #48]	@ (8005318 <prvInitialiseTaskLists+0x70>)
 80052e8:	f7fe fd91 	bl	8003e0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052ec:	480b      	ldr	r0, [pc, #44]	@ (800531c <prvInitialiseTaskLists+0x74>)
 80052ee:	f7fe fd8e 	bl	8003e0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <prvInitialiseTaskLists+0x78>)
 80052f4:	4a05      	ldr	r2, [pc, #20]	@ (800530c <prvInitialiseTaskLists+0x64>)
 80052f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005324 <prvInitialiseTaskLists+0x7c>)
 80052fa:	4a05      	ldr	r2, [pc, #20]	@ (8005310 <prvInitialiseTaskLists+0x68>)
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000454 	.word	0x20000454
 800530c:	200004e0 	.word	0x200004e0
 8005310:	200004f4 	.word	0x200004f4
 8005314:	20000510 	.word	0x20000510
 8005318:	20000524 	.word	0x20000524
 800531c:	2000053c 	.word	0x2000053c
 8005320:	20000508 	.word	0x20000508
 8005324:	2000050c 	.word	0x2000050c

08005328 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800532e:	e019      	b.n	8005364 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005330:	f000 fab2 	bl	8005898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005334:	4b10      	ldr	r3, [pc, #64]	@ (8005378 <prvCheckTasksWaitingTermination+0x50>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe fdee 	bl	8003f22 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <prvCheckTasksWaitingTermination+0x54>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3b01      	subs	r3, #1
 800534c:	4a0b      	ldr	r2, [pc, #44]	@ (800537c <prvCheckTasksWaitingTermination+0x54>)
 800534e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005350:	4b0b      	ldr	r3, [pc, #44]	@ (8005380 <prvCheckTasksWaitingTermination+0x58>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3b01      	subs	r3, #1
 8005356:	4a0a      	ldr	r2, [pc, #40]	@ (8005380 <prvCheckTasksWaitingTermination+0x58>)
 8005358:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800535a:	f000 facf 	bl	80058fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f810 	bl	8005384 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005364:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <prvCheckTasksWaitingTermination+0x58>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e1      	bne.n	8005330 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000524 	.word	0x20000524
 800537c:	20000550 	.word	0x20000550
 8005380:	20000538 	.word	0x20000538

08005384 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005392:	2b00      	cmp	r3, #0
 8005394:	d108      	bne.n	80053a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc2a 	bl	8005bf4 <vPortFree>
				vPortFree( pxTCB );
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fc27 	bl	8005bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053a6:	e019      	b.n	80053dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d103      	bne.n	80053ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fc1e 	bl	8005bf4 <vPortFree>
	}
 80053b8:	e010      	b.n	80053dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d00b      	beq.n	80053dc <prvDeleteTCB+0x58>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60fb      	str	r3, [r7, #12]
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <prvDeleteTCB+0x54>
	}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ea:	4b0c      	ldr	r3, [pc, #48]	@ (800541c <prvResetNextTaskUnblockTime+0x38>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005420 <prvResetNextTaskUnblockTime+0x3c>)
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053fc:	e008      	b.n	8005410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053fe:	4b07      	ldr	r3, [pc, #28]	@ (800541c <prvResetNextTaskUnblockTime+0x38>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4a04      	ldr	r2, [pc, #16]	@ (8005420 <prvResetNextTaskUnblockTime+0x3c>)
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	20000508 	.word	0x20000508
 8005420:	20000570 	.word	0x20000570

08005424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <xTaskGetSchedulerState+0x34>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005432:	2301      	movs	r3, #1
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	e008      	b.n	800544a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005438:	4b08      	ldr	r3, [pc, #32]	@ (800545c <xTaskGetSchedulerState+0x38>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005440:	2302      	movs	r3, #2
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	e001      	b.n	800544a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005446:	2300      	movs	r3, #0
 8005448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800544a:	687b      	ldr	r3, [r7, #4]
	}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	2000055c 	.word	0x2000055c
 800545c:	20000578 	.word	0x20000578

08005460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d070      	beq.n	8005558 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005476:	4b3b      	ldr	r3, [pc, #236]	@ (8005564 <xTaskPriorityDisinherit+0x104>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	429a      	cmp	r2, r3
 800547e:	d00b      	beq.n	8005498 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	e7fd      	b.n	8005494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60bb      	str	r3, [r7, #8]
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054bc:	1e5a      	subs	r2, r3, #1
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d044      	beq.n	8005558 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d140      	bne.n	8005558 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3304      	adds	r3, #4
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe fd21 	bl	8003f22 <uxListRemove>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d115      	bne.n	8005512 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ea:	491f      	ldr	r1, [pc, #124]	@ (8005568 <xTaskPriorityDisinherit+0x108>)
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <xTaskPriorityDisinherit+0xb2>
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	2201      	movs	r2, #1
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43da      	mvns	r2, r3
 8005508:	4b18      	ldr	r3, [pc, #96]	@ (800556c <xTaskPriorityDisinherit+0x10c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4013      	ands	r3, r2
 800550e:	4a17      	ldr	r2, [pc, #92]	@ (800556c <xTaskPriorityDisinherit+0x10c>)
 8005510:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	f1c3 0207 	rsb	r2, r3, #7
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	2201      	movs	r2, #1
 800552c:	409a      	lsls	r2, r3
 800552e:	4b0f      	ldr	r3, [pc, #60]	@ (800556c <xTaskPriorityDisinherit+0x10c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	4a0d      	ldr	r2, [pc, #52]	@ (800556c <xTaskPriorityDisinherit+0x10c>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a08      	ldr	r2, [pc, #32]	@ (8005568 <xTaskPriorityDisinherit+0x108>)
 8005546:	441a      	add	r2, r3
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7fe fc8a 	bl	8003e68 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005558:	697b      	ldr	r3, [r7, #20]
	}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000450 	.word	0x20000450
 8005568:	20000454 	.word	0x20000454
 800556c:	20000558 	.word	0x20000558

08005570 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800557a:	4b29      	ldr	r3, [pc, #164]	@ (8005620 <prvAddCurrentTaskToDelayedList+0xb0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005580:	4b28      	ldr	r3, [pc, #160]	@ (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3304      	adds	r3, #4
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fccb 	bl	8003f22 <uxListRemove>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005592:	4b24      	ldr	r3, [pc, #144]	@ (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	2201      	movs	r2, #1
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43da      	mvns	r2, r3
 80055a0:	4b21      	ldr	r3, [pc, #132]	@ (8005628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4013      	ands	r3, r2
 80055a6:	4a20      	ldr	r2, [pc, #128]	@ (8005628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d10a      	bne.n	80055c8 <prvAddCurrentTaskToDelayedList+0x58>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	481a      	ldr	r0, [pc, #104]	@ (800562c <prvAddCurrentTaskToDelayedList+0xbc>)
 80055c2:	f7fe fc51 	bl	8003e68 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055c6:	e026      	b.n	8005616 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055d0:	4b14      	ldr	r3, [pc, #80]	@ (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d209      	bcs.n	80055f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055e0:	4b13      	ldr	r3, [pc, #76]	@ (8005630 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7fe fc5f 	bl	8003eb0 <vListInsert>
}
 80055f2:	e010      	b.n	8005616 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005634 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f7fe fc55 	bl	8003eb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005606:	4b0c      	ldr	r3, [pc, #48]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d202      	bcs.n	8005616 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005610:	4a09      	ldr	r2, [pc, #36]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6013      	str	r3, [r2, #0]
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000554 	.word	0x20000554
 8005624:	20000450 	.word	0x20000450
 8005628:	20000558 	.word	0x20000558
 800562c:	2000053c 	.word	0x2000053c
 8005630:	2000050c 	.word	0x2000050c
 8005634:	20000508 	.word	0x20000508
 8005638:	20000570 	.word	0x20000570

0800563c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3b04      	subs	r3, #4
 800564c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3b04      	subs	r3, #4
 800565a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f023 0201 	bic.w	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3b04      	subs	r3, #4
 800566a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800566c:	4a0c      	ldr	r2, [pc, #48]	@ (80056a0 <pxPortInitialiseStack+0x64>)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3b14      	subs	r3, #20
 8005676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3b04      	subs	r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f06f 0202 	mvn.w	r2, #2
 800568a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3b20      	subs	r3, #32
 8005690:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005692:	68fb      	ldr	r3, [r7, #12]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	080056a5 	.word	0x080056a5

080056a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ae:	4b13      	ldr	r3, [pc, #76]	@ (80056fc <prvTaskExitError+0x58>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d00b      	beq.n	80056d0 <prvTaskExitError+0x2c>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	60fb      	str	r3, [r7, #12]
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	e7fd      	b.n	80056cc <prvTaskExitError+0x28>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60bb      	str	r3, [r7, #8]
}
 80056e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056e4:	bf00      	nop
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0fc      	beq.n	80056e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	2000000c 	.word	0x2000000c

08005700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005700:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <pxCurrentTCBConst2>)
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	6808      	ldr	r0, [r1, #0]
 8005706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570a:	f380 8809 	msr	PSP, r0
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f380 8811 	msr	BASEPRI, r0
 800571a:	4770      	bx	lr
 800571c:	f3af 8000 	nop.w

08005720 <pxCurrentTCBConst2>:
 8005720:	20000450 	.word	0x20000450
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005728:	4808      	ldr	r0, [pc, #32]	@ (800574c <prvPortStartFirstTask+0x24>)
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	6800      	ldr	r0, [r0, #0]
 800572e:	f380 8808 	msr	MSP, r0
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8814 	msr	CONTROL, r0
 800573a:	b662      	cpsie	i
 800573c:	b661      	cpsie	f
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	df00      	svc	0
 8005748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800574a:	bf00      	nop
 800574c:	e000ed08 	.word	0xe000ed08

08005750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005756:	4b47      	ldr	r3, [pc, #284]	@ (8005874 <xPortStartScheduler+0x124>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a47      	ldr	r2, [pc, #284]	@ (8005878 <xPortStartScheduler+0x128>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d10b      	bne.n	8005778 <xPortStartScheduler+0x28>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005778:	4b3e      	ldr	r3, [pc, #248]	@ (8005874 <xPortStartScheduler+0x124>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a3f      	ldr	r2, [pc, #252]	@ (800587c <xPortStartScheduler+0x12c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10b      	bne.n	800579a <xPortStartScheduler+0x4a>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	613b      	str	r3, [r7, #16]
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	e7fd      	b.n	8005796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800579a:	4b39      	ldr	r3, [pc, #228]	@ (8005880 <xPortStartScheduler+0x130>)
 800579c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	22ff      	movs	r2, #255	@ 0xff
 80057aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4b31      	ldr	r3, [pc, #196]	@ (8005884 <xPortStartScheduler+0x134>)
 80057c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057c2:	4b31      	ldr	r3, [pc, #196]	@ (8005888 <xPortStartScheduler+0x138>)
 80057c4:	2207      	movs	r2, #7
 80057c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057c8:	e009      	b.n	80057de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80057ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005888 <xPortStartScheduler+0x138>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005888 <xPortStartScheduler+0x138>)
 80057d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d0ef      	beq.n	80057ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057ea:	4b27      	ldr	r3, [pc, #156]	@ (8005888 <xPortStartScheduler+0x138>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f1c3 0307 	rsb	r3, r3, #7
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d00b      	beq.n	800580e <xPortStartScheduler+0xbe>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60bb      	str	r3, [r7, #8]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800580e:	4b1e      	ldr	r3, [pc, #120]	@ (8005888 <xPortStartScheduler+0x138>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	4a1c      	ldr	r2, [pc, #112]	@ (8005888 <xPortStartScheduler+0x138>)
 8005816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005818:	4b1b      	ldr	r3, [pc, #108]	@ (8005888 <xPortStartScheduler+0x138>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005820:	4a19      	ldr	r2, [pc, #100]	@ (8005888 <xPortStartScheduler+0x138>)
 8005822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800582c:	4b17      	ldr	r3, [pc, #92]	@ (800588c <xPortStartScheduler+0x13c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a16      	ldr	r2, [pc, #88]	@ (800588c <xPortStartScheduler+0x13c>)
 8005832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005838:	4b14      	ldr	r3, [pc, #80]	@ (800588c <xPortStartScheduler+0x13c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a13      	ldr	r2, [pc, #76]	@ (800588c <xPortStartScheduler+0x13c>)
 800583e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005844:	f000 f8da 	bl	80059fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005848:	4b11      	ldr	r3, [pc, #68]	@ (8005890 <xPortStartScheduler+0x140>)
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800584e:	f000 f8f9 	bl	8005a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005852:	4b10      	ldr	r3, [pc, #64]	@ (8005894 <xPortStartScheduler+0x144>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a0f      	ldr	r2, [pc, #60]	@ (8005894 <xPortStartScheduler+0x144>)
 8005858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800585c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800585e:	f7ff ff63 	bl	8005728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005862:	f7ff fb7f 	bl	8004f64 <vTaskSwitchContext>
	prvTaskExitError();
 8005866:	f7ff ff1d 	bl	80056a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	e000ed00 	.word	0xe000ed00
 8005878:	410fc271 	.word	0x410fc271
 800587c:	410fc270 	.word	0x410fc270
 8005880:	e000e400 	.word	0xe000e400
 8005884:	20000584 	.word	0x20000584
 8005888:	20000588 	.word	0x20000588
 800588c:	e000ed20 	.word	0xe000ed20
 8005890:	2000000c 	.word	0x2000000c
 8005894:	e000ef34 	.word	0xe000ef34

08005898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	607b      	str	r3, [r7, #4]
}
 80058b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <vPortEnterCritical+0x5c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3301      	adds	r3, #1
 80058b8:	4a0e      	ldr	r2, [pc, #56]	@ (80058f4 <vPortEnterCritical+0x5c>)
 80058ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058bc:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <vPortEnterCritical+0x5c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d110      	bne.n	80058e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058c4:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <vPortEnterCritical+0x60>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	603b      	str	r3, [r7, #0]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <vPortEnterCritical+0x4a>
	}
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	2000000c 	.word	0x2000000c
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005902:	4b12      	ldr	r3, [pc, #72]	@ (800594c <vPortExitCritical+0x50>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <vPortExitCritical+0x26>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	607b      	str	r3, [r7, #4]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005922:	4b0a      	ldr	r3, [pc, #40]	@ (800594c <vPortExitCritical+0x50>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3b01      	subs	r3, #1
 8005928:	4a08      	ldr	r2, [pc, #32]	@ (800594c <vPortExitCritical+0x50>)
 800592a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800592c:	4b07      	ldr	r3, [pc, #28]	@ (800594c <vPortExitCritical+0x50>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <vPortExitCritical+0x44>
 8005934:	2300      	movs	r3, #0
 8005936:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800593e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	2000000c 	.word	0x2000000c

08005950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005950:	f3ef 8009 	mrs	r0, PSP
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	4b15      	ldr	r3, [pc, #84]	@ (80059b0 <pxCurrentTCBConst>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	f01e 0f10 	tst.w	lr, #16
 8005960:	bf08      	it	eq
 8005962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	6010      	str	r0, [r2, #0]
 800596c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005974:	f380 8811 	msr	BASEPRI, r0
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f7ff faf0 	bl	8004f64 <vTaskSwitchContext>
 8005984:	f04f 0000 	mov.w	r0, #0
 8005988:	f380 8811 	msr	BASEPRI, r0
 800598c:	bc09      	pop	{r0, r3}
 800598e:	6819      	ldr	r1, [r3, #0]
 8005990:	6808      	ldr	r0, [r1, #0]
 8005992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005996:	f01e 0f10 	tst.w	lr, #16
 800599a:	bf08      	it	eq
 800599c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059a0:	f380 8809 	msr	PSP, r0
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst>:
 80059b0:	20000450 	.word	0x20000450
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	607b      	str	r3, [r7, #4]
}
 80059d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059d2:	f7ff fa0d 	bl	8004df0 <xTaskIncrementTick>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059dc:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <SysTick_Handler+0x40>)
 80059de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	2300      	movs	r3, #0
 80059e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f383 8811 	msr	BASEPRI, r3
}
 80059ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a00:	4b0b      	ldr	r3, [pc, #44]	@ (8005a30 <vPortSetupTimerInterrupt+0x34>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a06:	4b0b      	ldr	r3, [pc, #44]	@ (8005a34 <vPortSetupTimerInterrupt+0x38>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a38 <vPortSetupTimerInterrupt+0x3c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	@ (8005a3c <vPortSetupTimerInterrupt+0x40>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	4a09      	ldr	r2, [pc, #36]	@ (8005a40 <vPortSetupTimerInterrupt+0x44>)
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a1e:	4b04      	ldr	r3, [pc, #16]	@ (8005a30 <vPortSetupTimerInterrupt+0x34>)
 8005a20:	2207      	movs	r2, #7
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	e000e010 	.word	0xe000e010
 8005a34:	e000e018 	.word	0xe000e018
 8005a38:	20000000 	.word	0x20000000
 8005a3c:	10624dd3 	.word	0x10624dd3
 8005a40:	e000e014 	.word	0xe000e014

08005a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a54 <vPortEnableVFP+0x10>
 8005a48:	6801      	ldr	r1, [r0, #0]
 8005a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a4e:	6001      	str	r1, [r0, #0]
 8005a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a52:	bf00      	nop
 8005a54:	e000ed88 	.word	0xe000ed88

08005a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	@ 0x28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a64:	f7ff f918 	bl	8004c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a68:	4b5c      	ldr	r3, [pc, #368]	@ (8005bdc <pvPortMalloc+0x184>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a70:	f000 f924 	bl	8005cbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a74:	4b5a      	ldr	r3, [pc, #360]	@ (8005be0 <pvPortMalloc+0x188>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f040 8095 	bne.w	8005bac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01e      	beq.n	8005ac6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a88:	2208      	movs	r2, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d015      	beq.n	8005ac6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f023 0307 	bic.w	r3, r3, #7
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <pvPortMalloc+0x6e>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	617b      	str	r3, [r7, #20]
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d06f      	beq.n	8005bac <pvPortMalloc+0x154>
 8005acc:	4b45      	ldr	r3, [pc, #276]	@ (8005be4 <pvPortMalloc+0x18c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d86a      	bhi.n	8005bac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ad6:	4b44      	ldr	r3, [pc, #272]	@ (8005be8 <pvPortMalloc+0x190>)
 8005ad8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ada:	4b43      	ldr	r3, [pc, #268]	@ (8005be8 <pvPortMalloc+0x190>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ae0:	e004      	b.n	8005aec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d903      	bls.n	8005afe <pvPortMalloc+0xa6>
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f1      	bne.n	8005ae2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005afe:	4b37      	ldr	r3, [pc, #220]	@ (8005bdc <pvPortMalloc+0x184>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d051      	beq.n	8005bac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	4413      	add	r3, r2
 8005b10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	1ad2      	subs	r2, r2, r3
 8005b22:	2308      	movs	r3, #8
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d920      	bls.n	8005b6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <pvPortMalloc+0xfc>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	613b      	str	r3, [r7, #16]
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	1ad2      	subs	r2, r2, r3
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b66:	69b8      	ldr	r0, [r7, #24]
 8005b68:	f000 f90a 	bl	8005d80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005be4 <pvPortMalloc+0x18c>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	4a1b      	ldr	r2, [pc, #108]	@ (8005be4 <pvPortMalloc+0x18c>)
 8005b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005be4 <pvPortMalloc+0x18c>)
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bec <pvPortMalloc+0x194>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d203      	bcs.n	8005b8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b86:	4b17      	ldr	r3, [pc, #92]	@ (8005be4 <pvPortMalloc+0x18c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a18      	ldr	r2, [pc, #96]	@ (8005bec <pvPortMalloc+0x194>)
 8005b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	4b13      	ldr	r3, [pc, #76]	@ (8005be0 <pvPortMalloc+0x188>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ba2:	4b13      	ldr	r3, [pc, #76]	@ (8005bf0 <pvPortMalloc+0x198>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	4a11      	ldr	r2, [pc, #68]	@ (8005bf0 <pvPortMalloc+0x198>)
 8005baa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bac:	f7ff f882 	bl	8004cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <pvPortMalloc+0x17a>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	60fb      	str	r3, [r7, #12]
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <pvPortMalloc+0x176>
	return pvReturn;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3728      	adds	r7, #40	@ 0x28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20004194 	.word	0x20004194
 8005be0:	200041a8 	.word	0x200041a8
 8005be4:	20004198 	.word	0x20004198
 8005be8:	2000418c 	.word	0x2000418c
 8005bec:	2000419c 	.word	0x2000419c
 8005bf0:	200041a0 	.word	0x200041a0

08005bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d04f      	beq.n	8005ca6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c06:	2308      	movs	r3, #8
 8005c08:	425b      	negs	r3, r3
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	4b25      	ldr	r3, [pc, #148]	@ (8005cb0 <vPortFree+0xbc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <vPortFree+0x46>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	60fb      	str	r3, [r7, #12]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <vPortFree+0x66>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60bb      	str	r3, [r7, #8]
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	e7fd      	b.n	8005c56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	4b14      	ldr	r3, [pc, #80]	@ (8005cb0 <vPortFree+0xbc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01e      	beq.n	8005ca6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11a      	bne.n	8005ca6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb0 <vPortFree+0xbc>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	401a      	ands	r2, r3
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c80:	f7ff f80a 	bl	8004c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <vPortFree+0xc0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	4a09      	ldr	r2, [pc, #36]	@ (8005cb4 <vPortFree+0xc0>)
 8005c90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c92:	6938      	ldr	r0, [r7, #16]
 8005c94:	f000 f874 	bl	8005d80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c98:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <vPortFree+0xc4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	4a06      	ldr	r2, [pc, #24]	@ (8005cb8 <vPortFree+0xc4>)
 8005ca0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ca2:	f7ff f807 	bl	8004cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ca6:	bf00      	nop
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	200041a8 	.word	0x200041a8
 8005cb4:	20004198 	.word	0x20004198
 8005cb8:	200041a4 	.word	0x200041a4

08005cbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cc2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005cc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cc8:	4b27      	ldr	r3, [pc, #156]	@ (8005d68 <prvHeapInit+0xac>)
 8005cca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3307      	adds	r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0307 	bic.w	r3, r3, #7
 8005ce2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	4a1f      	ldr	r2, [pc, #124]	@ (8005d68 <prvHeapInit+0xac>)
 8005cec:	4413      	add	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <prvHeapInit+0xb0>)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8005d6c <prvHeapInit+0xb0>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d08:	2208      	movs	r2, #8
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	@ (8005d70 <prvHeapInit+0xb4>)
 8005d1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d1e:	4b14      	ldr	r3, [pc, #80]	@ (8005d70 <prvHeapInit+0xb4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d26:	4b12      	ldr	r3, [pc, #72]	@ (8005d70 <prvHeapInit+0xb4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d70 <prvHeapInit+0xb4>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a0a      	ldr	r2, [pc, #40]	@ (8005d74 <prvHeapInit+0xb8>)
 8005d4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4a09      	ldr	r2, [pc, #36]	@ (8005d78 <prvHeapInit+0xbc>)
 8005d52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d54:	4b09      	ldr	r3, [pc, #36]	@ (8005d7c <prvHeapInit+0xc0>)
 8005d56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d5a:	601a      	str	r2, [r3, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	2000058c 	.word	0x2000058c
 8005d6c:	2000418c 	.word	0x2000418c
 8005d70:	20004194 	.word	0x20004194
 8005d74:	2000419c 	.word	0x2000419c
 8005d78:	20004198 	.word	0x20004198
 8005d7c:	200041a8 	.word	0x200041a8

08005d80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d88:	4b28      	ldr	r3, [pc, #160]	@ (8005e2c <prvInsertBlockIntoFreeList+0xac>)
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e002      	b.n	8005d94 <prvInsertBlockIntoFreeList+0x14>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d8f7      	bhi.n	8005d8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d108      	bne.n	8005dc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	441a      	add	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	441a      	add	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d118      	bne.n	8005e08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b15      	ldr	r3, [pc, #84]	@ (8005e30 <prvInsertBlockIntoFreeList+0xb0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d00d      	beq.n	8005dfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	441a      	add	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e008      	b.n	8005e10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <prvInsertBlockIntoFreeList+0xb0>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	e003      	b.n	8005e10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d002      	beq.n	8005e1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	2000418c 	.word	0x2000418c
 8005e30:	20004194 	.word	0x20004194

08005e34 <app_init>:

/********************** external data declaration *****************************/

/********************** external functions definition ************************/
void app_init(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af02      	add	r7, sp, #8
  BaseType_t status;

  // Primero se inicializa el UI ya que controla los LEDs
  LOGGER_INFO("Initializing UI...");
 8005e3a:	f7ff fd2d 	bl	8005898 <vPortEnterCritical>
 8005e3e:	4ba0      	ldr	r3, [pc, #640]	@ (80060c0 <app_init+0x28c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4aa0      	ldr	r2, [pc, #640]	@ (80060c4 <app_init+0x290>)
 8005e44:	213f      	movs	r1, #63	@ 0x3f
 8005e46:	4618      	mov	r0, r3
 8005e48:	f002 fb8c 	bl	8008564 <sniprintf>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4a9e      	ldr	r2, [pc, #632]	@ (80060c8 <app_init+0x294>)
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	4b9b      	ldr	r3, [pc, #620]	@ (80060c0 <app_init+0x28c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fa0c 	bl	8006274 <logger_log_print_>
 8005e5c:	f7ff fd4e 	bl	80058fc <vPortExitCritical>
 8005e60:	f7ff fd1a 	bl	8005898 <vPortEnterCritical>
 8005e64:	4b96      	ldr	r3, [pc, #600]	@ (80060c0 <app_init+0x28c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a98      	ldr	r2, [pc, #608]	@ (80060cc <app_init+0x298>)
 8005e6a:	213f      	movs	r1, #63	@ 0x3f
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f002 fb79 	bl	8008564 <sniprintf>
 8005e72:	4603      	mov	r3, r0
 8005e74:	4a94      	ldr	r2, [pc, #592]	@ (80060c8 <app_init+0x294>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	4b91      	ldr	r3, [pc, #580]	@ (80060c0 <app_init+0x28c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 f9f9 	bl	8006274 <logger_log_print_>
 8005e82:	f7ff fd3b 	bl	80058fc <vPortExitCritical>
 8005e86:	f7ff fd07 	bl	8005898 <vPortEnterCritical>
 8005e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80060c0 <app_init+0x28c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a90      	ldr	r2, [pc, #576]	@ (80060d0 <app_init+0x29c>)
 8005e90:	213f      	movs	r1, #63	@ 0x3f
 8005e92:	4618      	mov	r0, r3
 8005e94:	f002 fb66 	bl	8008564 <sniprintf>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4a8b      	ldr	r2, [pc, #556]	@ (80060c8 <app_init+0x294>)
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	4b88      	ldr	r3, [pc, #544]	@ (80060c0 <app_init+0x28c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f9e6 	bl	8006274 <logger_log_print_>
 8005ea8:	f7ff fd28 	bl	80058fc <vPortExitCritical>
  ao_ui_init();
 8005eac:	f001 fdf4 	bl	8007a98 <ao_ui_init>

  // Crear la tarea de botón con alta prioridad para una respuesta rápida ya que no será un OA
  LOGGER_INFO("Creating button task...");
 8005eb0:	f7ff fcf2 	bl	8005898 <vPortEnterCritical>
 8005eb4:	4b82      	ldr	r3, [pc, #520]	@ (80060c0 <app_init+0x28c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a82      	ldr	r2, [pc, #520]	@ (80060c4 <app_init+0x290>)
 8005eba:	213f      	movs	r1, #63	@ 0x3f
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f002 fb51 	bl	8008564 <sniprintf>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4a80      	ldr	r2, [pc, #512]	@ (80060c8 <app_init+0x294>)
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	4b7d      	ldr	r3, [pc, #500]	@ (80060c0 <app_init+0x28c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f9d1 	bl	8006274 <logger_log_print_>
 8005ed2:	f7ff fd13 	bl	80058fc <vPortExitCritical>
 8005ed6:	f7ff fcdf 	bl	8005898 <vPortEnterCritical>
 8005eda:	4b79      	ldr	r3, [pc, #484]	@ (80060c0 <app_init+0x28c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7d      	ldr	r2, [pc, #500]	@ (80060d4 <app_init+0x2a0>)
 8005ee0:	213f      	movs	r1, #63	@ 0x3f
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f002 fb3e 	bl	8008564 <sniprintf>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	4a77      	ldr	r2, [pc, #476]	@ (80060c8 <app_init+0x294>)
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	4b74      	ldr	r3, [pc, #464]	@ (80060c0 <app_init+0x28c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f9be 	bl	8006274 <logger_log_print_>
 8005ef8:	f7ff fd00 	bl	80058fc <vPortExitCritical>
 8005efc:	f7ff fccc 	bl	8005898 <vPortEnterCritical>
 8005f00:	4b6f      	ldr	r3, [pc, #444]	@ (80060c0 <app_init+0x28c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a72      	ldr	r2, [pc, #456]	@ (80060d0 <app_init+0x29c>)
 8005f06:	213f      	movs	r1, #63	@ 0x3f
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f002 fb2b 	bl	8008564 <sniprintf>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4a6d      	ldr	r2, [pc, #436]	@ (80060c8 <app_init+0x294>)
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	4b6a      	ldr	r3, [pc, #424]	@ (80060c0 <app_init+0x28c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 f9ab 	bl	8006274 <logger_log_print_>
 8005f1e:	f7ff fced 	bl	80058fc <vPortExitCritical>
  status = xTaskCreate(task_button, "task_button", 128, NULL, tskIDLE_PRIORITY + 2, NULL);
 8005f22:	2300      	movs	r3, #0
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	2302      	movs	r3, #2
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2280      	movs	r2, #128	@ 0x80
 8005f2e:	496a      	ldr	r1, [pc, #424]	@ (80060d8 <app_init+0x2a4>)
 8005f30:	486a      	ldr	r0, [pc, #424]	@ (80060dc <app_init+0x2a8>)
 8005f32:	f7fe fc3d 	bl	80047b0 <xTaskCreate>
 8005f36:	6078      	str	r0, [r7, #4]
  if (pdPASS != status)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d03a      	beq.n	8005fb4 <app_init+0x180>
  {
    LOGGER_ERROR("Failed to create button task");
 8005f3e:	f7ff fcab 	bl	8005898 <vPortEnterCritical>
 8005f42:	4b5f      	ldr	r3, [pc, #380]	@ (80060c0 <app_init+0x28c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a66      	ldr	r2, [pc, #408]	@ (80060e0 <app_init+0x2ac>)
 8005f48:	213f      	movs	r1, #63	@ 0x3f
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f002 fb0a 	bl	8008564 <sniprintf>
 8005f50:	4603      	mov	r3, r0
 8005f52:	4a5d      	ldr	r2, [pc, #372]	@ (80060c8 <app_init+0x294>)
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	4b5a      	ldr	r3, [pc, #360]	@ (80060c0 <app_init+0x28c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f98a 	bl	8006274 <logger_log_print_>
 8005f60:	f7ff fccc 	bl	80058fc <vPortExitCritical>
 8005f64:	f7ff fc98 	bl	8005898 <vPortEnterCritical>
 8005f68:	4b55      	ldr	r3, [pc, #340]	@ (80060c0 <app_init+0x28c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80060e4 <app_init+0x2b0>)
 8005f6e:	213f      	movs	r1, #63	@ 0x3f
 8005f70:	4618      	mov	r0, r3
 8005f72:	f002 faf7 	bl	8008564 <sniprintf>
 8005f76:	4603      	mov	r3, r0
 8005f78:	4a53      	ldr	r2, [pc, #332]	@ (80060c8 <app_init+0x294>)
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4b50      	ldr	r3, [pc, #320]	@ (80060c0 <app_init+0x28c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f977 	bl	8006274 <logger_log_print_>
 8005f86:	f7ff fcb9 	bl	80058fc <vPortExitCritical>
 8005f8a:	f7ff fc85 	bl	8005898 <vPortEnterCritical>
 8005f8e:	4b4c      	ldr	r3, [pc, #304]	@ (80060c0 <app_init+0x28c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a4f      	ldr	r2, [pc, #316]	@ (80060d0 <app_init+0x29c>)
 8005f94:	213f      	movs	r1, #63	@ 0x3f
 8005f96:	4618      	mov	r0, r3
 8005f98:	f002 fae4 	bl	8008564 <sniprintf>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80060c8 <app_init+0x294>)
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b47      	ldr	r3, [pc, #284]	@ (80060c0 <app_init+0x28c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 f964 	bl	8006274 <logger_log_print_>
 8005fac:	f7ff fca6 	bl	80058fc <vPortExitCritical>
    while(1);
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <app_init+0x17c>
  }

  LOGGER_INFO("Initializing cycle counter...");
 8005fb4:	f7ff fc70 	bl	8005898 <vPortEnterCritical>
 8005fb8:	4b41      	ldr	r3, [pc, #260]	@ (80060c0 <app_init+0x28c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a41      	ldr	r2, [pc, #260]	@ (80060c4 <app_init+0x290>)
 8005fbe:	213f      	movs	r1, #63	@ 0x3f
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f002 facf 	bl	8008564 <sniprintf>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80060c8 <app_init+0x294>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80060c0 <app_init+0x28c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 f94f 	bl	8006274 <logger_log_print_>
 8005fd6:	f7ff fc91 	bl	80058fc <vPortExitCritical>
 8005fda:	f7ff fc5d 	bl	8005898 <vPortEnterCritical>
 8005fde:	4b38      	ldr	r3, [pc, #224]	@ (80060c0 <app_init+0x28c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a41      	ldr	r2, [pc, #260]	@ (80060e8 <app_init+0x2b4>)
 8005fe4:	213f      	movs	r1, #63	@ 0x3f
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f002 fabc 	bl	8008564 <sniprintf>
 8005fec:	4603      	mov	r3, r0
 8005fee:	4a36      	ldr	r2, [pc, #216]	@ (80060c8 <app_init+0x294>)
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	4b33      	ldr	r3, [pc, #204]	@ (80060c0 <app_init+0x28c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f93c 	bl	8006274 <logger_log_print_>
 8005ffc:	f7ff fc7e 	bl	80058fc <vPortExitCritical>
 8006000:	f7ff fc4a 	bl	8005898 <vPortEnterCritical>
 8006004:	4b2e      	ldr	r3, [pc, #184]	@ (80060c0 <app_init+0x28c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a31      	ldr	r2, [pc, #196]	@ (80060d0 <app_init+0x29c>)
 800600a:	213f      	movs	r1, #63	@ 0x3f
 800600c:	4618      	mov	r0, r3
 800600e:	f002 faa9 	bl	8008564 <sniprintf>
 8006012:	4603      	mov	r3, r0
 8006014:	4a2c      	ldr	r2, [pc, #176]	@ (80060c8 <app_init+0x294>)
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	4b29      	ldr	r3, [pc, #164]	@ (80060c0 <app_init+0x28c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f000 f929 	bl	8006274 <logger_log_print_>
 8006022:	f7ff fc6b 	bl	80058fc <vPortExitCritical>
  cycle_counter_init();
 8006026:	4b31      	ldr	r3, [pc, #196]	@ (80060ec <app_init+0x2b8>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	4a30      	ldr	r2, [pc, #192]	@ (80060ec <app_init+0x2b8>)
 800602c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006030:	60d3      	str	r3, [r2, #12]
 8006032:	4b2f      	ldr	r3, [pc, #188]	@ (80060f0 <app_init+0x2bc>)
 8006034:	2200      	movs	r2, #0
 8006036:	605a      	str	r2, [r3, #4]
 8006038:	4b2d      	ldr	r3, [pc, #180]	@ (80060f0 <app_init+0x2bc>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2c      	ldr	r2, [pc, #176]	@ (80060f0 <app_init+0x2bc>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	6013      	str	r3, [r2, #0]
  
  LOGGER_INFO("Application initialization complete");
 8006044:	f7ff fc28 	bl	8005898 <vPortEnterCritical>
 8006048:	4b1d      	ldr	r3, [pc, #116]	@ (80060c0 <app_init+0x28c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1d      	ldr	r2, [pc, #116]	@ (80060c4 <app_init+0x290>)
 800604e:	213f      	movs	r1, #63	@ 0x3f
 8006050:	4618      	mov	r0, r3
 8006052:	f002 fa87 	bl	8008564 <sniprintf>
 8006056:	4603      	mov	r3, r0
 8006058:	4a1b      	ldr	r2, [pc, #108]	@ (80060c8 <app_init+0x294>)
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	4b18      	ldr	r3, [pc, #96]	@ (80060c0 <app_init+0x28c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f907 	bl	8006274 <logger_log_print_>
 8006066:	f7ff fc49 	bl	80058fc <vPortExitCritical>
 800606a:	f7ff fc15 	bl	8005898 <vPortEnterCritical>
 800606e:	4b14      	ldr	r3, [pc, #80]	@ (80060c0 <app_init+0x28c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a20      	ldr	r2, [pc, #128]	@ (80060f4 <app_init+0x2c0>)
 8006074:	213f      	movs	r1, #63	@ 0x3f
 8006076:	4618      	mov	r0, r3
 8006078:	f002 fa74 	bl	8008564 <sniprintf>
 800607c:	4603      	mov	r3, r0
 800607e:	4a12      	ldr	r2, [pc, #72]	@ (80060c8 <app_init+0x294>)
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	4b0f      	ldr	r3, [pc, #60]	@ (80060c0 <app_init+0x28c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f8f4 	bl	8006274 <logger_log_print_>
 800608c:	f7ff fc36 	bl	80058fc <vPortExitCritical>
 8006090:	f7ff fc02 	bl	8005898 <vPortEnterCritical>
 8006094:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <app_init+0x28c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a0d      	ldr	r2, [pc, #52]	@ (80060d0 <app_init+0x29c>)
 800609a:	213f      	movs	r1, #63	@ 0x3f
 800609c:	4618      	mov	r0, r3
 800609e:	f002 fa61 	bl	8008564 <sniprintf>
 80060a2:	4603      	mov	r3, r0
 80060a4:	4a08      	ldr	r2, [pc, #32]	@ (80060c8 <app_init+0x294>)
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	4b05      	ldr	r3, [pc, #20]	@ (80060c0 <app_init+0x28c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 f8e1 	bl	8006274 <logger_log_print_>
 80060b2:	f7ff fc23 	bl	80058fc <vPortExitCritical>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	08009b70 	.word	0x08009b70
 80060c4:	080094e0 	.word	0x080094e0
 80060c8:	200041ec 	.word	0x200041ec
 80060cc:	080094e8 	.word	0x080094e8
 80060d0:	080094fc 	.word	0x080094fc
 80060d4:	08009500 	.word	0x08009500
 80060d8:	08009518 	.word	0x08009518
 80060dc:	080063c9 	.word	0x080063c9
 80060e0:	08009524 	.word	0x08009524
 80060e4:	08009530 	.word	0x08009530
 80060e8:	08009550 	.word	0x08009550
 80060ec:	e000edf0 	.word	0xe000edf0
 80060f0:	e0001000 	.word	0xe0001000
 80060f4:	08009570 	.word	0x08009570

080060f8 <linked_list_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void linked_list_init(linked_list_t* hlist)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  hlist->pfirst_node = NULL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
  hlist->plast_node = NULL;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	605a      	str	r2, [r3, #4]
  hlist->len = 0;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	609a      	str	r2, [r3, #8]
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <linked_list_node_init>:

void linked_list_node_init(linked_list_node_t* hnode, void* pdata)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  hnode->pdata = pdata;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	601a      	str	r2, [r3, #0]
  hnode->pnext_node = NULL;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	605a      	str	r2, [r3, #4]
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <linked_list_node_remove>:

linked_list_node_t* linked_list_node_remove(linked_list_t* hlist)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  linked_list_node_t* hnode;
  if(0 == hlist->len)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <linked_list_node_remove+0x16>
  {
    hnode = NULL;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e024      	b.n	80061a0 <linked_list_node_remove+0x60>
  }
  else if(1 == hlist->len)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d111      	bne.n	8006182 <linked_list_node_remove+0x42>
  {
    hnode = hlist->pfirst_node;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]
    hlist->pfirst_node = NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
    hlist->plast_node = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]
    hnode->pnext_node = NULL;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	605a      	str	r2, [r3, #4]
    hlist->len--;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	1e5a      	subs	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	e00e      	b.n	80061a0 <linked_list_node_remove+0x60>
  }
  else
  {
    hnode = hlist->pfirst_node;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]
    hlist->pfirst_node = hnode->pnext_node;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
    hnode->pnext_node = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	605a      	str	r2, [r3, #4]
    hlist->len--;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	609a      	str	r2, [r3, #8]
  }
  return hnode;
 80061a0:	68fb      	ldr	r3, [r7, #12]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <linked_list_node_add>:

void linked_list_node_add(linked_list_t* hlist, linked_list_node_t* hnode)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  if(0 == hlist->len)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <linked_list_node_add+0x20>
  {
    hlist->pfirst_node = hnode;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	601a      	str	r2, [r3, #0]
    hlist->plast_node = hnode;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	605a      	str	r2, [r3, #4]
 80061cc:	e006      	b.n	80061dc <linked_list_node_add+0x2e>
  }
  else
  {
    hlist->plast_node->pnext_node = hnode;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	605a      	str	r2, [r3, #4]
    hlist->plast_node = hnode;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	605a      	str	r2, [r3, #4]
  }
  hlist->len++;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	609a      	str	r2, [r3, #8]
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <linked_list_node_remove_by_id>:

linked_list_node_t* linked_list_node_remove_by_id(linked_list_t* hlist, int id)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
    linked_list_node_t* prev = NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
    linked_list_node_t* node = hlist->pfirst_node;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	613b      	str	r3, [r7, #16]
    while (node != NULL) {
 8006206:	e02a      	b.n	800625e <linked_list_node_remove_by_id+0x6c>
        // Se asume que pdata apunta a una struct que tiene un campo int id
        int* entry_id = (int*)node->pdata;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
        if (*entry_id == id) {
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d11d      	bne.n	8006254 <linked_list_node_remove_by_id+0x62>
            // Eliminar nodo de la lista
            if (prev == NULL) {
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <linked_list_node_remove_by_id+0x36>
                hlist->pfirst_node = node->pnext_node;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e003      	b.n	8006230 <linked_list_node_remove_by_id+0x3e>
            } else {
                prev->pnext_node = node->pnext_node;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	605a      	str	r2, [r3, #4]
            }
            if (node == hlist->plast_node) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	429a      	cmp	r2, r3
 8006238:	d102      	bne.n	8006240 <linked_list_node_remove_by_id+0x4e>
                hlist->plast_node = prev;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	605a      	str	r2, [r3, #4]
            }
            hlist->len--;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	1e5a      	subs	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]
            node->pnext_node = NULL;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2200      	movs	r2, #0
 800624e:	605a      	str	r2, [r3, #4]
            return node;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	e008      	b.n	8006266 <linked_list_node_remove_by_id+0x74>
        }
        prev = node;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	617b      	str	r3, [r7, #20]
        node = node->pnext_node;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]
    while (node != NULL) {
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1d1      	bne.n	8006208 <linked_list_node_remove_by_id+0x16>
    }
    return NULL;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	printf(msg);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f002 f95f 	bl	8008540 <iprintf>
	fflush(stdout);
 8006282:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <logger_log_print_+0x24>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4618      	mov	r0, r3
 800628a:	f002 f883 	bl	8008394 <fflush>
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2000003c 	.word	0x2000003c

0800629c <memory_pool_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void memory_pool_init(memory_pool_t* hmp, void* pmemory, size_t nblocks, size_t block_size)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  linked_list_t* hlist = &(hmp->block_list);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	61bb      	str	r3, [r7, #24]
  linked_list_init(hlist);
 80062ae:	69b8      	ldr	r0, [r7, #24]
 80062b0:	f7ff ff22 	bl	80060f8 <linked_list_init>

  for(size_t i = 0; i < nblocks; ++i)
 80062b4:	2300      	movs	r3, #0
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	e011      	b.n	80062de <memory_pool_init+0x42>
  {
    void* pblock = pmemory + i*block_size;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	4413      	add	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
    linked_list_node_init((memory_pool_block_t*)pblock, NULL);
 80062c8:	2100      	movs	r1, #0
 80062ca:	6978      	ldr	r0, [r7, #20]
 80062cc:	f7ff ff27 	bl	800611e <linked_list_node_init>
    linked_list_node_add(hlist, pblock);
 80062d0:	6979      	ldr	r1, [r7, #20]
 80062d2:	69b8      	ldr	r0, [r7, #24]
 80062d4:	f7ff ff6b 	bl	80061ae <linked_list_node_add>
  for(size_t i = 0; i < nblocks; ++i)
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d3e9      	bcc.n	80062ba <memory_pool_init+0x1e>
  }
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	3720      	adds	r7, #32
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <memory_pool_block_get>:

void* memory_pool_block_get(memory_pool_t* hmp)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  portENTER_CRITICAL();
 80062f8:	f7ff face 	bl	8005898 <vPortEnterCritical>
  linked_list_t* hlist = &(hmp->block_list);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60fb      	str	r3, [r7, #12]
  void* pblock = (void*)linked_list_node_remove(hlist);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff ff1d 	bl	8006140 <linked_list_node_remove>
 8006306:	60b8      	str	r0, [r7, #8]
  portEXIT_CRITICAL();
 8006308:	f7ff faf8 	bl	80058fc <vPortExitCritical>
  return pblock;
 800630c:	68bb      	ldr	r3, [r7, #8]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <memory_pool_block_put>:

void memory_pool_block_put(memory_pool_t* hmp, void* pblock)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  portENTER_CRITICAL();
 8006320:	f7ff faba 	bl	8005898 <vPortEnterCritical>
  if(NULL != pblock)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <memory_pool_block_put+0x28>
  {
    linked_list_t* hlist = &(hmp->block_list);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]
    linked_list_node_init((memory_pool_block_t*)pblock, NULL);
 800632e:	2100      	movs	r1, #0
 8006330:	6838      	ldr	r0, [r7, #0]
 8006332:	f7ff fef4 	bl	800611e <linked_list_node_init>
    linked_list_node_add(hlist, pblock);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f7ff ff38 	bl	80061ae <linked_list_node_add>
  }
  portEXIT_CRITICAL();
 800633e:	f7ff fadd 	bl	80058fc <vPortExitCritical>
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <button_init_>:
{
    uint32_t counter;
} button;

static void button_init_(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  button.counter = 0;
 8006350:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <button_init_+0x14>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
}
 8006356:	bf00      	nop
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	200041f0 	.word	0x200041f0

08006364 <button_process_state_>:

static button_type_t button_process_state_(bool value)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
  button_type_t ret = BUTTON_TYPE_NONE;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]
  if(value)
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <button_process_state_+0x20>
  {
    button.counter += TASK_PERIOD_MS_;
 8006378:	4b12      	ldr	r3, [pc, #72]	@ (80063c4 <button_process_state_+0x60>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3332      	adds	r3, #50	@ 0x32
 800637e:	4a11      	ldr	r2, [pc, #68]	@ (80063c4 <button_process_state_+0x60>)
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e018      	b.n	80063b6 <button_process_state_+0x52>
  }
  else
  {
    if(BUTTON_LONG_TIMEOUT_ <= button.counter)
 8006384:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <button_process_state_+0x60>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800638c:	d302      	bcc.n	8006394 <button_process_state_+0x30>
    {
      ret = BUTTON_TYPE_LONG;
 800638e:	2303      	movs	r3, #3
 8006390:	73fb      	strb	r3, [r7, #15]
 8006392:	e00d      	b.n	80063b0 <button_process_state_+0x4c>
    }
    else if(BUTTON_SHORT_TIMEOUT_ <= button.counter)
 8006394:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <button_process_state_+0x60>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800639c:	d302      	bcc.n	80063a4 <button_process_state_+0x40>
    {
      ret = BUTTON_TYPE_SHORT;
 800639e:	2302      	movs	r3, #2
 80063a0:	73fb      	strb	r3, [r7, #15]
 80063a2:	e005      	b.n	80063b0 <button_process_state_+0x4c>
    }
    else if(BUTTON_PULSE_TIMEOUT_ <= button.counter)
 80063a4:	4b07      	ldr	r3, [pc, #28]	@ (80063c4 <button_process_state_+0x60>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80063aa:	d901      	bls.n	80063b0 <button_process_state_+0x4c>
    {
      ret = BUTTON_TYPE_PULSE;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
    }
    button.counter = 0;
 80063b0:	4b04      	ldr	r3, [pc, #16]	@ (80063c4 <button_process_state_+0x60>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
  }
  return ret;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	200041f0 	.word	0x200041f0

080063c8 <task_button>:

/********************** external functions definition ************************/

void task_button(void* argument)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  // Validar hardware del botón
  if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_RESET) {
 80063d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80063d4:	48a7      	ldr	r0, [pc, #668]	@ (8006674 <task_button+0x2ac>)
 80063d6:	f7fb fb25 	bl	8001a24 <HAL_GPIO_ReadPin>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d139      	bne.n	8006454 <task_button+0x8c>
    LOGGER_ERROR("Button: Error inicializando hardware");
 80063e0:	f7ff fa5a 	bl	8005898 <vPortEnterCritical>
 80063e4:	4ba4      	ldr	r3, [pc, #656]	@ (8006678 <task_button+0x2b0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4aa4      	ldr	r2, [pc, #656]	@ (800667c <task_button+0x2b4>)
 80063ea:	213f      	movs	r1, #63	@ 0x3f
 80063ec:	4618      	mov	r0, r3
 80063ee:	f002 f8b9 	bl	8008564 <sniprintf>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4aa2      	ldr	r2, [pc, #648]	@ (8006680 <task_button+0x2b8>)
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	4b9f      	ldr	r3, [pc, #636]	@ (8006678 <task_button+0x2b0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff ff39 	bl	8006274 <logger_log_print_>
 8006402:	f7ff fa7b 	bl	80058fc <vPortExitCritical>
 8006406:	f7ff fa47 	bl	8005898 <vPortEnterCritical>
 800640a:	4b9b      	ldr	r3, [pc, #620]	@ (8006678 <task_button+0x2b0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a9d      	ldr	r2, [pc, #628]	@ (8006684 <task_button+0x2bc>)
 8006410:	213f      	movs	r1, #63	@ 0x3f
 8006412:	4618      	mov	r0, r3
 8006414:	f002 f8a6 	bl	8008564 <sniprintf>
 8006418:	4603      	mov	r3, r0
 800641a:	4a99      	ldr	r2, [pc, #612]	@ (8006680 <task_button+0x2b8>)
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	4b96      	ldr	r3, [pc, #600]	@ (8006678 <task_button+0x2b0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff ff26 	bl	8006274 <logger_log_print_>
 8006428:	f7ff fa68 	bl	80058fc <vPortExitCritical>
 800642c:	f7ff fa34 	bl	8005898 <vPortEnterCritical>
 8006430:	4b91      	ldr	r3, [pc, #580]	@ (8006678 <task_button+0x2b0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a94      	ldr	r2, [pc, #592]	@ (8006688 <task_button+0x2c0>)
 8006436:	213f      	movs	r1, #63	@ 0x3f
 8006438:	4618      	mov	r0, r3
 800643a:	f002 f893 	bl	8008564 <sniprintf>
 800643e:	4603      	mov	r3, r0
 8006440:	4a8f      	ldr	r2, [pc, #572]	@ (8006680 <task_button+0x2b8>)
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b8c      	ldr	r3, [pc, #560]	@ (8006678 <task_button+0x2b0>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff ff13 	bl	8006274 <logger_log_print_>
 800644e:	f7ff fa55 	bl	80058fc <vPortExitCritical>
    return;
 8006452:	e1a8      	b.n	80067a6 <task_button+0x3de>
  }

  button_init_();
 8006454:	f7ff ff7a 	bl	800634c <button_init_>
  LOGGER_INFO("Button: Tarea iniciada");
 8006458:	f7ff fa1e 	bl	8005898 <vPortEnterCritical>
 800645c:	4b86      	ldr	r3, [pc, #536]	@ (8006678 <task_button+0x2b0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a8a      	ldr	r2, [pc, #552]	@ (800668c <task_button+0x2c4>)
 8006462:	213f      	movs	r1, #63	@ 0x3f
 8006464:	4618      	mov	r0, r3
 8006466:	f002 f87d 	bl	8008564 <sniprintf>
 800646a:	4603      	mov	r3, r0
 800646c:	4a84      	ldr	r2, [pc, #528]	@ (8006680 <task_button+0x2b8>)
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	4b81      	ldr	r3, [pc, #516]	@ (8006678 <task_button+0x2b0>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff fefd 	bl	8006274 <logger_log_print_>
 800647a:	f7ff fa3f 	bl	80058fc <vPortExitCritical>
 800647e:	f7ff fa0b 	bl	8005898 <vPortEnterCritical>
 8006482:	4b7d      	ldr	r3, [pc, #500]	@ (8006678 <task_button+0x2b0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a82      	ldr	r2, [pc, #520]	@ (8006690 <task_button+0x2c8>)
 8006488:	213f      	movs	r1, #63	@ 0x3f
 800648a:	4618      	mov	r0, r3
 800648c:	f002 f86a 	bl	8008564 <sniprintf>
 8006490:	4603      	mov	r3, r0
 8006492:	4a7b      	ldr	r2, [pc, #492]	@ (8006680 <task_button+0x2b8>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4b78      	ldr	r3, [pc, #480]	@ (8006678 <task_button+0x2b0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff feea 	bl	8006274 <logger_log_print_>
 80064a0:	f7ff fa2c 	bl	80058fc <vPortExitCritical>
 80064a4:	f7ff f9f8 	bl	8005898 <vPortEnterCritical>
 80064a8:	4b73      	ldr	r3, [pc, #460]	@ (8006678 <task_button+0x2b0>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a76      	ldr	r2, [pc, #472]	@ (8006688 <task_button+0x2c0>)
 80064ae:	213f      	movs	r1, #63	@ 0x3f
 80064b0:	4618      	mov	r0, r3
 80064b2:	f002 f857 	bl	8008564 <sniprintf>
 80064b6:	4603      	mov	r3, r0
 80064b8:	4a71      	ldr	r2, [pc, #452]	@ (8006680 <task_button+0x2b8>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	4b6e      	ldr	r3, [pc, #440]	@ (8006678 <task_button+0x2b0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fed7 	bl	8006274 <logger_log_print_>
 80064c6:	f7ff fa19 	bl	80058fc <vPortExitCritical>

  while(true)
  {
    GPIO_PinState button_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 80064ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80064ce:	4869      	ldr	r0, [pc, #420]	@ (8006674 <task_button+0x2ac>)
 80064d0:	f7fb faa8 	bl	8001a24 <HAL_GPIO_ReadPin>
 80064d4:	4603      	mov	r3, r0
 80064d6:	73bb      	strb	r3, [r7, #14]
    button_type_t button_type = button_process_state_(!button_state);
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff ff3d 	bl	8006364 <button_process_state_>
 80064ea:	4603      	mov	r3, r0
 80064ec:	737b      	strb	r3, [r7, #13]

    // Procesar evento si hay uno
    if (button_type != BUTTON_TYPE_NONE) {
 80064ee:	7b7b      	ldrb	r3, [r7, #13]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 8154 	beq.w	800679e <task_button+0x3d6>
      msg_event_t event;
      // Evaluar estado del botón

      switch (button_type) {
 80064f6:	7b7b      	ldrb	r3, [r7, #13]
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d07f      	beq.n	80065fc <task_button+0x234>
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	f300 80d1 	bgt.w	80066a4 <task_button+0x2dc>
 8006502:	2b01      	cmp	r3, #1
 8006504:	d002      	beq.n	800650c <task_button+0x144>
 8006506:	2b02      	cmp	r3, #2
 8006508:	d03c      	beq.n	8006584 <task_button+0x1bc>
 800650a:	e0cb      	b.n	80066a4 <task_button+0x2dc>
        case BUTTON_TYPE_PULSE:
          LOGGER_DEBUG("Button: Pulso detectado");
 800650c:	f7ff f9c4 	bl	8005898 <vPortEnterCritical>
 8006510:	4b59      	ldr	r3, [pc, #356]	@ (8006678 <task_button+0x2b0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a5f      	ldr	r2, [pc, #380]	@ (8006694 <task_button+0x2cc>)
 8006516:	213f      	movs	r1, #63	@ 0x3f
 8006518:	4618      	mov	r0, r3
 800651a:	f002 f823 	bl	8008564 <sniprintf>
 800651e:	4603      	mov	r3, r0
 8006520:	4a57      	ldr	r2, [pc, #348]	@ (8006680 <task_button+0x2b8>)
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4b54      	ldr	r3, [pc, #336]	@ (8006678 <task_button+0x2b0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff fea3 	bl	8006274 <logger_log_print_>
 800652e:	f7ff f9e5 	bl	80058fc <vPortExitCritical>
 8006532:	f7ff f9b1 	bl	8005898 <vPortEnterCritical>
 8006536:	4b50      	ldr	r3, [pc, #320]	@ (8006678 <task_button+0x2b0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a57      	ldr	r2, [pc, #348]	@ (8006698 <task_button+0x2d0>)
 800653c:	213f      	movs	r1, #63	@ 0x3f
 800653e:	4618      	mov	r0, r3
 8006540:	f002 f810 	bl	8008564 <sniprintf>
 8006544:	4603      	mov	r3, r0
 8006546:	4a4e      	ldr	r2, [pc, #312]	@ (8006680 <task_button+0x2b8>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	4b4b      	ldr	r3, [pc, #300]	@ (8006678 <task_button+0x2b0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fe90 	bl	8006274 <logger_log_print_>
 8006554:	f7ff f9d2 	bl	80058fc <vPortExitCritical>
 8006558:	f7ff f99e 	bl	8005898 <vPortEnterCritical>
 800655c:	4b46      	ldr	r3, [pc, #280]	@ (8006678 <task_button+0x2b0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a49      	ldr	r2, [pc, #292]	@ (8006688 <task_button+0x2c0>)
 8006562:	213f      	movs	r1, #63	@ 0x3f
 8006564:	4618      	mov	r0, r3
 8006566:	f001 fffd 	bl	8008564 <sniprintf>
 800656a:	4603      	mov	r3, r0
 800656c:	4a44      	ldr	r2, [pc, #272]	@ (8006680 <task_button+0x2b8>)
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	4b41      	ldr	r3, [pc, #260]	@ (8006678 <task_button+0x2b0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff fe7d 	bl	8006274 <logger_log_print_>
 800657a:	f7ff f9bf 	bl	80058fc <vPortExitCritical>
          event = MSG_EVENT_BUTTON_PULSE;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
          break;
 8006582:	e0c9      	b.n	8006718 <task_button+0x350>
        case BUTTON_TYPE_SHORT:
          LOGGER_DEBUG("Button: Pulsación corta detectada");
 8006584:	f7ff f988 	bl	8005898 <vPortEnterCritical>
 8006588:	4b3b      	ldr	r3, [pc, #236]	@ (8006678 <task_button+0x2b0>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a41      	ldr	r2, [pc, #260]	@ (8006694 <task_button+0x2cc>)
 800658e:	213f      	movs	r1, #63	@ 0x3f
 8006590:	4618      	mov	r0, r3
 8006592:	f001 ffe7 	bl	8008564 <sniprintf>
 8006596:	4603      	mov	r3, r0
 8006598:	4a39      	ldr	r2, [pc, #228]	@ (8006680 <task_button+0x2b8>)
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	4b36      	ldr	r3, [pc, #216]	@ (8006678 <task_button+0x2b0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fe67 	bl	8006274 <logger_log_print_>
 80065a6:	f7ff f9a9 	bl	80058fc <vPortExitCritical>
 80065aa:	f7ff f975 	bl	8005898 <vPortEnterCritical>
 80065ae:	4b32      	ldr	r3, [pc, #200]	@ (8006678 <task_button+0x2b0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a3a      	ldr	r2, [pc, #232]	@ (800669c <task_button+0x2d4>)
 80065b4:	213f      	movs	r1, #63	@ 0x3f
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 ffd4 	bl	8008564 <sniprintf>
 80065bc:	4603      	mov	r3, r0
 80065be:	4a30      	ldr	r2, [pc, #192]	@ (8006680 <task_button+0x2b8>)
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006678 <task_button+0x2b0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fe54 	bl	8006274 <logger_log_print_>
 80065cc:	f7ff f996 	bl	80058fc <vPortExitCritical>
 80065d0:	f7ff f962 	bl	8005898 <vPortEnterCritical>
 80065d4:	4b28      	ldr	r3, [pc, #160]	@ (8006678 <task_button+0x2b0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006688 <task_button+0x2c0>)
 80065da:	213f      	movs	r1, #63	@ 0x3f
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 ffc1 	bl	8008564 <sniprintf>
 80065e2:	4603      	mov	r3, r0
 80065e4:	4a26      	ldr	r2, [pc, #152]	@ (8006680 <task_button+0x2b8>)
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	4b23      	ldr	r3, [pc, #140]	@ (8006678 <task_button+0x2b0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fe41 	bl	8006274 <logger_log_print_>
 80065f2:	f7ff f983 	bl	80058fc <vPortExitCritical>
          event = MSG_EVENT_BUTTON_SHORT;
 80065f6:	2301      	movs	r3, #1
 80065f8:	73fb      	strb	r3, [r7, #15]
          break;
 80065fa:	e08d      	b.n	8006718 <task_button+0x350>
        case BUTTON_TYPE_LONG:
          LOGGER_DEBUG("Button: Pulsación larga detectada");
 80065fc:	f7ff f94c 	bl	8005898 <vPortEnterCritical>
 8006600:	4b1d      	ldr	r3, [pc, #116]	@ (8006678 <task_button+0x2b0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a23      	ldr	r2, [pc, #140]	@ (8006694 <task_button+0x2cc>)
 8006606:	213f      	movs	r1, #63	@ 0x3f
 8006608:	4618      	mov	r0, r3
 800660a:	f001 ffab 	bl	8008564 <sniprintf>
 800660e:	4603      	mov	r3, r0
 8006610:	4a1b      	ldr	r2, [pc, #108]	@ (8006680 <task_button+0x2b8>)
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	4b18      	ldr	r3, [pc, #96]	@ (8006678 <task_button+0x2b0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff fe2b 	bl	8006274 <logger_log_print_>
 800661e:	f7ff f96d 	bl	80058fc <vPortExitCritical>
 8006622:	f7ff f939 	bl	8005898 <vPortEnterCritical>
 8006626:	4b14      	ldr	r3, [pc, #80]	@ (8006678 <task_button+0x2b0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1d      	ldr	r2, [pc, #116]	@ (80066a0 <task_button+0x2d8>)
 800662c:	213f      	movs	r1, #63	@ 0x3f
 800662e:	4618      	mov	r0, r3
 8006630:	f001 ff98 	bl	8008564 <sniprintf>
 8006634:	4603      	mov	r3, r0
 8006636:	4a12      	ldr	r2, [pc, #72]	@ (8006680 <task_button+0x2b8>)
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b0f      	ldr	r3, [pc, #60]	@ (8006678 <task_button+0x2b0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fe18 	bl	8006274 <logger_log_print_>
 8006644:	f7ff f95a 	bl	80058fc <vPortExitCritical>
 8006648:	f7ff f926 	bl	8005898 <vPortEnterCritical>
 800664c:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <task_button+0x2b0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0d      	ldr	r2, [pc, #52]	@ (8006688 <task_button+0x2c0>)
 8006652:	213f      	movs	r1, #63	@ 0x3f
 8006654:	4618      	mov	r0, r3
 8006656:	f001 ff85 	bl	8008564 <sniprintf>
 800665a:	4603      	mov	r3, r0
 800665c:	4a08      	ldr	r2, [pc, #32]	@ (8006680 <task_button+0x2b8>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	4b05      	ldr	r3, [pc, #20]	@ (8006678 <task_button+0x2b0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff fe05 	bl	8006274 <logger_log_print_>
 800666a:	f7ff f947 	bl	80058fc <vPortExitCritical>
          event = MSG_EVENT_BUTTON_LONG;
 800666e:	2302      	movs	r3, #2
 8006670:	73fb      	strb	r3, [r7, #15]
          break;
 8006672:	e051      	b.n	8006718 <task_button+0x350>
 8006674:	40020800 	.word	0x40020800
 8006678:	08009b70 	.word	0x08009b70
 800667c:	08009594 	.word	0x08009594
 8006680:	200041ec 	.word	0x200041ec
 8006684:	080095a0 	.word	0x080095a0
 8006688:	080095c8 	.word	0x080095c8
 800668c:	080095cc 	.word	0x080095cc
 8006690:	080095d4 	.word	0x080095d4
 8006694:	080095ec 	.word	0x080095ec
 8006698:	080095f8 	.word	0x080095f8
 800669c:	08009610 	.word	0x08009610
 80066a0:	08009634 	.word	0x08009634
        default:
          LOGGER_ERROR("Button: Tipo de pulsación inválido");
 80066a4:	f7ff f8f8 	bl	8005898 <vPortEnterCritical>
 80066a8:	4b40      	ldr	r3, [pc, #256]	@ (80067ac <task_button+0x3e4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a40      	ldr	r2, [pc, #256]	@ (80067b0 <task_button+0x3e8>)
 80066ae:	213f      	movs	r1, #63	@ 0x3f
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 ff57 	bl	8008564 <sniprintf>
 80066b6:	4603      	mov	r3, r0
 80066b8:	4a3e      	ldr	r2, [pc, #248]	@ (80067b4 <task_button+0x3ec>)
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	4b3b      	ldr	r3, [pc, #236]	@ (80067ac <task_button+0x3e4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fdd7 	bl	8006274 <logger_log_print_>
 80066c6:	f7ff f919 	bl	80058fc <vPortExitCritical>
 80066ca:	f7ff f8e5 	bl	8005898 <vPortEnterCritical>
 80066ce:	4b37      	ldr	r3, [pc, #220]	@ (80067ac <task_button+0x3e4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a39      	ldr	r2, [pc, #228]	@ (80067b8 <task_button+0x3f0>)
 80066d4:	213f      	movs	r1, #63	@ 0x3f
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 ff44 	bl	8008564 <sniprintf>
 80066dc:	4603      	mov	r3, r0
 80066de:	4a35      	ldr	r2, [pc, #212]	@ (80067b4 <task_button+0x3ec>)
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	4b32      	ldr	r3, [pc, #200]	@ (80067ac <task_button+0x3e4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fdc4 	bl	8006274 <logger_log_print_>
 80066ec:	f7ff f906 	bl	80058fc <vPortExitCritical>
 80066f0:	f7ff f8d2 	bl	8005898 <vPortEnterCritical>
 80066f4:	4b2d      	ldr	r3, [pc, #180]	@ (80067ac <task_button+0x3e4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a30      	ldr	r2, [pc, #192]	@ (80067bc <task_button+0x3f4>)
 80066fa:	213f      	movs	r1, #63	@ 0x3f
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 ff31 	bl	8008564 <sniprintf>
 8006702:	4603      	mov	r3, r0
 8006704:	4a2b      	ldr	r2, [pc, #172]	@ (80067b4 <task_button+0x3ec>)
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	4b28      	ldr	r3, [pc, #160]	@ (80067ac <task_button+0x3e4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fdb1 	bl	8006274 <logger_log_print_>
 8006712:	f7ff f8f3 	bl	80058fc <vPortExitCritical>
          continue;
 8006716:	e045      	b.n	80067a4 <task_button+0x3dc>
      }

      // Enviar evento a UI
      if (!ao_ui_send_event(event)) {
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	4618      	mov	r0, r3
 800671c:	f001 f9a4 	bl	8007a68 <ao_ui_send_event>
 8006720:	4603      	mov	r3, r0
 8006722:	f083 0301 	eor.w	r3, r3, #1
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d038      	beq.n	800679e <task_button+0x3d6>
        LOGGER_ERROR("Button: Error enviando evento a UI");
 800672c:	f7ff f8b4 	bl	8005898 <vPortEnterCritical>
 8006730:	4b1e      	ldr	r3, [pc, #120]	@ (80067ac <task_button+0x3e4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1e      	ldr	r2, [pc, #120]	@ (80067b0 <task_button+0x3e8>)
 8006736:	213f      	movs	r1, #63	@ 0x3f
 8006738:	4618      	mov	r0, r3
 800673a:	f001 ff13 	bl	8008564 <sniprintf>
 800673e:	4603      	mov	r3, r0
 8006740:	4a1c      	ldr	r2, [pc, #112]	@ (80067b4 <task_button+0x3ec>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	4b19      	ldr	r3, [pc, #100]	@ (80067ac <task_button+0x3e4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff fd93 	bl	8006274 <logger_log_print_>
 800674e:	f7ff f8d5 	bl	80058fc <vPortExitCritical>
 8006752:	f7ff f8a1 	bl	8005898 <vPortEnterCritical>
 8006756:	4b15      	ldr	r3, [pc, #84]	@ (80067ac <task_button+0x3e4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a19      	ldr	r2, [pc, #100]	@ (80067c0 <task_button+0x3f8>)
 800675c:	213f      	movs	r1, #63	@ 0x3f
 800675e:	4618      	mov	r0, r3
 8006760:	f001 ff00 	bl	8008564 <sniprintf>
 8006764:	4603      	mov	r3, r0
 8006766:	4a13      	ldr	r2, [pc, #76]	@ (80067b4 <task_button+0x3ec>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	4b10      	ldr	r3, [pc, #64]	@ (80067ac <task_button+0x3e4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fd80 	bl	8006274 <logger_log_print_>
 8006774:	f7ff f8c2 	bl	80058fc <vPortExitCritical>
 8006778:	f7ff f88e 	bl	8005898 <vPortEnterCritical>
 800677c:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <task_button+0x3e4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a0e      	ldr	r2, [pc, #56]	@ (80067bc <task_button+0x3f4>)
 8006782:	213f      	movs	r1, #63	@ 0x3f
 8006784:	4618      	mov	r0, r3
 8006786:	f001 feed 	bl	8008564 <sniprintf>
 800678a:	4603      	mov	r3, r0
 800678c:	4a09      	ldr	r2, [pc, #36]	@ (80067b4 <task_button+0x3ec>)
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <task_button+0x3e4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fd6d 	bl	8006274 <logger_log_print_>
 800679a:	f7ff f8af 	bl	80058fc <vPortExitCritical>
      }
    }

    vTaskDelay((TickType_t)(TASK_PERIOD_MS_ / portTICK_PERIOD_MS));
 800679e:	2032      	movs	r0, #50	@ 0x32
 80067a0:	f7fe f9e0 	bl	8004b64 <vTaskDelay>
  {
 80067a4:	e691      	b.n	80064ca <task_button+0x102>
  }
}
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	08009b70 	.word	0x08009b70
 80067b0:	08009594 	.word	0x08009594
 80067b4:	200041ec 	.word	0x200041ec
 80067b8:	08009658 	.word	0x08009658
 80067bc:	080095c8 	.word	0x080095c8
 80067c0:	08009680 	.word	0x08009680

080067c4 <ledColorToStr>:
/********************** external data definition *****************************/

/********************** internal functions definition ************************/

const char* ledColorToStr(ao_led_color color)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
	switch(color)
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d008      	beq.n	80067e6 <ledColorToStr+0x22>
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	dc0a      	bgt.n	80067ee <ledColorToStr+0x2a>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <ledColorToStr+0x1e>
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d004      	beq.n	80067ea <ledColorToStr+0x26>
 80067e0:	e005      	b.n	80067ee <ledColorToStr+0x2a>
	{
	case AO_LED_COLOR_RED: return "ROJO";
 80067e2:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <ledColorToStr+0x38>)
 80067e4:	e004      	b.n	80067f0 <ledColorToStr+0x2c>
	case AO_LED_COLOR_BLUE: return "AZUL";
 80067e6:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <ledColorToStr+0x3c>)
 80067e8:	e002      	b.n	80067f0 <ledColorToStr+0x2c>
	case AO_LED_COLOR_GREEN: return "VERDE";
 80067ea:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <ledColorToStr+0x40>)
 80067ec:	e000      	b.n	80067f0 <ledColorToStr+0x2c>
	default: return "INVALIDO";
 80067ee:	4b06      	ldr	r3, [pc, #24]	@ (8006808 <ledColorToStr+0x44>)
	}
	return "INVALIDO";
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	080096a4 	.word	0x080096a4
 8006800:	080096ac 	.word	0x080096ac
 8006804:	080096b4 	.word	0x080096b4
 8006808:	080096bc 	.word	0x080096bc

0800680c <task_>:

static void task_(void *argument)
{
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b087      	sub	sp, #28
 8006810:	af02      	add	r7, sp, #8
 8006812:	6078      	str	r0, [r7, #4]
  ao_led_handle_t* hao = (ao_led_handle_t*)argument;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]
  if (NULL == hao) {
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d139      	bne.n	8006892 <task_+0x86>
    LOGGER_ERROR("LED task iniciada con handle nulo");
 800681e:	f7ff f83b 	bl	8005898 <vPortEnterCritical>
 8006822:	4b98      	ldr	r3, [pc, #608]	@ (8006a84 <task_+0x278>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a98      	ldr	r2, [pc, #608]	@ (8006a88 <task_+0x27c>)
 8006828:	213f      	movs	r1, #63	@ 0x3f
 800682a:	4618      	mov	r0, r3
 800682c:	f001 fe9a 	bl	8008564 <sniprintf>
 8006830:	4603      	mov	r3, r0
 8006832:	4a96      	ldr	r2, [pc, #600]	@ (8006a8c <task_+0x280>)
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	4b93      	ldr	r3, [pc, #588]	@ (8006a84 <task_+0x278>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fd1a 	bl	8006274 <logger_log_print_>
 8006840:	f7ff f85c 	bl	80058fc <vPortExitCritical>
 8006844:	f7ff f828 	bl	8005898 <vPortEnterCritical>
 8006848:	4b8e      	ldr	r3, [pc, #568]	@ (8006a84 <task_+0x278>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a90      	ldr	r2, [pc, #576]	@ (8006a90 <task_+0x284>)
 800684e:	213f      	movs	r1, #63	@ 0x3f
 8006850:	4618      	mov	r0, r3
 8006852:	f001 fe87 	bl	8008564 <sniprintf>
 8006856:	4603      	mov	r3, r0
 8006858:	4a8c      	ldr	r2, [pc, #560]	@ (8006a8c <task_+0x280>)
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	4b89      	ldr	r3, [pc, #548]	@ (8006a84 <task_+0x278>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fd07 	bl	8006274 <logger_log_print_>
 8006866:	f7ff f849 	bl	80058fc <vPortExitCritical>
 800686a:	f7ff f815 	bl	8005898 <vPortEnterCritical>
 800686e:	4b85      	ldr	r3, [pc, #532]	@ (8006a84 <task_+0x278>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a88      	ldr	r2, [pc, #544]	@ (8006a94 <task_+0x288>)
 8006874:	213f      	movs	r1, #63	@ 0x3f
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fe74 	bl	8008564 <sniprintf>
 800687c:	4603      	mov	r3, r0
 800687e:	4a83      	ldr	r2, [pc, #524]	@ (8006a8c <task_+0x280>)
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4b80      	ldr	r3, [pc, #512]	@ (8006a84 <task_+0x278>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fcf4 	bl	8006274 <logger_log_print_>
 800688c:	f7ff f836 	bl	80058fc <vPortExitCritical>
    return;
 8006890:	e314      	b.n	8006ebc <task_+0x6b0>
  }

  LOGGER_INFO("Iniciando tarea LED %s", ledColorToStr(hao->color));
 8006892:	f7ff f801 	bl	8005898 <vPortEnterCritical>
 8006896:	4b7b      	ldr	r3, [pc, #492]	@ (8006a84 <task_+0x278>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a7f      	ldr	r2, [pc, #508]	@ (8006a98 <task_+0x28c>)
 800689c:	213f      	movs	r1, #63	@ 0x3f
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 fe60 	bl	8008564 <sniprintf>
 80068a4:	4603      	mov	r3, r0
 80068a6:	4a79      	ldr	r2, [pc, #484]	@ (8006a8c <task_+0x280>)
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	4b76      	ldr	r3, [pc, #472]	@ (8006a84 <task_+0x278>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fce0 	bl	8006274 <logger_log_print_>
 80068b4:	f7ff f822 	bl	80058fc <vPortExitCritical>
 80068b8:	f7fe ffee 	bl	8005898 <vPortEnterCritical>
 80068bc:	4b71      	ldr	r3, [pc, #452]	@ (8006a84 <task_+0x278>)
 80068be:	681c      	ldr	r4, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff ff7d 	bl	80067c4 <ledColorToStr>
 80068ca:	4603      	mov	r3, r0
 80068cc:	4a73      	ldr	r2, [pc, #460]	@ (8006a9c <task_+0x290>)
 80068ce:	213f      	movs	r1, #63	@ 0x3f
 80068d0:	4620      	mov	r0, r4
 80068d2:	f001 fe47 	bl	8008564 <sniprintf>
 80068d6:	4603      	mov	r3, r0
 80068d8:	4a6c      	ldr	r2, [pc, #432]	@ (8006a8c <task_+0x280>)
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	4b69      	ldr	r3, [pc, #420]	@ (8006a84 <task_+0x278>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fcc7 	bl	8006274 <logger_log_print_>
 80068e6:	f7ff f809 	bl	80058fc <vPortExitCritical>
 80068ea:	f7fe ffd5 	bl	8005898 <vPortEnterCritical>
 80068ee:	4b65      	ldr	r3, [pc, #404]	@ (8006a84 <task_+0x278>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a68      	ldr	r2, [pc, #416]	@ (8006a94 <task_+0x288>)
 80068f4:	213f      	movs	r1, #63	@ 0x3f
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 fe34 	bl	8008564 <sniprintf>
 80068fc:	4603      	mov	r3, r0
 80068fe:	4a63      	ldr	r2, [pc, #396]	@ (8006a8c <task_+0x280>)
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	4b60      	ldr	r3, [pc, #384]	@ (8006a84 <task_+0x278>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fcb4 	bl	8006274 <logger_log_print_>
 800690c:	f7fe fff6 	bl	80058fc <vPortExitCritical>
  
  while (true)
  {
    ao_led_message_t* msg;
    if (pdPASS == xQueueReceive(hao->hqueue, (void*)&msg, pdMS_TO_TICKS(TASK_INACTIVITY_TIMEOUT_MS_)))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f107 0108 	add.w	r1, r7, #8
 8006918:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800691c:	4618      	mov	r0, r3
 800691e:	f7fd fcf5 	bl	800430c <xQueueReceive>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	f040 827b 	bne.w	8006e20 <task_+0x614>
    {
      // Inicializamos asumiendo éxito
      msg->status = AO_LED_STATUS_OK;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	741a      	strb	r2, [r3, #16]

      // Validación básica del mensaje
      if (NULL == msg || NULL == msg->callback) {
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <task_+0x132>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d14f      	bne.n	80069de <task_+0x1d2>
        LOGGER_ERROR("LED %s: Mensaje invalido recibido", ledColorToStr(hao->color));
 800693e:	f7fe ffab 	bl	8005898 <vPortEnterCritical>
 8006942:	4b50      	ldr	r3, [pc, #320]	@ (8006a84 <task_+0x278>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a50      	ldr	r2, [pc, #320]	@ (8006a88 <task_+0x27c>)
 8006948:	213f      	movs	r1, #63	@ 0x3f
 800694a:	4618      	mov	r0, r3
 800694c:	f001 fe0a 	bl	8008564 <sniprintf>
 8006950:	4603      	mov	r3, r0
 8006952:	4a4e      	ldr	r2, [pc, #312]	@ (8006a8c <task_+0x280>)
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4b4b      	ldr	r3, [pc, #300]	@ (8006a84 <task_+0x278>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fc8a 	bl	8006274 <logger_log_print_>
 8006960:	f7fe ffcc 	bl	80058fc <vPortExitCritical>
 8006964:	f7fe ff98 	bl	8005898 <vPortEnterCritical>
 8006968:	4b46      	ldr	r3, [pc, #280]	@ (8006a84 <task_+0x278>)
 800696a:	681c      	ldr	r4, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff ff27 	bl	80067c4 <ledColorToStr>
 8006976:	4603      	mov	r3, r0
 8006978:	4a49      	ldr	r2, [pc, #292]	@ (8006aa0 <task_+0x294>)
 800697a:	213f      	movs	r1, #63	@ 0x3f
 800697c:	4620      	mov	r0, r4
 800697e:	f001 fdf1 	bl	8008564 <sniprintf>
 8006982:	4603      	mov	r3, r0
 8006984:	4a41      	ldr	r2, [pc, #260]	@ (8006a8c <task_+0x280>)
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4b3e      	ldr	r3, [pc, #248]	@ (8006a84 <task_+0x278>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fc71 	bl	8006274 <logger_log_print_>
 8006992:	f7fe ffb3 	bl	80058fc <vPortExitCritical>
 8006996:	f7fe ff7f 	bl	8005898 <vPortEnterCritical>
 800699a:	4b3a      	ldr	r3, [pc, #232]	@ (8006a84 <task_+0x278>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a3d      	ldr	r2, [pc, #244]	@ (8006a94 <task_+0x288>)
 80069a0:	213f      	movs	r1, #63	@ 0x3f
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 fdde 	bl	8008564 <sniprintf>
 80069a8:	4603      	mov	r3, r0
 80069aa:	4a38      	ldr	r2, [pc, #224]	@ (8006a8c <task_+0x280>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4b35      	ldr	r3, [pc, #212]	@ (8006a84 <task_+0x278>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fc5e 	bl	8006274 <logger_log_print_>
 80069b8:	f7fe ffa0 	bl	80058fc <vPortExitCritical>
        if (msg != NULL && msg->callback != NULL) {
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 827a 	beq.w	8006eb8 <task_+0x6ac>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8275 	beq.w	8006eb8 <task_+0x6ac>
            msg->callback(msg->data.id, AO_LED_STATUS_INVALID_PARAMS);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	2101      	movs	r1, #1
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	e798      	b.n	8006910 <task_+0x104>
        }
        continue;
      }

      LOGGER_DEBUG("LED %s: Mensaje recibido [ID:%d, Action:%d]", 
 80069de:	f7fe ff5b 	bl	8005898 <vPortEnterCritical>
 80069e2:	4b28      	ldr	r3, [pc, #160]	@ (8006a84 <task_+0x278>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa4 <task_+0x298>)
 80069e8:	213f      	movs	r1, #63	@ 0x3f
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 fdba 	bl	8008564 <sniprintf>
 80069f0:	4603      	mov	r3, r0
 80069f2:	4a26      	ldr	r2, [pc, #152]	@ (8006a8c <task_+0x280>)
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b23      	ldr	r3, [pc, #140]	@ (8006a84 <task_+0x278>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fc3a 	bl	8006274 <logger_log_print_>
 8006a00:	f7fe ff7c 	bl	80058fc <vPortExitCritical>
 8006a04:	f7fe ff48 	bl	8005898 <vPortEnterCritical>
 8006a08:	4b1e      	ldr	r3, [pc, #120]	@ (8006a84 <task_+0x278>)
 8006a0a:	681c      	ldr	r4, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fed7 	bl	80067c4 <ledColorToStr>
 8006a16:	4601      	mov	r1, r0
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	7912      	ldrb	r2, [r2, #4]
 8006a20:	9201      	str	r2, [sp, #4]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	460b      	mov	r3, r1
 8006a26:	4a20      	ldr	r2, [pc, #128]	@ (8006aa8 <task_+0x29c>)
 8006a28:	213f      	movs	r1, #63	@ 0x3f
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f001 fd9a 	bl	8008564 <sniprintf>
 8006a30:	4603      	mov	r3, r0
 8006a32:	4a16      	ldr	r2, [pc, #88]	@ (8006a8c <task_+0x280>)
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	4b13      	ldr	r3, [pc, #76]	@ (8006a84 <task_+0x278>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fc1a 	bl	8006274 <logger_log_print_>
 8006a40:	f7fe ff5c 	bl	80058fc <vPortExitCritical>
 8006a44:	f7fe ff28 	bl	8005898 <vPortEnterCritical>
 8006a48:	4b0e      	ldr	r3, [pc, #56]	@ (8006a84 <task_+0x278>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a11      	ldr	r2, [pc, #68]	@ (8006a94 <task_+0x288>)
 8006a4e:	213f      	movs	r1, #63	@ 0x3f
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fd87 	bl	8008564 <sniprintf>
 8006a56:	4603      	mov	r3, r0
 8006a58:	4a0c      	ldr	r2, [pc, #48]	@ (8006a8c <task_+0x280>)
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	4b09      	ldr	r3, [pc, #36]	@ (8006a84 <task_+0x278>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fc07 	bl	8006274 <logger_log_print_>
 8006a66:	f7fe ff49 	bl	80058fc <vPortExitCritical>
                  ledColorToStr(hao->color), msg->data.id, msg->data.action);

      switch (msg->data.action) {
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	791b      	ldrb	r3, [r3, #4]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	f000 80bc 	beq.w	8006bec <task_+0x3e0>
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	f300 8183 	bgt.w	8006d80 <task_+0x574>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <task_+0x2a0>
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d064      	beq.n	8006b4c <task_+0x340>
 8006a82:	e17d      	b.n	8006d80 <task_+0x574>
 8006a84:	08009b70 	.word	0x08009b70
 8006a88:	080096c8 	.word	0x080096c8
 8006a8c:	200041ec 	.word	0x200041ec
 8006a90:	080096d4 	.word	0x080096d4
 8006a94:	080096f8 	.word	0x080096f8
 8006a98:	080096fc 	.word	0x080096fc
 8006a9c:	08009704 	.word	0x08009704
 8006aa0:	0800971c 	.word	0x0800971c
 8006aa4:	08009740 	.word	0x08009740
 8006aa8:	0800974c 	.word	0x0800974c
        case AO_LED_MESSAGE_ON:
          HAL_GPIO_WritePin(led_port_[hao->color], led_pin_[hao->color], GPIO_PIN_SET);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4ba8      	ldr	r3, [pc, #672]	@ (8006d54 <task_+0x548>)
 8006ab4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	4ba6      	ldr	r3, [pc, #664]	@ (8006d58 <task_+0x54c>)
 8006ac0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	f7fa ffc4 	bl	8001a54 <HAL_GPIO_WritePin>
          LOGGER_INFO("LED %s ENCENDIDO", ledColorToStr(hao->color));
 8006acc:	f7fe fee4 	bl	8005898 <vPortEnterCritical>
 8006ad0:	4ba2      	ldr	r3, [pc, #648]	@ (8006d5c <task_+0x550>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4aa2      	ldr	r2, [pc, #648]	@ (8006d60 <task_+0x554>)
 8006ad6:	213f      	movs	r1, #63	@ 0x3f
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 fd43 	bl	8008564 <sniprintf>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4aa0      	ldr	r2, [pc, #640]	@ (8006d64 <task_+0x558>)
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	4b9d      	ldr	r3, [pc, #628]	@ (8006d5c <task_+0x550>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fbc3 	bl	8006274 <logger_log_print_>
 8006aee:	f7fe ff05 	bl	80058fc <vPortExitCritical>
 8006af2:	f7fe fed1 	bl	8005898 <vPortEnterCritical>
 8006af6:	4b99      	ldr	r3, [pc, #612]	@ (8006d5c <task_+0x550>)
 8006af8:	681c      	ldr	r4, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff fe60 	bl	80067c4 <ledColorToStr>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4a98      	ldr	r2, [pc, #608]	@ (8006d68 <task_+0x55c>)
 8006b08:	213f      	movs	r1, #63	@ 0x3f
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f001 fd2a 	bl	8008564 <sniprintf>
 8006b10:	4603      	mov	r3, r0
 8006b12:	4a94      	ldr	r2, [pc, #592]	@ (8006d64 <task_+0x558>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	4b91      	ldr	r3, [pc, #580]	@ (8006d5c <task_+0x550>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fbaa 	bl	8006274 <logger_log_print_>
 8006b20:	f7fe feec 	bl	80058fc <vPortExitCritical>
 8006b24:	f7fe feb8 	bl	8005898 <vPortEnterCritical>
 8006b28:	4b8c      	ldr	r3, [pc, #560]	@ (8006d5c <task_+0x550>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a8f      	ldr	r2, [pc, #572]	@ (8006d6c <task_+0x560>)
 8006b2e:	213f      	movs	r1, #63	@ 0x3f
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 fd17 	bl	8008564 <sniprintf>
 8006b36:	4603      	mov	r3, r0
 8006b38:	4a8a      	ldr	r2, [pc, #552]	@ (8006d64 <task_+0x558>)
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b87      	ldr	r3, [pc, #540]	@ (8006d5c <task_+0x550>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff fb97 	bl	8006274 <logger_log_print_>
 8006b46:	f7fe fed9 	bl	80058fc <vPortExitCritical>
          break;
 8006b4a:	e160      	b.n	8006e0e <task_+0x602>

        case AO_LED_MESSAGE_OFF:
          HAL_GPIO_WritePin(led_port_[hao->color], led_pin_[hao->color], GPIO_PIN_RESET);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b80      	ldr	r3, [pc, #512]	@ (8006d54 <task_+0x548>)
 8006b54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d58 <task_+0x54c>)
 8006b60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b64:	2200      	movs	r2, #0
 8006b66:	4619      	mov	r1, r3
 8006b68:	f7fa ff74 	bl	8001a54 <HAL_GPIO_WritePin>
          LOGGER_INFO("LED %s APAGADO", ledColorToStr(hao->color));
 8006b6c:	f7fe fe94 	bl	8005898 <vPortEnterCritical>
 8006b70:	4b7a      	ldr	r3, [pc, #488]	@ (8006d5c <task_+0x550>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a7a      	ldr	r2, [pc, #488]	@ (8006d60 <task_+0x554>)
 8006b76:	213f      	movs	r1, #63	@ 0x3f
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 fcf3 	bl	8008564 <sniprintf>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4a78      	ldr	r2, [pc, #480]	@ (8006d64 <task_+0x558>)
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	4b75      	ldr	r3, [pc, #468]	@ (8006d5c <task_+0x550>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fb73 	bl	8006274 <logger_log_print_>
 8006b8e:	f7fe feb5 	bl	80058fc <vPortExitCritical>
 8006b92:	f7fe fe81 	bl	8005898 <vPortEnterCritical>
 8006b96:	4b71      	ldr	r3, [pc, #452]	@ (8006d5c <task_+0x550>)
 8006b98:	681c      	ldr	r4, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fe10 	bl	80067c4 <ledColorToStr>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4a72      	ldr	r2, [pc, #456]	@ (8006d70 <task_+0x564>)
 8006ba8:	213f      	movs	r1, #63	@ 0x3f
 8006baa:	4620      	mov	r0, r4
 8006bac:	f001 fcda 	bl	8008564 <sniprintf>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8006d64 <task_+0x558>)
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	4b69      	ldr	r3, [pc, #420]	@ (8006d5c <task_+0x550>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fb5a 	bl	8006274 <logger_log_print_>
 8006bc0:	f7fe fe9c 	bl	80058fc <vPortExitCritical>
 8006bc4:	f7fe fe68 	bl	8005898 <vPortEnterCritical>
 8006bc8:	4b64      	ldr	r3, [pc, #400]	@ (8006d5c <task_+0x550>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a67      	ldr	r2, [pc, #412]	@ (8006d6c <task_+0x560>)
 8006bce:	213f      	movs	r1, #63	@ 0x3f
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fcc7 	bl	8008564 <sniprintf>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4a62      	ldr	r2, [pc, #392]	@ (8006d64 <task_+0x558>)
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8006d5c <task_+0x550>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fb47 	bl	8006274 <logger_log_print_>
 8006be6:	f7fe fe89 	bl	80058fc <vPortExitCritical>
          break;
 8006bea:	e110      	b.n	8006e0e <task_+0x602>

        case AO_LED_MESSAGE_BLINK:
          if (msg->data.value <= 0) {
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	dc46      	bgt.n	8006c82 <task_+0x476>
            msg->status = AO_LED_STATUS_INVALID_PARAMS;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	741a      	strb	r2, [r3, #16]
            LOGGER_WARNING("LED %s: Tiempo de parpadeo invalido (%d)", ledColorToStr(hao->color), msg->data.value);
 8006bfa:	f7fe fe4d 	bl	8005898 <vPortEnterCritical>
 8006bfe:	4b57      	ldr	r3, [pc, #348]	@ (8006d5c <task_+0x550>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a5c      	ldr	r2, [pc, #368]	@ (8006d74 <task_+0x568>)
 8006c04:	213f      	movs	r1, #63	@ 0x3f
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 fcac 	bl	8008564 <sniprintf>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	4a55      	ldr	r2, [pc, #340]	@ (8006d64 <task_+0x558>)
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b52      	ldr	r3, [pc, #328]	@ (8006d5c <task_+0x550>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fb2c 	bl	8006274 <logger_log_print_>
 8006c1c:	f7fe fe6e 	bl	80058fc <vPortExitCritical>
 8006c20:	f7fe fe3a 	bl	8005898 <vPortEnterCritical>
 8006c24:	4b4d      	ldr	r3, [pc, #308]	@ (8006d5c <task_+0x550>)
 8006c26:	681c      	ldr	r4, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fdc9 	bl	80067c4 <ledColorToStr>
 8006c32:	4602      	mov	r2, r0
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	4a4e      	ldr	r2, [pc, #312]	@ (8006d78 <task_+0x56c>)
 8006c3e:	213f      	movs	r1, #63	@ 0x3f
 8006c40:	4620      	mov	r0, r4
 8006c42:	f001 fc8f 	bl	8008564 <sniprintf>
 8006c46:	4603      	mov	r3, r0
 8006c48:	4a46      	ldr	r2, [pc, #280]	@ (8006d64 <task_+0x558>)
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4b43      	ldr	r3, [pc, #268]	@ (8006d5c <task_+0x550>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fb0f 	bl	8006274 <logger_log_print_>
 8006c56:	f7fe fe51 	bl	80058fc <vPortExitCritical>
 8006c5a:	f7fe fe1d 	bl	8005898 <vPortEnterCritical>
 8006c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8006d5c <task_+0x550>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a42      	ldr	r2, [pc, #264]	@ (8006d6c <task_+0x560>)
 8006c64:	213f      	movs	r1, #63	@ 0x3f
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 fc7c 	bl	8008564 <sniprintf>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	4a3d      	ldr	r2, [pc, #244]	@ (8006d64 <task_+0x558>)
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	4b3a      	ldr	r3, [pc, #232]	@ (8006d5c <task_+0x550>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fafc 	bl	8006274 <logger_log_print_>
 8006c7c:	f7fe fe3e 	bl	80058fc <vPortExitCritical>
            break;
 8006c80:	e0c5      	b.n	8006e0e <task_+0x602>
          }

          LOGGER_INFO("LED %s: Iniciando parpadeo por %dms", ledColorToStr(hao->color), msg->data.value);
 8006c82:	f7fe fe09 	bl	8005898 <vPortEnterCritical>
 8006c86:	4b35      	ldr	r3, [pc, #212]	@ (8006d5c <task_+0x550>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a35      	ldr	r2, [pc, #212]	@ (8006d60 <task_+0x554>)
 8006c8c:	213f      	movs	r1, #63	@ 0x3f
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fc68 	bl	8008564 <sniprintf>
 8006c94:	4603      	mov	r3, r0
 8006c96:	4a33      	ldr	r2, [pc, #204]	@ (8006d64 <task_+0x558>)
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	4b30      	ldr	r3, [pc, #192]	@ (8006d5c <task_+0x550>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff fae8 	bl	8006274 <logger_log_print_>
 8006ca4:	f7fe fe2a 	bl	80058fc <vPortExitCritical>
 8006ca8:	f7fe fdf6 	bl	8005898 <vPortEnterCritical>
 8006cac:	4b2b      	ldr	r3, [pc, #172]	@ (8006d5c <task_+0x550>)
 8006cae:	681c      	ldr	r4, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fd85 	bl	80067c4 <ledColorToStr>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8006d7c <task_+0x570>)
 8006cc6:	213f      	movs	r1, #63	@ 0x3f
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f001 fc4b 	bl	8008564 <sniprintf>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4a24      	ldr	r2, [pc, #144]	@ (8006d64 <task_+0x558>)
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	4b21      	ldr	r3, [pc, #132]	@ (8006d5c <task_+0x550>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff facb 	bl	8006274 <logger_log_print_>
 8006cde:	f7fe fe0d 	bl	80058fc <vPortExitCritical>
 8006ce2:	f7fe fdd9 	bl	8005898 <vPortEnterCritical>
 8006ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d5c <task_+0x550>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a20      	ldr	r2, [pc, #128]	@ (8006d6c <task_+0x560>)
 8006cec:	213f      	movs	r1, #63	@ 0x3f
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fc38 	bl	8008564 <sniprintf>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d64 <task_+0x558>)
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	4b18      	ldr	r3, [pc, #96]	@ (8006d5c <task_+0x550>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fab8 	bl	8006274 <logger_log_print_>
 8006d04:	f7fe fdfa 	bl	80058fc <vPortExitCritical>
          HAL_GPIO_WritePin(led_port_[hao->color], led_pin_[hao->color], GPIO_PIN_SET);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4b11      	ldr	r3, [pc, #68]	@ (8006d54 <task_+0x548>)
 8006d10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d58 <task_+0x54c>)
 8006d1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d20:	2201      	movs	r2, #1
 8006d22:	4619      	mov	r1, r3
 8006d24:	f7fa fe96 	bl	8001a54 <HAL_GPIO_WritePin>
          vTaskDelay((TickType_t)((msg->data.value) / portTICK_PERIOD_MS));
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fd ff19 	bl	8004b64 <vTaskDelay>
          HAL_GPIO_WritePin(led_port_[hao->color], led_pin_[hao->color], GPIO_PIN_RESET);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <task_+0x548>)
 8006d3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	4b04      	ldr	r3, [pc, #16]	@ (8006d58 <task_+0x54c>)
 8006d46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f7fa fe81 	bl	8001a54 <HAL_GPIO_WritePin>
          break;
 8006d52:	e05c      	b.n	8006e0e <task_+0x602>
 8006d54:	20000010 	.word	0x20000010
 8006d58:	2000001c 	.word	0x2000001c
 8006d5c:	08009b70 	.word	0x08009b70
 8006d60:	080096fc 	.word	0x080096fc
 8006d64:	200041ec 	.word	0x200041ec
 8006d68:	08009778 	.word	0x08009778
 8006d6c:	080096f8 	.word	0x080096f8
 8006d70:	0800978c 	.word	0x0800978c
 8006d74:	0800979c 	.word	0x0800979c
 8006d78:	080097a8 	.word	0x080097a8
 8006d7c:	080097d4 	.word	0x080097d4

        default:
          msg->status = AO_LED_STATUS_INVALID_ACTION;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2202      	movs	r2, #2
 8006d84:	741a      	strb	r2, [r3, #16]
          LOGGER_ERROR("LED %s: Accion desconocida recibida (%d)", ledColorToStr(hao->color), msg->data.action);
 8006d86:	f7fe fd87 	bl	8005898 <vPortEnterCritical>
 8006d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8006ec4 <task_+0x6b8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ec8 <task_+0x6bc>)
 8006d90:	213f      	movs	r1, #63	@ 0x3f
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 fbe6 	bl	8008564 <sniprintf>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8006ecc <task_+0x6c0>)
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	4b49      	ldr	r3, [pc, #292]	@ (8006ec4 <task_+0x6b8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff fa66 	bl	8006274 <logger_log_print_>
 8006da8:	f7fe fda8 	bl	80058fc <vPortExitCritical>
 8006dac:	f7fe fd74 	bl	8005898 <vPortEnterCritical>
 8006db0:	4b44      	ldr	r3, [pc, #272]	@ (8006ec4 <task_+0x6b8>)
 8006db2:	681c      	ldr	r4, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fd03 	bl	80067c4 <ledColorToStr>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	791b      	ldrb	r3, [r3, #4]
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	4a41      	ldr	r2, [pc, #260]	@ (8006ed0 <task_+0x6c4>)
 8006dca:	213f      	movs	r1, #63	@ 0x3f
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f001 fbc9 	bl	8008564 <sniprintf>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	4a3d      	ldr	r2, [pc, #244]	@ (8006ecc <task_+0x6c0>)
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8006ec4 <task_+0x6b8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fa49 	bl	8006274 <logger_log_print_>
 8006de2:	f7fe fd8b 	bl	80058fc <vPortExitCritical>
 8006de6:	f7fe fd57 	bl	8005898 <vPortEnterCritical>
 8006dea:	4b36      	ldr	r3, [pc, #216]	@ (8006ec4 <task_+0x6b8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a39      	ldr	r2, [pc, #228]	@ (8006ed4 <task_+0x6c8>)
 8006df0:	213f      	movs	r1, #63	@ 0x3f
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fbb6 	bl	8008564 <sniprintf>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	4a34      	ldr	r2, [pc, #208]	@ (8006ecc <task_+0x6c0>)
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	4b31      	ldr	r3, [pc, #196]	@ (8006ec4 <task_+0x6b8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff fa36 	bl	8006274 <logger_log_print_>
 8006e08:	f7fe fd78 	bl	80058fc <vPortExitCritical>
          break;
 8006e0c:	bf00      	nop
      }
      
      // Notificamos el resultado
      msg->callback(msg->data.id, msg->status);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	6810      	ldr	r0, [r2, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	7c12      	ldrb	r2, [r2, #16]
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4798      	blx	r3
 8006e1e:	e577      	b.n	8006910 <task_+0x104>
    }
    else {
      // No hay mensajes después del timeout, auto-destruir
      LOGGER_INFO("LED %s: Sin mensajes por %dms, auto-destruyendo", 
 8006e20:	f7fe fd3a 	bl	8005898 <vPortEnterCritical>
 8006e24:	4b27      	ldr	r3, [pc, #156]	@ (8006ec4 <task_+0x6b8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2b      	ldr	r2, [pc, #172]	@ (8006ed8 <task_+0x6cc>)
 8006e2a:	213f      	movs	r1, #63	@ 0x3f
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 fb99 	bl	8008564 <sniprintf>
 8006e32:	4603      	mov	r3, r0
 8006e34:	4a25      	ldr	r2, [pc, #148]	@ (8006ecc <task_+0x6c0>)
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	4b22      	ldr	r3, [pc, #136]	@ (8006ec4 <task_+0x6b8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fa19 	bl	8006274 <logger_log_print_>
 8006e42:	f7fe fd5b 	bl	80058fc <vPortExitCritical>
 8006e46:	f7fe fd27 	bl	8005898 <vPortEnterCritical>
 8006e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ec4 <task_+0x6b8>)
 8006e4c:	681c      	ldr	r4, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fcb6 	bl	80067c4 <ledColorToStr>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006e5e:	9200      	str	r2, [sp, #0]
 8006e60:	4a1e      	ldr	r2, [pc, #120]	@ (8006edc <task_+0x6d0>)
 8006e62:	213f      	movs	r1, #63	@ 0x3f
 8006e64:	4620      	mov	r0, r4
 8006e66:	f001 fb7d 	bl	8008564 <sniprintf>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4a17      	ldr	r2, [pc, #92]	@ (8006ecc <task_+0x6c0>)
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	4b14      	ldr	r3, [pc, #80]	@ (8006ec4 <task_+0x6b8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff f9fd 	bl	8006274 <logger_log_print_>
 8006e7a:	f7fe fd3f 	bl	80058fc <vPortExitCritical>
 8006e7e:	f7fe fd0b 	bl	8005898 <vPortEnterCritical>
 8006e82:	4b10      	ldr	r3, [pc, #64]	@ (8006ec4 <task_+0x6b8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a13      	ldr	r2, [pc, #76]	@ (8006ed4 <task_+0x6c8>)
 8006e88:	213f      	movs	r1, #63	@ 0x3f
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 fb6a 	bl	8008564 <sniprintf>
 8006e90:	4603      	mov	r3, r0
 8006e92:	4a0e      	ldr	r2, [pc, #56]	@ (8006ecc <task_+0x6c0>)
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec4 <task_+0x6b8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff f9ea 	bl	8006274 <logger_log_print_>
 8006ea0:	f7fe fd2c 	bl	80058fc <vPortExitCritical>
                 ledColorToStr(hao->color), TASK_INACTIVITY_TIMEOUT_MS_);
      hao->is_active = false;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	721a      	strb	r2, [r3, #8]
      hao->task_handle = NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	60da      	str	r2, [r3, #12]
      vTaskDelete(NULL);
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f7fd fdc7 	bl	8004a44 <vTaskDelete>
 8006eb6:	e001      	b.n	8006ebc <task_+0x6b0>
        continue;
 8006eb8:	bf00      	nop
  {
 8006eba:	e529      	b.n	8006910 <task_+0x104>
      break;
    }
  }
}
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	08009b70 	.word	0x08009b70
 8006ec8:	080096c8 	.word	0x080096c8
 8006ecc:	200041ec 	.word	0x200041ec
 8006ed0:	080097f8 	.word	0x080097f8
 8006ed4:	080096f8 	.word	0x080096f8
 8006ed8:	080096fc 	.word	0x080096fc
 8006edc:	08009824 	.word	0x08009824

08006ee0 <ao_led_send>:

/********************** external functions definition ************************/

bool ao_led_send(ao_led_handle_t* hao, ao_led_message_t* msg)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  if (NULL == hao || NULL == msg || NULL == msg->callback) {
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <ao_led_send+0x1e>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <ao_led_send+0x1e>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d13a      	bne.n	8006f74 <ao_led_send+0x94>
    LOGGER_ERROR("ao_led_send: Parametros invalidos");
 8006efe:	f7fe fccb 	bl	8005898 <vPortEnterCritical>
 8006f02:	4b68      	ldr	r3, [pc, #416]	@ (80070a4 <ao_led_send+0x1c4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a68      	ldr	r2, [pc, #416]	@ (80070a8 <ao_led_send+0x1c8>)
 8006f08:	213f      	movs	r1, #63	@ 0x3f
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 fb2a 	bl	8008564 <sniprintf>
 8006f10:	4603      	mov	r3, r0
 8006f12:	4a66      	ldr	r2, [pc, #408]	@ (80070ac <ao_led_send+0x1cc>)
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	4b63      	ldr	r3, [pc, #396]	@ (80070a4 <ao_led_send+0x1c4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff f9aa 	bl	8006274 <logger_log_print_>
 8006f20:	f7fe fcec 	bl	80058fc <vPortExitCritical>
 8006f24:	f7fe fcb8 	bl	8005898 <vPortEnterCritical>
 8006f28:	4b5e      	ldr	r3, [pc, #376]	@ (80070a4 <ao_led_send+0x1c4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a60      	ldr	r2, [pc, #384]	@ (80070b0 <ao_led_send+0x1d0>)
 8006f2e:	213f      	movs	r1, #63	@ 0x3f
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fb17 	bl	8008564 <sniprintf>
 8006f36:	4603      	mov	r3, r0
 8006f38:	4a5c      	ldr	r2, [pc, #368]	@ (80070ac <ao_led_send+0x1cc>)
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	4b59      	ldr	r3, [pc, #356]	@ (80070a4 <ao_led_send+0x1c4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff f997 	bl	8006274 <logger_log_print_>
 8006f46:	f7fe fcd9 	bl	80058fc <vPortExitCritical>
 8006f4a:	f7fe fca5 	bl	8005898 <vPortEnterCritical>
 8006f4e:	4b55      	ldr	r3, [pc, #340]	@ (80070a4 <ao_led_send+0x1c4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a58      	ldr	r2, [pc, #352]	@ (80070b4 <ao_led_send+0x1d4>)
 8006f54:	213f      	movs	r1, #63	@ 0x3f
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 fb04 	bl	8008564 <sniprintf>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4a53      	ldr	r2, [pc, #332]	@ (80070ac <ao_led_send+0x1cc>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	4b50      	ldr	r3, [pc, #320]	@ (80070a4 <ao_led_send+0x1c4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff f984 	bl	8006274 <logger_log_print_>
 8006f6c:	f7fe fcc6 	bl	80058fc <vPortExitCritical>
    return false;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e093      	b.n	800709c <ao_led_send+0x1bc>
  }

  if (msg->data.action >= AO_LED_MESSAGE__N) {
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	791b      	ldrb	r3, [r3, #4]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d93b      	bls.n	8006ff4 <ao_led_send+0x114>
    LOGGER_ERROR("ao_led_send: Accion invalida (%d)", msg->data.action);
 8006f7c:	f7fe fc8c 	bl	8005898 <vPortEnterCritical>
 8006f80:	4b48      	ldr	r3, [pc, #288]	@ (80070a4 <ao_led_send+0x1c4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a48      	ldr	r2, [pc, #288]	@ (80070a8 <ao_led_send+0x1c8>)
 8006f86:	213f      	movs	r1, #63	@ 0x3f
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 faeb 	bl	8008564 <sniprintf>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4a46      	ldr	r2, [pc, #280]	@ (80070ac <ao_led_send+0x1cc>)
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	4b43      	ldr	r3, [pc, #268]	@ (80070a4 <ao_led_send+0x1c4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff f96b 	bl	8006274 <logger_log_print_>
 8006f9e:	f7fe fcad 	bl	80058fc <vPortExitCritical>
 8006fa2:	f7fe fc79 	bl	8005898 <vPortEnterCritical>
 8006fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80070a4 <ao_led_send+0x1c4>)
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	791b      	ldrb	r3, [r3, #4]
 8006fae:	4a42      	ldr	r2, [pc, #264]	@ (80070b8 <ao_led_send+0x1d8>)
 8006fb0:	213f      	movs	r1, #63	@ 0x3f
 8006fb2:	f001 fad7 	bl	8008564 <sniprintf>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80070ac <ao_led_send+0x1cc>)
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	4b39      	ldr	r3, [pc, #228]	@ (80070a4 <ao_led_send+0x1c4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff f957 	bl	8006274 <logger_log_print_>
 8006fc6:	f7fe fc99 	bl	80058fc <vPortExitCritical>
 8006fca:	f7fe fc65 	bl	8005898 <vPortEnterCritical>
 8006fce:	4b35      	ldr	r3, [pc, #212]	@ (80070a4 <ao_led_send+0x1c4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a38      	ldr	r2, [pc, #224]	@ (80070b4 <ao_led_send+0x1d4>)
 8006fd4:	213f      	movs	r1, #63	@ 0x3f
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 fac4 	bl	8008564 <sniprintf>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4a33      	ldr	r2, [pc, #204]	@ (80070ac <ao_led_send+0x1cc>)
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4b30      	ldr	r3, [pc, #192]	@ (80070a4 <ao_led_send+0x1c4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff f944 	bl	8006274 <logger_log_print_>
 8006fec:	f7fe fc86 	bl	80058fc <vPortExitCritical>
    return false;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e053      	b.n	800709c <ao_led_send+0x1bc>
  }

  if (msg->data.action == AO_LED_MESSAGE_BLINK && msg->data.value <= 0) {
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	791b      	ldrb	r3, [r3, #4]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d13f      	bne.n	800707c <ao_led_send+0x19c>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	dc3b      	bgt.n	800707c <ao_led_send+0x19c>
    LOGGER_ERROR("ao_led_send: Tiempo de parpadeo invalido (%d)", msg->data.value);
 8007004:	f7fe fc48 	bl	8005898 <vPortEnterCritical>
 8007008:	4b26      	ldr	r3, [pc, #152]	@ (80070a4 <ao_led_send+0x1c4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a26      	ldr	r2, [pc, #152]	@ (80070a8 <ao_led_send+0x1c8>)
 800700e:	213f      	movs	r1, #63	@ 0x3f
 8007010:	4618      	mov	r0, r3
 8007012:	f001 faa7 	bl	8008564 <sniprintf>
 8007016:	4603      	mov	r3, r0
 8007018:	4a24      	ldr	r2, [pc, #144]	@ (80070ac <ao_led_send+0x1cc>)
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	4b21      	ldr	r3, [pc, #132]	@ (80070a4 <ao_led_send+0x1c4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff f927 	bl	8006274 <logger_log_print_>
 8007026:	f7fe fc69 	bl	80058fc <vPortExitCritical>
 800702a:	f7fe fc35 	bl	8005898 <vPortEnterCritical>
 800702e:	4b1d      	ldr	r3, [pc, #116]	@ (80070a4 <ao_led_send+0x1c4>)
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	4a21      	ldr	r2, [pc, #132]	@ (80070bc <ao_led_send+0x1dc>)
 8007038:	213f      	movs	r1, #63	@ 0x3f
 800703a:	f001 fa93 	bl	8008564 <sniprintf>
 800703e:	4603      	mov	r3, r0
 8007040:	4a1a      	ldr	r2, [pc, #104]	@ (80070ac <ao_led_send+0x1cc>)
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	4b17      	ldr	r3, [pc, #92]	@ (80070a4 <ao_led_send+0x1c4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff f913 	bl	8006274 <logger_log_print_>
 800704e:	f7fe fc55 	bl	80058fc <vPortExitCritical>
 8007052:	f7fe fc21 	bl	8005898 <vPortEnterCritical>
 8007056:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <ao_led_send+0x1c4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a16      	ldr	r2, [pc, #88]	@ (80070b4 <ao_led_send+0x1d4>)
 800705c:	213f      	movs	r1, #63	@ 0x3f
 800705e:	4618      	mov	r0, r3
 8007060:	f001 fa80 	bl	8008564 <sniprintf>
 8007064:	4603      	mov	r3, r0
 8007066:	4a11      	ldr	r2, [pc, #68]	@ (80070ac <ao_led_send+0x1cc>)
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	4b0e      	ldr	r3, [pc, #56]	@ (80070a4 <ao_led_send+0x1c4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff f900 	bl	8006274 <logger_log_print_>
 8007074:	f7fe fc42 	bl	80058fc <vPortExitCritical>
    return false;
 8007078:	2300      	movs	r3, #0
 800707a:	e00f      	b.n	800709c <ao_led_send+0x1bc>
  }

  // Inicializamos el status
  msg->status = AO_LED_STATUS_OK;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	741a      	strb	r2, [r3, #16]

  return (pdPASS == xQueueSend(hao->hqueue, (void*)msg, 0));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6858      	ldr	r0, [r3, #4]
 8007086:	2300      	movs	r3, #0
 8007088:	2200      	movs	r2, #0
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	f7fd f83c 	bl	8004108 <xQueueGenericSend>
 8007090:	4603      	mov	r3, r0
 8007092:	2b01      	cmp	r3, #1
 8007094:	bf0c      	ite	eq
 8007096:	2301      	moveq	r3, #1
 8007098:	2300      	movne	r3, #0
 800709a:	b2db      	uxtb	r3, r3
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	08009b70 	.word	0x08009b70
 80070a8:	080096c8 	.word	0x080096c8
 80070ac:	200041ec 	.word	0x200041ec
 80070b0:	08009854 	.word	0x08009854
 80070b4:	080096f8 	.word	0x080096f8
 80070b8:	08009878 	.word	0x08009878
 80070bc:	0800989c 	.word	0x0800989c

080070c0 <ao_led_init>:

void ao_led_init(ao_led_handle_t* hao, ao_led_color color)
{
 80070c0:	b590      	push	{r4, r7, lr}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  hao->color = color;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	701a      	strb	r2, [r3, #0]
  hao->is_active = false;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	721a      	strb	r2, [r3, #8]
  hao->task_handle = NULL;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	60da      	str	r2, [r3, #12]

  hao->hqueue = xQueueCreate(QUEUE_LENGTH_, QUEUE_ITEM_SIZE_);
 80070de:	2200      	movs	r2, #0
 80070e0:	2114      	movs	r1, #20
 80070e2:	200a      	movs	r0, #10
 80070e4:	f7fc ffb2 	bl	800404c <xQueueGenericCreate>
 80070e8:	4602      	mov	r2, r0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	605a      	str	r2, [r3, #4]
  while(NULL == hao->hqueue)
 80070ee:	e03e      	b.n	800716e <ao_led_init+0xae>
  {
    // Error: No se pudo crear la cola del LED
    LOGGER_ERROR("LED %s: Error creando cola", ledColorToStr(hao->color));
 80070f0:	f7fe fbd2 	bl	8005898 <vPortEnterCritical>
 80070f4:	4b22      	ldr	r3, [pc, #136]	@ (8007180 <ao_led_init+0xc0>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a22      	ldr	r2, [pc, #136]	@ (8007184 <ao_led_init+0xc4>)
 80070fa:	213f      	movs	r1, #63	@ 0x3f
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 fa31 	bl	8008564 <sniprintf>
 8007102:	4603      	mov	r3, r0
 8007104:	4a20      	ldr	r2, [pc, #128]	@ (8007188 <ao_led_init+0xc8>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	4b1d      	ldr	r3, [pc, #116]	@ (8007180 <ao_led_init+0xc0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff f8b1 	bl	8006274 <logger_log_print_>
 8007112:	f7fe fbf3 	bl	80058fc <vPortExitCritical>
 8007116:	f7fe fbbf 	bl	8005898 <vPortEnterCritical>
 800711a:	4b19      	ldr	r3, [pc, #100]	@ (8007180 <ao_led_init+0xc0>)
 800711c:	681c      	ldr	r4, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fb4e 	bl	80067c4 <ledColorToStr>
 8007128:	4603      	mov	r3, r0
 800712a:	4a18      	ldr	r2, [pc, #96]	@ (800718c <ao_led_init+0xcc>)
 800712c:	213f      	movs	r1, #63	@ 0x3f
 800712e:	4620      	mov	r0, r4
 8007130:	f001 fa18 	bl	8008564 <sniprintf>
 8007134:	4603      	mov	r3, r0
 8007136:	4a14      	ldr	r2, [pc, #80]	@ (8007188 <ao_led_init+0xc8>)
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4b11      	ldr	r3, [pc, #68]	@ (8007180 <ao_led_init+0xc0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff f898 	bl	8006274 <logger_log_print_>
 8007144:	f7fe fbda 	bl	80058fc <vPortExitCritical>
 8007148:	f7fe fba6 	bl	8005898 <vPortEnterCritical>
 800714c:	4b0c      	ldr	r3, [pc, #48]	@ (8007180 <ao_led_init+0xc0>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0f      	ldr	r2, [pc, #60]	@ (8007190 <ao_led_init+0xd0>)
 8007152:	213f      	movs	r1, #63	@ 0x3f
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fa05 	bl	8008564 <sniprintf>
 800715a:	4603      	mov	r3, r0
 800715c:	4a0a      	ldr	r2, [pc, #40]	@ (8007188 <ao_led_init+0xc8>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	4b07      	ldr	r3, [pc, #28]	@ (8007180 <ao_led_init+0xc0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff f885 	bl	8006274 <logger_log_print_>
 800716a:	f7fe fbc7 	bl	80058fc <vPortExitCritical>
  while(NULL == hao->hqueue)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0bc      	beq.n	80070f0 <ao_led_init+0x30>
  }
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bd90      	pop	{r4, r7, pc}
 8007180:	08009b70 	.word	0x08009b70
 8007184:	080096c8 	.word	0x080096c8
 8007188:	200041ec 	.word	0x200041ec
 800718c:	080098cc 	.word	0x080098cc
 8007190:	080096f8 	.word	0x080096f8

08007194 <ao_led_start_task>:

BaseType_t ao_led_start_task(ao_led_handle_t* hao)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b087      	sub	sp, #28
 8007198:	af02      	add	r7, sp, #8
 800719a:	6078      	str	r0, [r7, #4]
  if(hao->is_active) {
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	7a1b      	ldrb	r3, [r3, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <ao_led_start_task+0x14>
    return pdPASS; // Ya está activa
 80071a4:	2301      	movs	r3, #1
 80071a6:	e051      	b.n	800724c <ao_led_start_task+0xb8>
  }

  BaseType_t status = xTaskCreate(task_, "task_ao_led", 128, 
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	330c      	adds	r3, #12
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2280      	movs	r2, #128	@ 0x80
 80071b6:	4927      	ldr	r1, [pc, #156]	@ (8007254 <ao_led_start_task+0xc0>)
 80071b8:	4827      	ldr	r0, [pc, #156]	@ (8007258 <ao_led_start_task+0xc4>)
 80071ba:	f7fd faf9 	bl	80047b0 <xTaskCreate>
 80071be:	60f8      	str	r0, [r7, #12]
                                (void*)hao, tskIDLE_PRIORITY, &hao->task_handle);
  if(pdPASS == status) {
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d141      	bne.n	800724a <ao_led_start_task+0xb6>
    hao->is_active = true;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	721a      	strb	r2, [r3, #8]
    LOGGER_INFO("LED %s: Tarea creada", ledColorToStr(hao->color));
 80071cc:	f7fe fb64 	bl	8005898 <vPortEnterCritical>
 80071d0:	4b22      	ldr	r3, [pc, #136]	@ (800725c <ao_led_start_task+0xc8>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a22      	ldr	r2, [pc, #136]	@ (8007260 <ao_led_start_task+0xcc>)
 80071d6:	213f      	movs	r1, #63	@ 0x3f
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 f9c3 	bl	8008564 <sniprintf>
 80071de:	4603      	mov	r3, r0
 80071e0:	4a20      	ldr	r2, [pc, #128]	@ (8007264 <ao_led_start_task+0xd0>)
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	4b1d      	ldr	r3, [pc, #116]	@ (800725c <ao_led_start_task+0xc8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff f843 	bl	8006274 <logger_log_print_>
 80071ee:	f7fe fb85 	bl	80058fc <vPortExitCritical>
 80071f2:	f7fe fb51 	bl	8005898 <vPortEnterCritical>
 80071f6:	4b19      	ldr	r3, [pc, #100]	@ (800725c <ao_led_start_task+0xc8>)
 80071f8:	681c      	ldr	r4, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff fae0 	bl	80067c4 <ledColorToStr>
 8007204:	4603      	mov	r3, r0
 8007206:	4a18      	ldr	r2, [pc, #96]	@ (8007268 <ao_led_start_task+0xd4>)
 8007208:	213f      	movs	r1, #63	@ 0x3f
 800720a:	4620      	mov	r0, r4
 800720c:	f001 f9aa 	bl	8008564 <sniprintf>
 8007210:	4603      	mov	r3, r0
 8007212:	4a14      	ldr	r2, [pc, #80]	@ (8007264 <ao_led_start_task+0xd0>)
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	4b11      	ldr	r3, [pc, #68]	@ (800725c <ao_led_start_task+0xc8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff f82a 	bl	8006274 <logger_log_print_>
 8007220:	f7fe fb6c 	bl	80058fc <vPortExitCritical>
 8007224:	f7fe fb38 	bl	8005898 <vPortEnterCritical>
 8007228:	4b0c      	ldr	r3, [pc, #48]	@ (800725c <ao_led_start_task+0xc8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a0f      	ldr	r2, [pc, #60]	@ (800726c <ao_led_start_task+0xd8>)
 800722e:	213f      	movs	r1, #63	@ 0x3f
 8007230:	4618      	mov	r0, r3
 8007232:	f001 f997 	bl	8008564 <sniprintf>
 8007236:	4603      	mov	r3, r0
 8007238:	4a0a      	ldr	r2, [pc, #40]	@ (8007264 <ao_led_start_task+0xd0>)
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	4b07      	ldr	r3, [pc, #28]	@ (800725c <ao_led_start_task+0xc8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff f817 	bl	8006274 <logger_log_print_>
 8007246:	f7fe fb59 	bl	80058fc <vPortExitCritical>
  }
  return status;
 800724a:	68fb      	ldr	r3, [r7, #12]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	bd90      	pop	{r4, r7, pc}
 8007254:	080098e8 	.word	0x080098e8
 8007258:	0800680d 	.word	0x0800680d
 800725c:	08009b70 	.word	0x08009b70
 8007260:	080096fc 	.word	0x080096fc
 8007264:	200041ec 	.word	0x200041ec
 8007268:	080098f4 	.word	0x080098f4
 800726c:	080096f8 	.word	0x080096f8

08007270 <create_led_message>:
static ao_ui_handle_t hao_;

/********************** internal functions definition ************************/

static ao_led_message_t* create_led_message(int id, ao_led_action_t action, int value)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	460b      	mov	r3, r1
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	72fb      	strb	r3, [r7, #11]
    // Obtener un bloque de memoria de la pool
    ao_led_message_t* msg = (ao_led_message_t*)memory_pool_block_get(&hao_.msg_pool);
 800727e:	4879      	ldr	r0, [pc, #484]	@ (8007464 <create_led_message+0x1f4>)
 8007280:	f7ff f836 	bl	80062f0 <memory_pool_block_get>
 8007284:	61f8      	str	r0, [r7, #28]
    if (msg == NULL) {
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d13a      	bne.n	8007302 <create_led_message+0x92>
        LOGGER_ERROR("UI: No hay memoria disponible para mensaje LED");
 800728c:	f7fe fb04 	bl	8005898 <vPortEnterCritical>
 8007290:	4b75      	ldr	r3, [pc, #468]	@ (8007468 <create_led_message+0x1f8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a75      	ldr	r2, [pc, #468]	@ (800746c <create_led_message+0x1fc>)
 8007296:	213f      	movs	r1, #63	@ 0x3f
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f963 	bl	8008564 <sniprintf>
 800729e:	4603      	mov	r3, r0
 80072a0:	4a73      	ldr	r2, [pc, #460]	@ (8007470 <create_led_message+0x200>)
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	4b70      	ldr	r3, [pc, #448]	@ (8007468 <create_led_message+0x1f8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe ffe3 	bl	8006274 <logger_log_print_>
 80072ae:	f7fe fb25 	bl	80058fc <vPortExitCritical>
 80072b2:	f7fe faf1 	bl	8005898 <vPortEnterCritical>
 80072b6:	4b6c      	ldr	r3, [pc, #432]	@ (8007468 <create_led_message+0x1f8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007474 <create_led_message+0x204>)
 80072bc:	213f      	movs	r1, #63	@ 0x3f
 80072be:	4618      	mov	r0, r3
 80072c0:	f001 f950 	bl	8008564 <sniprintf>
 80072c4:	4603      	mov	r3, r0
 80072c6:	4a6a      	ldr	r2, [pc, #424]	@ (8007470 <create_led_message+0x200>)
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	4b67      	ldr	r3, [pc, #412]	@ (8007468 <create_led_message+0x1f8>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe ffd0 	bl	8006274 <logger_log_print_>
 80072d4:	f7fe fb12 	bl	80058fc <vPortExitCritical>
 80072d8:	f7fe fade 	bl	8005898 <vPortEnterCritical>
 80072dc:	4b62      	ldr	r3, [pc, #392]	@ (8007468 <create_led_message+0x1f8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a65      	ldr	r2, [pc, #404]	@ (8007478 <create_led_message+0x208>)
 80072e2:	213f      	movs	r1, #63	@ 0x3f
 80072e4:	4618      	mov	r0, r3
 80072e6:	f001 f93d 	bl	8008564 <sniprintf>
 80072ea:	4603      	mov	r3, r0
 80072ec:	4a60      	ldr	r2, [pc, #384]	@ (8007470 <create_led_message+0x200>)
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	4b5d      	ldr	r3, [pc, #372]	@ (8007468 <create_led_message+0x1f8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe ffbd 	bl	8006274 <logger_log_print_>
 80072fa:	f7fe faff 	bl	80058fc <vPortExitCritical>
        return NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	e0ac      	b.n	800745c <create_led_message+0x1ec>
    }

    // Inicializar el mensaje
    msg->data.id = id;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]
    msg->data.action = action;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	7afa      	ldrb	r2, [r7, #11]
 800730c:	711a      	strb	r2, [r3, #4]
    msg->data.value = value;
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	609a      	str	r2, [r3, #8]
    msg->callback = led_callback;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4a59      	ldr	r2, [pc, #356]	@ (800747c <create_led_message+0x20c>)
 8007318:	60da      	str	r2, [r3, #12]
    msg->status = AO_LED_STATUS_OK;
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	2200      	movs	r2, #0
 800731e:	741a      	strb	r2, [r3, #16]

    // Crear entry dinámico y agregarlo a la lista
    active_message_entry_t* entry = (active_message_entry_t*)pvPortMalloc(sizeof(active_message_entry_t));
 8007320:	2008      	movs	r0, #8
 8007322:	f7fe fb99 	bl	8005a58 <pvPortMalloc>
 8007326:	61b8      	str	r0, [r7, #24]
    if (entry == NULL) {
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d13e      	bne.n	80073ac <create_led_message+0x13c>
        LOGGER_ERROR("UI: No hay memoria para entry de mensaje activo");
 800732e:	f7fe fab3 	bl	8005898 <vPortEnterCritical>
 8007332:	4b4d      	ldr	r3, [pc, #308]	@ (8007468 <create_led_message+0x1f8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a4d      	ldr	r2, [pc, #308]	@ (800746c <create_led_message+0x1fc>)
 8007338:	213f      	movs	r1, #63	@ 0x3f
 800733a:	4618      	mov	r0, r3
 800733c:	f001 f912 	bl	8008564 <sniprintf>
 8007340:	4603      	mov	r3, r0
 8007342:	4a4b      	ldr	r2, [pc, #300]	@ (8007470 <create_led_message+0x200>)
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	4b48      	ldr	r3, [pc, #288]	@ (8007468 <create_led_message+0x1f8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe ff92 	bl	8006274 <logger_log_print_>
 8007350:	f7fe fad4 	bl	80058fc <vPortExitCritical>
 8007354:	f7fe faa0 	bl	8005898 <vPortEnterCritical>
 8007358:	4b43      	ldr	r3, [pc, #268]	@ (8007468 <create_led_message+0x1f8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a48      	ldr	r2, [pc, #288]	@ (8007480 <create_led_message+0x210>)
 800735e:	213f      	movs	r1, #63	@ 0x3f
 8007360:	4618      	mov	r0, r3
 8007362:	f001 f8ff 	bl	8008564 <sniprintf>
 8007366:	4603      	mov	r3, r0
 8007368:	4a41      	ldr	r2, [pc, #260]	@ (8007470 <create_led_message+0x200>)
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	4b3e      	ldr	r3, [pc, #248]	@ (8007468 <create_led_message+0x1f8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe ff7f 	bl	8006274 <logger_log_print_>
 8007376:	f7fe fac1 	bl	80058fc <vPortExitCritical>
 800737a:	f7fe fa8d 	bl	8005898 <vPortEnterCritical>
 800737e:	4b3a      	ldr	r3, [pc, #232]	@ (8007468 <create_led_message+0x1f8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a3d      	ldr	r2, [pc, #244]	@ (8007478 <create_led_message+0x208>)
 8007384:	213f      	movs	r1, #63	@ 0x3f
 8007386:	4618      	mov	r0, r3
 8007388:	f001 f8ec 	bl	8008564 <sniprintf>
 800738c:	4603      	mov	r3, r0
 800738e:	4a38      	ldr	r2, [pc, #224]	@ (8007470 <create_led_message+0x200>)
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	4b35      	ldr	r3, [pc, #212]	@ (8007468 <create_led_message+0x1f8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe ff6c 	bl	8006274 <logger_log_print_>
 800739c:	f7fe faae 	bl	80058fc <vPortExitCritical>
        memory_pool_block_put(&hao_.msg_pool, msg);
 80073a0:	69f9      	ldr	r1, [r7, #28]
 80073a2:	4830      	ldr	r0, [pc, #192]	@ (8007464 <create_led_message+0x1f4>)
 80073a4:	f7fe ffb7 	bl	8006316 <memory_pool_block_put>
        return NULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e057      	b.n	800745c <create_led_message+0x1ec>
    }
    entry->id = id;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	601a      	str	r2, [r3, #0]
    entry->msg = msg;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	605a      	str	r2, [r3, #4]
    linked_list_node_t* node = (linked_list_node_t*)pvPortMalloc(sizeof(linked_list_node_t));
 80073b8:	2008      	movs	r0, #8
 80073ba:	f7fe fb4d 	bl	8005a58 <pvPortMalloc>
 80073be:	6178      	str	r0, [r7, #20]
    if (node == NULL) {
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d141      	bne.n	800744a <create_led_message+0x1da>
        LOGGER_ERROR("UI: No hay memoria para nodo de lista de mensajes activos");
 80073c6:	f7fe fa67 	bl	8005898 <vPortEnterCritical>
 80073ca:	4b27      	ldr	r3, [pc, #156]	@ (8007468 <create_led_message+0x1f8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a27      	ldr	r2, [pc, #156]	@ (800746c <create_led_message+0x1fc>)
 80073d0:	213f      	movs	r1, #63	@ 0x3f
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 f8c6 	bl	8008564 <sniprintf>
 80073d8:	4603      	mov	r3, r0
 80073da:	4a25      	ldr	r2, [pc, #148]	@ (8007470 <create_led_message+0x200>)
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	4b22      	ldr	r3, [pc, #136]	@ (8007468 <create_led_message+0x1f8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe ff46 	bl	8006274 <logger_log_print_>
 80073e8:	f7fe fa88 	bl	80058fc <vPortExitCritical>
 80073ec:	f7fe fa54 	bl	8005898 <vPortEnterCritical>
 80073f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007468 <create_led_message+0x1f8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a23      	ldr	r2, [pc, #140]	@ (8007484 <create_led_message+0x214>)
 80073f6:	213f      	movs	r1, #63	@ 0x3f
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 f8b3 	bl	8008564 <sniprintf>
 80073fe:	4603      	mov	r3, r0
 8007400:	4a1b      	ldr	r2, [pc, #108]	@ (8007470 <create_led_message+0x200>)
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	4b18      	ldr	r3, [pc, #96]	@ (8007468 <create_led_message+0x1f8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe ff33 	bl	8006274 <logger_log_print_>
 800740e:	f7fe fa75 	bl	80058fc <vPortExitCritical>
 8007412:	f7fe fa41 	bl	8005898 <vPortEnterCritical>
 8007416:	4b14      	ldr	r3, [pc, #80]	@ (8007468 <create_led_message+0x1f8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a17      	ldr	r2, [pc, #92]	@ (8007478 <create_led_message+0x208>)
 800741c:	213f      	movs	r1, #63	@ 0x3f
 800741e:	4618      	mov	r0, r3
 8007420:	f001 f8a0 	bl	8008564 <sniprintf>
 8007424:	4603      	mov	r3, r0
 8007426:	4a12      	ldr	r2, [pc, #72]	@ (8007470 <create_led_message+0x200>)
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	4b0f      	ldr	r3, [pc, #60]	@ (8007468 <create_led_message+0x1f8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe ff20 	bl	8006274 <logger_log_print_>
 8007434:	f7fe fa62 	bl	80058fc <vPortExitCritical>
        vPortFree(entry);
 8007438:	69b8      	ldr	r0, [r7, #24]
 800743a:	f7fe fbdb 	bl	8005bf4 <vPortFree>
        memory_pool_block_put(&hao_.msg_pool, msg);
 800743e:	69f9      	ldr	r1, [r7, #28]
 8007440:	4808      	ldr	r0, [pc, #32]	@ (8007464 <create_led_message+0x1f4>)
 8007442:	f7fe ff68 	bl	8006316 <memory_pool_block_put>
        return NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	e008      	b.n	800745c <create_led_message+0x1ec>
    }
    linked_list_node_init(node, entry);
 800744a:	69b9      	ldr	r1, [r7, #24]
 800744c:	6978      	ldr	r0, [r7, #20]
 800744e:	f7fe fe66 	bl	800611e <linked_list_node_init>
    linked_list_node_add(&active_messages_list, node);
 8007452:	6979      	ldr	r1, [r7, #20]
 8007454:	480c      	ldr	r0, [pc, #48]	@ (8007488 <create_led_message+0x218>)
 8007456:	f7fe feaa 	bl	80061ae <linked_list_node_add>

    return msg;
 800745a:	69fb      	ldr	r3, [r7, #28]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20004234 	.word	0x20004234
 8007468:	08009b70 	.word	0x08009b70
 800746c:	0800990c 	.word	0x0800990c
 8007470:	200041ec 	.word	0x200041ec
 8007474:	08009918 	.word	0x08009918
 8007478:	08009948 	.word	0x08009948
 800747c:	080076b9 	.word	0x080076b9
 8007480:	0800994c 	.word	0x0800994c
 8007484:	0800997c 	.word	0x0800997c
 8007488:	200041f4 	.word	0x200041f4

0800748c <free_led_message>:

static void free_led_message(ao_led_message_t* msg)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
    if (msg != NULL) {
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <free_led_message+0x16>
        memory_pool_block_put(&hao_.msg_pool, msg);
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4803      	ldr	r0, [pc, #12]	@ (80074ac <free_led_message+0x20>)
 800749e:	f7fe ff3a 	bl	8006316 <memory_pool_block_put>
    }
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20004234 	.word	0x20004234

080074b0 <send_led_on>:

static void send_led_on(ao_led_handle_t* hled)
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
    // Crear tarea LED si no está activa
    if (!hled->is_active) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	7a1b      	ldrb	r3, [r3, #8]
 80074bc:	f083 0301 	eor.w	r3, r3, #1
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d045      	beq.n	8007552 <send_led_on+0xa2>
        if (pdPASS != ao_led_start_task(hled)) {
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff fe64 	bl	8007194 <ao_led_start_task>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d03f      	beq.n	8007552 <send_led_on+0xa2>
            LOGGER_ERROR("UI: Error al crear tarea LED %s", ledColorToStr(hled->color));
 80074d2:	f7fe f9e1 	bl	8005898 <vPortEnterCritical>
 80074d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007604 <send_led_on+0x154>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a4b      	ldr	r2, [pc, #300]	@ (8007608 <send_led_on+0x158>)
 80074dc:	213f      	movs	r1, #63	@ 0x3f
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 f840 	bl	8008564 <sniprintf>
 80074e4:	4603      	mov	r3, r0
 80074e6:	4a49      	ldr	r2, [pc, #292]	@ (800760c <send_led_on+0x15c>)
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	4b46      	ldr	r3, [pc, #280]	@ (8007604 <send_led_on+0x154>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fec0 	bl	8006274 <logger_log_print_>
 80074f4:	f7fe fa02 	bl	80058fc <vPortExitCritical>
 80074f8:	f7fe f9ce 	bl	8005898 <vPortEnterCritical>
 80074fc:	4b41      	ldr	r3, [pc, #260]	@ (8007604 <send_led_on+0x154>)
 80074fe:	681c      	ldr	r4, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff f95d 	bl	80067c4 <ledColorToStr>
 800750a:	4603      	mov	r3, r0
 800750c:	4a40      	ldr	r2, [pc, #256]	@ (8007610 <send_led_on+0x160>)
 800750e:	213f      	movs	r1, #63	@ 0x3f
 8007510:	4620      	mov	r0, r4
 8007512:	f001 f827 	bl	8008564 <sniprintf>
 8007516:	4603      	mov	r3, r0
 8007518:	4a3c      	ldr	r2, [pc, #240]	@ (800760c <send_led_on+0x15c>)
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	4b39      	ldr	r3, [pc, #228]	@ (8007604 <send_led_on+0x154>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe fea7 	bl	8006274 <logger_log_print_>
 8007526:	f7fe f9e9 	bl	80058fc <vPortExitCritical>
 800752a:	f7fe f9b5 	bl	8005898 <vPortEnterCritical>
 800752e:	4b35      	ldr	r3, [pc, #212]	@ (8007604 <send_led_on+0x154>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a38      	ldr	r2, [pc, #224]	@ (8007614 <send_led_on+0x164>)
 8007534:	213f      	movs	r1, #63	@ 0x3f
 8007536:	4618      	mov	r0, r3
 8007538:	f001 f814 	bl	8008564 <sniprintf>
 800753c:	4603      	mov	r3, r0
 800753e:	4a33      	ldr	r2, [pc, #204]	@ (800760c <send_led_on+0x15c>)
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	4b30      	ldr	r3, [pc, #192]	@ (8007604 <send_led_on+0x154>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fe94 	bl	8006274 <logger_log_print_>
 800754c:	f7fe f9d6 	bl	80058fc <vPortExitCritical>
            return;
 8007550:	e055      	b.n	80075fe <send_led_on+0x14e>
        }
    }

    static int msg_id = 0;
    ao_led_message_t* msg = create_led_message(++msg_id, AO_LED_MESSAGE_ON, 0);
 8007552:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <send_led_on+0x168>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3301      	adds	r3, #1
 8007558:	4a2f      	ldr	r2, [pc, #188]	@ (8007618 <send_led_on+0x168>)
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	4b2e      	ldr	r3, [pc, #184]	@ (8007618 <send_led_on+0x168>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fe83 	bl	8007270 <create_led_message>
 800756a:	60f8      	str	r0, [r7, #12]
    if (msg != NULL) {
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d045      	beq.n	80075fe <send_led_on+0x14e>
        if (!ao_led_send(hled, msg)) {
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fcb3 	bl	8006ee0 <ao_led_send>
 800757a:	4603      	mov	r3, r0
 800757c:	f083 0301 	eor.w	r3, r3, #1
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d03b      	beq.n	80075fe <send_led_on+0x14e>
            LOGGER_ERROR("UI: Error al enviar mensaje a LED");
 8007586:	f7fe f987 	bl	8005898 <vPortEnterCritical>
 800758a:	4b1e      	ldr	r3, [pc, #120]	@ (8007604 <send_led_on+0x154>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1e      	ldr	r2, [pc, #120]	@ (8007608 <send_led_on+0x158>)
 8007590:	213f      	movs	r1, #63	@ 0x3f
 8007592:	4618      	mov	r0, r3
 8007594:	f000 ffe6 	bl	8008564 <sniprintf>
 8007598:	4603      	mov	r3, r0
 800759a:	4a1c      	ldr	r2, [pc, #112]	@ (800760c <send_led_on+0x15c>)
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	4b19      	ldr	r3, [pc, #100]	@ (8007604 <send_led_on+0x154>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fe66 	bl	8006274 <logger_log_print_>
 80075a8:	f7fe f9a8 	bl	80058fc <vPortExitCritical>
 80075ac:	f7fe f974 	bl	8005898 <vPortEnterCritical>
 80075b0:	4b14      	ldr	r3, [pc, #80]	@ (8007604 <send_led_on+0x154>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a19      	ldr	r2, [pc, #100]	@ (800761c <send_led_on+0x16c>)
 80075b6:	213f      	movs	r1, #63	@ 0x3f
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 ffd3 	bl	8008564 <sniprintf>
 80075be:	4603      	mov	r3, r0
 80075c0:	4a12      	ldr	r2, [pc, #72]	@ (800760c <send_led_on+0x15c>)
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007604 <send_led_on+0x154>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe fe53 	bl	8006274 <logger_log_print_>
 80075ce:	f7fe f995 	bl	80058fc <vPortExitCritical>
 80075d2:	f7fe f961 	bl	8005898 <vPortEnterCritical>
 80075d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007604 <send_led_on+0x154>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a0e      	ldr	r2, [pc, #56]	@ (8007614 <send_led_on+0x164>)
 80075dc:	213f      	movs	r1, #63	@ 0x3f
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 ffc0 	bl	8008564 <sniprintf>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4a09      	ldr	r2, [pc, #36]	@ (800760c <send_led_on+0x15c>)
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	4b06      	ldr	r3, [pc, #24]	@ (8007604 <send_led_on+0x154>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fe40 	bl	8006274 <logger_log_print_>
 80075f4:	f7fe f982 	bl	80058fc <vPortExitCritical>
            free_led_message(msg);  // Solo liberamos si falló el envío
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f7ff ff47 	bl	800748c <free_led_message>
        }
        // Nota: Si el envío es exitoso, la memoria se liberará en el callback
        // cuando la tarea LED termine de procesar el mensaje
    }
}
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	bd90      	pop	{r4, r7, pc}
 8007604:	08009b70 	.word	0x08009b70
 8007608:	0800990c 	.word	0x0800990c
 800760c:	200041ec 	.word	0x200041ec
 8007610:	080099b8 	.word	0x080099b8
 8007614:	08009948 	.word	0x08009948
 8007618:	20004308 	.word	0x20004308
 800761c:	080099d8 	.word	0x080099d8

08007620 <turn_off_all_leds>:

static void turn_off_all_leds(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
    // Apagar todos los LEDs antes de encender uno nuevo
    static int msg_id = 100;  // Usar IDs diferentes para evitar conflictos
    
    ao_led_message_t* msg_red = create_led_message(++msg_id, AO_LED_MESSAGE_OFF, 0);
 8007626:	4b20      	ldr	r3, [pc, #128]	@ (80076a8 <turn_off_all_leds+0x88>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3301      	adds	r3, #1
 800762c:	4a1e      	ldr	r2, [pc, #120]	@ (80076a8 <turn_off_all_leds+0x88>)
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	4b1d      	ldr	r3, [pc, #116]	@ (80076a8 <turn_off_all_leds+0x88>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2200      	movs	r2, #0
 8007636:	2101      	movs	r1, #1
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fe19 	bl	8007270 <create_led_message>
 800763e:	60f8      	str	r0, [r7, #12]
    ao_led_message_t* msg_green = create_led_message(++msg_id, AO_LED_MESSAGE_OFF, 0);
 8007640:	4b19      	ldr	r3, [pc, #100]	@ (80076a8 <turn_off_all_leds+0x88>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	4a18      	ldr	r2, [pc, #96]	@ (80076a8 <turn_off_all_leds+0x88>)
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <turn_off_all_leds+0x88>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2200      	movs	r2, #0
 8007650:	2101      	movs	r1, #1
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fe0c 	bl	8007270 <create_led_message>
 8007658:	60b8      	str	r0, [r7, #8]
    ao_led_message_t* msg_blue = create_led_message(++msg_id, AO_LED_MESSAGE_OFF, 0);
 800765a:	4b13      	ldr	r3, [pc, #76]	@ (80076a8 <turn_off_all_leds+0x88>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3301      	adds	r3, #1
 8007660:	4a11      	ldr	r2, [pc, #68]	@ (80076a8 <turn_off_all_leds+0x88>)
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	4b10      	ldr	r3, [pc, #64]	@ (80076a8 <turn_off_all_leds+0x88>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2200      	movs	r2, #0
 800766a:	2101      	movs	r1, #1
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff fdff 	bl	8007270 <create_led_message>
 8007672:	6078      	str	r0, [r7, #4]

    if (msg_red) {
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <turn_off_all_leds+0x62>
        ao_led_send(&led_red, msg_red);
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	480b      	ldr	r0, [pc, #44]	@ (80076ac <turn_off_all_leds+0x8c>)
 800767e:	f7ff fc2f 	bl	8006ee0 <ao_led_send>
    }
    if (msg_green) {
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <turn_off_all_leds+0x70>
        ao_led_send(&led_green, msg_green);
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	4809      	ldr	r0, [pc, #36]	@ (80076b0 <turn_off_all_leds+0x90>)
 800768c:	f7ff fc28 	bl	8006ee0 <ao_led_send>
    }
    if (msg_blue) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <turn_off_all_leds+0x7e>
        ao_led_send(&led_blue, msg_blue);
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	4806      	ldr	r0, [pc, #24]	@ (80076b4 <turn_off_all_leds+0x94>)
 800769a:	f7ff fc21 	bl	8006ee0 <ao_led_send>
    }
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000024 	.word	0x20000024
 80076ac:	20004200 	.word	0x20004200
 80076b0:	20004210 	.word	0x20004210
 80076b4:	20004220 	.word	0x20004220

080076b8 <led_callback>:

static void led_callback(int id, ao_led_status_t status)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af02      	add	r7, sp, #8
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
    if (status != AO_LED_STATUS_OK) {
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d03b      	beq.n	8007742 <led_callback+0x8a>
        LOGGER_ERROR("UI: LED mensaje %d completado con error: %d", id, status);
 80076ca:	f7fe f8e5 	bl	8005898 <vPortEnterCritical>
 80076ce:	4b64      	ldr	r3, [pc, #400]	@ (8007860 <led_callback+0x1a8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a64      	ldr	r2, [pc, #400]	@ (8007864 <led_callback+0x1ac>)
 80076d4:	213f      	movs	r1, #63	@ 0x3f
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 ff44 	bl	8008564 <sniprintf>
 80076dc:	4603      	mov	r3, r0
 80076de:	4a62      	ldr	r2, [pc, #392]	@ (8007868 <led_callback+0x1b0>)
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	4b5f      	ldr	r3, [pc, #380]	@ (8007860 <led_callback+0x1a8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fdc4 	bl	8006274 <logger_log_print_>
 80076ec:	f7fe f906 	bl	80058fc <vPortExitCritical>
 80076f0:	f7fe f8d2 	bl	8005898 <vPortEnterCritical>
 80076f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007860 <led_callback+0x1a8>)
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a5b      	ldr	r2, [pc, #364]	@ (800786c <led_callback+0x1b4>)
 8007700:	213f      	movs	r1, #63	@ 0x3f
 8007702:	f000 ff2f 	bl	8008564 <sniprintf>
 8007706:	4603      	mov	r3, r0
 8007708:	4a57      	ldr	r2, [pc, #348]	@ (8007868 <led_callback+0x1b0>)
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	4b54      	ldr	r3, [pc, #336]	@ (8007860 <led_callback+0x1a8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fdaf 	bl	8006274 <logger_log_print_>
 8007716:	f7fe f8f1 	bl	80058fc <vPortExitCritical>
 800771a:	f7fe f8bd 	bl	8005898 <vPortEnterCritical>
 800771e:	4b50      	ldr	r3, [pc, #320]	@ (8007860 <led_callback+0x1a8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a53      	ldr	r2, [pc, #332]	@ (8007870 <led_callback+0x1b8>)
 8007724:	213f      	movs	r1, #63	@ 0x3f
 8007726:	4618      	mov	r0, r3
 8007728:	f000 ff1c 	bl	8008564 <sniprintf>
 800772c:	4603      	mov	r3, r0
 800772e:	4a4e      	ldr	r2, [pc, #312]	@ (8007868 <led_callback+0x1b0>)
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	4b4b      	ldr	r3, [pc, #300]	@ (8007860 <led_callback+0x1a8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fd9c 	bl	8006274 <logger_log_print_>
 800773c:	f7fe f8de 	bl	80058fc <vPortExitCritical>
 8007740:	e038      	b.n	80077b4 <led_callback+0xfc>
    } else {
        LOGGER_DEBUG("UI: LED mensaje %d completado OK", id);
 8007742:	f7fe f8a9 	bl	8005898 <vPortEnterCritical>
 8007746:	4b46      	ldr	r3, [pc, #280]	@ (8007860 <led_callback+0x1a8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a4a      	ldr	r2, [pc, #296]	@ (8007874 <led_callback+0x1bc>)
 800774c:	213f      	movs	r1, #63	@ 0x3f
 800774e:	4618      	mov	r0, r3
 8007750:	f000 ff08 	bl	8008564 <sniprintf>
 8007754:	4603      	mov	r3, r0
 8007756:	4a44      	ldr	r2, [pc, #272]	@ (8007868 <led_callback+0x1b0>)
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	4b41      	ldr	r3, [pc, #260]	@ (8007860 <led_callback+0x1a8>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe fd88 	bl	8006274 <logger_log_print_>
 8007764:	f7fe f8ca 	bl	80058fc <vPortExitCritical>
 8007768:	f7fe f896 	bl	8005898 <vPortEnterCritical>
 800776c:	4b3c      	ldr	r3, [pc, #240]	@ (8007860 <led_callback+0x1a8>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a41      	ldr	r2, [pc, #260]	@ (8007878 <led_callback+0x1c0>)
 8007774:	213f      	movs	r1, #63	@ 0x3f
 8007776:	f000 fef5 	bl	8008564 <sniprintf>
 800777a:	4603      	mov	r3, r0
 800777c:	4a3a      	ldr	r2, [pc, #232]	@ (8007868 <led_callback+0x1b0>)
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	4b37      	ldr	r3, [pc, #220]	@ (8007860 <led_callback+0x1a8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fd75 	bl	8006274 <logger_log_print_>
 800778a:	f7fe f8b7 	bl	80058fc <vPortExitCritical>
 800778e:	f7fe f883 	bl	8005898 <vPortEnterCritical>
 8007792:	4b33      	ldr	r3, [pc, #204]	@ (8007860 <led_callback+0x1a8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a36      	ldr	r2, [pc, #216]	@ (8007870 <led_callback+0x1b8>)
 8007798:	213f      	movs	r1, #63	@ 0x3f
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fee2 	bl	8008564 <sniprintf>
 80077a0:	4603      	mov	r3, r0
 80077a2:	4a31      	ldr	r2, [pc, #196]	@ (8007868 <led_callback+0x1b0>)
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	4b2e      	ldr	r3, [pc, #184]	@ (8007860 <led_callback+0x1a8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fd62 	bl	8006274 <logger_log_print_>
 80077b0:	f7fe f8a4 	bl	80058fc <vPortExitCritical>
    }
    // Buscar y eliminar el mensaje de la lista por ID
    linked_list_node_t* node = linked_list_node_remove_by_id(&active_messages_list, id);
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	4831      	ldr	r0, [pc, #196]	@ (800787c <led_callback+0x1c4>)
 80077b8:	f7fe fd1b 	bl	80061f2 <linked_list_node_remove_by_id>
 80077bc:	60f8      	str	r0, [r7, #12]
    if (node != NULL) {
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d049      	beq.n	8007858 <led_callback+0x1a0>
        active_message_entry_t* entry = (active_message_entry_t*)node->pdata;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60bb      	str	r3, [r7, #8]
        if (entry) {
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <led_callback+0x128>
            free_led_message(entry->msg); // Devuelve el mensaje a la memory pool
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fe59 	bl	800748c <free_led_message>
            vPortFree(entry); // Libera el entry
 80077da:	68b8      	ldr	r0, [r7, #8]
 80077dc:	f7fe fa0a 	bl	8005bf4 <vPortFree>
        }
        vPortFree(node); // Libera el nodo
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7fe fa07 	bl	8005bf4 <vPortFree>
        LOGGER_DEBUG("UI: Memoria del mensaje %d liberada", id);
 80077e6:	f7fe f857 	bl	8005898 <vPortEnterCritical>
 80077ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007860 <led_callback+0x1a8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a21      	ldr	r2, [pc, #132]	@ (8007874 <led_callback+0x1bc>)
 80077f0:	213f      	movs	r1, #63	@ 0x3f
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 feb6 	bl	8008564 <sniprintf>
 80077f8:	4603      	mov	r3, r0
 80077fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007868 <led_callback+0x1b0>)
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	4b18      	ldr	r3, [pc, #96]	@ (8007860 <led_callback+0x1a8>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fd36 	bl	8006274 <logger_log_print_>
 8007808:	f7fe f878 	bl	80058fc <vPortExitCritical>
 800780c:	f7fe f844 	bl	8005898 <vPortEnterCritical>
 8007810:	4b13      	ldr	r3, [pc, #76]	@ (8007860 <led_callback+0x1a8>)
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a1a      	ldr	r2, [pc, #104]	@ (8007880 <led_callback+0x1c8>)
 8007818:	213f      	movs	r1, #63	@ 0x3f
 800781a:	f000 fea3 	bl	8008564 <sniprintf>
 800781e:	4603      	mov	r3, r0
 8007820:	4a11      	ldr	r2, [pc, #68]	@ (8007868 <led_callback+0x1b0>)
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	4b0e      	ldr	r3, [pc, #56]	@ (8007860 <led_callback+0x1a8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe fd23 	bl	8006274 <logger_log_print_>
 800782e:	f7fe f865 	bl	80058fc <vPortExitCritical>
 8007832:	f7fe f831 	bl	8005898 <vPortEnterCritical>
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <led_callback+0x1a8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a0d      	ldr	r2, [pc, #52]	@ (8007870 <led_callback+0x1b8>)
 800783c:	213f      	movs	r1, #63	@ 0x3f
 800783e:	4618      	mov	r0, r3
 8007840:	f000 fe90 	bl	8008564 <sniprintf>
 8007844:	4603      	mov	r3, r0
 8007846:	4a08      	ldr	r2, [pc, #32]	@ (8007868 <led_callback+0x1b0>)
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <led_callback+0x1a8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe fd10 	bl	8006274 <logger_log_print_>
 8007854:	f7fe f852 	bl	80058fc <vPortExitCritical>
    }
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	08009b70 	.word	0x08009b70
 8007864:	0800990c 	.word	0x0800990c
 8007868:	200041ec 	.word	0x200041ec
 800786c:	080099fc 	.word	0x080099fc
 8007870:	08009948 	.word	0x08009948
 8007874:	08009a28 	.word	0x08009a28
 8007878:	08009a34 	.word	0x08009a34
 800787c:	200041f4 	.word	0x200041f4
 8007880:	08009a58 	.word	0x08009a58

08007884 <task_>:

static void task_(void *argument)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  while (true)
  {

    msg_event_t event_msg;

    if (pdPASS == xQueueReceive(hao_.hqueue, &event_msg, portMAX_DELAY))
 800788c:	4b6b      	ldr	r3, [pc, #428]	@ (8007a3c <task_+0x1b8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f107 010f 	add.w	r1, r7, #15
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	4618      	mov	r0, r3
 800789a:	f7fc fd37 	bl	800430c <xQueueReceive>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d1f3      	bne.n	800788c <task_+0x8>
    {
      switch (event_msg)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	f000 8086 	beq.w	80079b8 <task_+0x134>
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	f300 80c2 	bgt.w	8007a36 <task_+0x1b2>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <task_+0x38>
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d03f      	beq.n	800793a <task_+0xb6>
          LOGGER_INFO("Estado Azul - LED Azul encendido");
          turn_off_all_leds();  // Apagar todos antes de encender el azul
          send_led_on(&led_blue);
          break;
        default:
          break;
 80078ba:	e0bc      	b.n	8007a36 <task_+0x1b2>
          LOGGER_INFO("Estado Rojo - LED Rojo encendido");
 80078bc:	f7fd ffec 	bl	8005898 <vPortEnterCritical>
 80078c0:	4b5f      	ldr	r3, [pc, #380]	@ (8007a40 <task_+0x1bc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a5f      	ldr	r2, [pc, #380]	@ (8007a44 <task_+0x1c0>)
 80078c6:	213f      	movs	r1, #63	@ 0x3f
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fe4b 	bl	8008564 <sniprintf>
 80078ce:	4603      	mov	r3, r0
 80078d0:	4a5d      	ldr	r2, [pc, #372]	@ (8007a48 <task_+0x1c4>)
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007a40 <task_+0x1bc>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fccb 	bl	8006274 <logger_log_print_>
 80078de:	f7fe f80d 	bl	80058fc <vPortExitCritical>
 80078e2:	f7fd ffd9 	bl	8005898 <vPortEnterCritical>
 80078e6:	4b56      	ldr	r3, [pc, #344]	@ (8007a40 <task_+0x1bc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a58      	ldr	r2, [pc, #352]	@ (8007a4c <task_+0x1c8>)
 80078ec:	213f      	movs	r1, #63	@ 0x3f
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fe38 	bl	8008564 <sniprintf>
 80078f4:	4603      	mov	r3, r0
 80078f6:	4a54      	ldr	r2, [pc, #336]	@ (8007a48 <task_+0x1c4>)
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	4b51      	ldr	r3, [pc, #324]	@ (8007a40 <task_+0x1bc>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fcb8 	bl	8006274 <logger_log_print_>
 8007904:	f7fd fffa 	bl	80058fc <vPortExitCritical>
 8007908:	f7fd ffc6 	bl	8005898 <vPortEnterCritical>
 800790c:	4b4c      	ldr	r3, [pc, #304]	@ (8007a40 <task_+0x1bc>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a4f      	ldr	r2, [pc, #316]	@ (8007a50 <task_+0x1cc>)
 8007912:	213f      	movs	r1, #63	@ 0x3f
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fe25 	bl	8008564 <sniprintf>
 800791a:	4603      	mov	r3, r0
 800791c:	4a4a      	ldr	r2, [pc, #296]	@ (8007a48 <task_+0x1c4>)
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	4b47      	ldr	r3, [pc, #284]	@ (8007a40 <task_+0x1bc>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe fca5 	bl	8006274 <logger_log_print_>
 800792a:	f7fd ffe7 	bl	80058fc <vPortExitCritical>
          turn_off_all_leds();  // Apagar todos antes de encender el rojo
 800792e:	f7ff fe77 	bl	8007620 <turn_off_all_leds>
          send_led_on(&led_red);
 8007932:	4848      	ldr	r0, [pc, #288]	@ (8007a54 <task_+0x1d0>)
 8007934:	f7ff fdbc 	bl	80074b0 <send_led_on>
          break;
 8007938:	e07e      	b.n	8007a38 <task_+0x1b4>
          LOGGER_INFO("Estado Verde - LED Verde encendido");
 800793a:	f7fd ffad 	bl	8005898 <vPortEnterCritical>
 800793e:	4b40      	ldr	r3, [pc, #256]	@ (8007a40 <task_+0x1bc>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a40      	ldr	r2, [pc, #256]	@ (8007a44 <task_+0x1c0>)
 8007944:	213f      	movs	r1, #63	@ 0x3f
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fe0c 	bl	8008564 <sniprintf>
 800794c:	4603      	mov	r3, r0
 800794e:	4a3e      	ldr	r2, [pc, #248]	@ (8007a48 <task_+0x1c4>)
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	4b3b      	ldr	r3, [pc, #236]	@ (8007a40 <task_+0x1bc>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fc8c 	bl	8006274 <logger_log_print_>
 800795c:	f7fd ffce 	bl	80058fc <vPortExitCritical>
 8007960:	f7fd ff9a 	bl	8005898 <vPortEnterCritical>
 8007964:	4b36      	ldr	r3, [pc, #216]	@ (8007a40 <task_+0x1bc>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a3b      	ldr	r2, [pc, #236]	@ (8007a58 <task_+0x1d4>)
 800796a:	213f      	movs	r1, #63	@ 0x3f
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fdf9 	bl	8008564 <sniprintf>
 8007972:	4603      	mov	r3, r0
 8007974:	4a34      	ldr	r2, [pc, #208]	@ (8007a48 <task_+0x1c4>)
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	4b31      	ldr	r3, [pc, #196]	@ (8007a40 <task_+0x1bc>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe fc79 	bl	8006274 <logger_log_print_>
 8007982:	f7fd ffbb 	bl	80058fc <vPortExitCritical>
 8007986:	f7fd ff87 	bl	8005898 <vPortEnterCritical>
 800798a:	4b2d      	ldr	r3, [pc, #180]	@ (8007a40 <task_+0x1bc>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a30      	ldr	r2, [pc, #192]	@ (8007a50 <task_+0x1cc>)
 8007990:	213f      	movs	r1, #63	@ 0x3f
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fde6 	bl	8008564 <sniprintf>
 8007998:	4603      	mov	r3, r0
 800799a:	4a2b      	ldr	r2, [pc, #172]	@ (8007a48 <task_+0x1c4>)
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	4b28      	ldr	r3, [pc, #160]	@ (8007a40 <task_+0x1bc>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fc66 	bl	8006274 <logger_log_print_>
 80079a8:	f7fd ffa8 	bl	80058fc <vPortExitCritical>
          turn_off_all_leds();  // Apagar todos antes de encender el verde
 80079ac:	f7ff fe38 	bl	8007620 <turn_off_all_leds>
          send_led_on(&led_green);
 80079b0:	482a      	ldr	r0, [pc, #168]	@ (8007a5c <task_+0x1d8>)
 80079b2:	f7ff fd7d 	bl	80074b0 <send_led_on>
          break;
 80079b6:	e03f      	b.n	8007a38 <task_+0x1b4>
          LOGGER_INFO("Estado Azul - LED Azul encendido");
 80079b8:	f7fd ff6e 	bl	8005898 <vPortEnterCritical>
 80079bc:	4b20      	ldr	r3, [pc, #128]	@ (8007a40 <task_+0x1bc>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a20      	ldr	r2, [pc, #128]	@ (8007a44 <task_+0x1c0>)
 80079c2:	213f      	movs	r1, #63	@ 0x3f
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fdcd 	bl	8008564 <sniprintf>
 80079ca:	4603      	mov	r3, r0
 80079cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007a48 <task_+0x1c4>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a40 <task_+0x1bc>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fe fc4d 	bl	8006274 <logger_log_print_>
 80079da:	f7fd ff8f 	bl	80058fc <vPortExitCritical>
 80079de:	f7fd ff5b 	bl	8005898 <vPortEnterCritical>
 80079e2:	4b17      	ldr	r3, [pc, #92]	@ (8007a40 <task_+0x1bc>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a60 <task_+0x1dc>)
 80079e8:	213f      	movs	r1, #63	@ 0x3f
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fdba 	bl	8008564 <sniprintf>
 80079f0:	4603      	mov	r3, r0
 80079f2:	4a15      	ldr	r2, [pc, #84]	@ (8007a48 <task_+0x1c4>)
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	4b12      	ldr	r3, [pc, #72]	@ (8007a40 <task_+0x1bc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fe fc3a 	bl	8006274 <logger_log_print_>
 8007a00:	f7fd ff7c 	bl	80058fc <vPortExitCritical>
 8007a04:	f7fd ff48 	bl	8005898 <vPortEnterCritical>
 8007a08:	4b0d      	ldr	r3, [pc, #52]	@ (8007a40 <task_+0x1bc>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a10      	ldr	r2, [pc, #64]	@ (8007a50 <task_+0x1cc>)
 8007a0e:	213f      	movs	r1, #63	@ 0x3f
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fda7 	bl	8008564 <sniprintf>
 8007a16:	4603      	mov	r3, r0
 8007a18:	4a0b      	ldr	r2, [pc, #44]	@ (8007a48 <task_+0x1c4>)
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	4b08      	ldr	r3, [pc, #32]	@ (8007a40 <task_+0x1bc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fc27 	bl	8006274 <logger_log_print_>
 8007a26:	f7fd ff69 	bl	80058fc <vPortExitCritical>
          turn_off_all_leds();  // Apagar todos antes de encender el azul
 8007a2a:	f7ff fdf9 	bl	8007620 <turn_off_all_leds>
          send_led_on(&led_blue);
 8007a2e:	480d      	ldr	r0, [pc, #52]	@ (8007a64 <task_+0x1e0>)
 8007a30:	f7ff fd3e 	bl	80074b0 <send_led_on>
          break;
 8007a34:	e000      	b.n	8007a38 <task_+0x1b4>
          break;
 8007a36:	bf00      	nop
  {
 8007a38:	e728      	b.n	800788c <task_+0x8>
 8007a3a:	bf00      	nop
 8007a3c:	20004230 	.word	0x20004230
 8007a40:	08009b70 	.word	0x08009b70
 8007a44:	08009a7c 	.word	0x08009a7c
 8007a48:	200041ec 	.word	0x200041ec
 8007a4c:	08009a84 	.word	0x08009a84
 8007a50:	08009948 	.word	0x08009948
 8007a54:	20004200 	.word	0x20004200
 8007a58:	08009aa8 	.word	0x08009aa8
 8007a5c:	20004210 	.word	0x20004210
 8007a60:	08009acc 	.word	0x08009acc
 8007a64:	20004220 	.word	0x20004220

08007a68 <ao_ui_send_event>:
}

/********************** external functions PULSEdefinition ************************/

bool ao_ui_send_event(msg_event_t msg)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	71fb      	strb	r3, [r7, #7]
  return (pdPASS == xQueueSend(hao_.hqueue, (void*)&msg, 0));
 8007a72:	4b08      	ldr	r3, [pc, #32]	@ (8007a94 <ao_ui_send_event+0x2c>)
 8007a74:	6818      	ldr	r0, [r3, #0]
 8007a76:	1df9      	adds	r1, r7, #7
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f7fc fb44 	bl	8004108 <xQueueGenericSend>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	bf0c      	ite	eq
 8007a86:	2301      	moveq	r3, #1
 8007a88:	2300      	movne	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20004230 	.word	0x20004230

08007a98 <ao_ui_init>:

void ao_ui_init(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af02      	add	r7, sp, #8
  // Inicializar cola para eventos del botón
  hao_.hqueue = xQueueCreate(QUEUE_LENGTH_, QUEUE_ITEM_SIZE_);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	2005      	movs	r0, #5
 8007aa4:	f7fc fad2 	bl	800404c <xQueueGenericCreate>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	4a85      	ldr	r2, [pc, #532]	@ (8007cc0 <ao_ui_init+0x228>)
 8007aac:	6013      	str	r3, [r2, #0]
  if (hao_.hqueue == NULL)
 8007aae:	4b84      	ldr	r3, [pc, #528]	@ (8007cc0 <ao_ui_init+0x228>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d13a      	bne.n	8007b2c <ao_ui_init+0x94>
  {
    LOGGER_ERROR("Failed to create UI event queue");
 8007ab6:	f7fd feef 	bl	8005898 <vPortEnterCritical>
 8007aba:	4b82      	ldr	r3, [pc, #520]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a82      	ldr	r2, [pc, #520]	@ (8007cc8 <ao_ui_init+0x230>)
 8007ac0:	213f      	movs	r1, #63	@ 0x3f
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fd4e 	bl	8008564 <sniprintf>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	4a80      	ldr	r2, [pc, #512]	@ (8007ccc <ao_ui_init+0x234>)
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	4b7d      	ldr	r3, [pc, #500]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe fbce 	bl	8006274 <logger_log_print_>
 8007ad8:	f7fd ff10 	bl	80058fc <vPortExitCritical>
 8007adc:	f7fd fedc 	bl	8005898 <vPortEnterCritical>
 8007ae0:	4b78      	ldr	r3, [pc, #480]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a7a      	ldr	r2, [pc, #488]	@ (8007cd0 <ao_ui_init+0x238>)
 8007ae6:	213f      	movs	r1, #63	@ 0x3f
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fd3b 	bl	8008564 <sniprintf>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4a76      	ldr	r2, [pc, #472]	@ (8007ccc <ao_ui_init+0x234>)
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	4b73      	ldr	r3, [pc, #460]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe fbbb 	bl	8006274 <logger_log_print_>
 8007afe:	f7fd fefd 	bl	80058fc <vPortExitCritical>
 8007b02:	f7fd fec9 	bl	8005898 <vPortEnterCritical>
 8007b06:	4b6f      	ldr	r3, [pc, #444]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a72      	ldr	r2, [pc, #456]	@ (8007cd4 <ao_ui_init+0x23c>)
 8007b0c:	213f      	movs	r1, #63	@ 0x3f
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fd28 	bl	8008564 <sniprintf>
 8007b14:	4603      	mov	r3, r0
 8007b16:	4a6d      	ldr	r2, [pc, #436]	@ (8007ccc <ao_ui_init+0x234>)
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fba8 	bl	8006274 <logger_log_print_>
 8007b24:	f7fd feea 	bl	80058fc <vPortExitCritical>
    while(1);
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <ao_ui_init+0x90>
  }

  // Inicializar memory pool para mensajes LED
  memory_pool_init(&hao_.msg_pool, 
 8007b2c:	2314      	movs	r3, #20
 8007b2e:	220a      	movs	r2, #10
 8007b30:	4969      	ldr	r1, [pc, #420]	@ (8007cd8 <ao_ui_init+0x240>)
 8007b32:	486a      	ldr	r0, [pc, #424]	@ (8007cdc <ao_ui_init+0x244>)
 8007b34:	f7fe fbb2 	bl	800629c <memory_pool_init>
                  hao_.pool_memory,
                  UI_MSG_POOL_BLOCKS, 
                  sizeof(ao_led_message_t));
  
  // Initialize LEDs
  LOGGER_INFO("Initializing LEDs...");
 8007b38:	f7fd feae 	bl	8005898 <vPortEnterCritical>
 8007b3c:	4b61      	ldr	r3, [pc, #388]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a67      	ldr	r2, [pc, #412]	@ (8007ce0 <ao_ui_init+0x248>)
 8007b42:	213f      	movs	r1, #63	@ 0x3f
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fd0d 	bl	8008564 <sniprintf>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4a5f      	ldr	r2, [pc, #380]	@ (8007ccc <ao_ui_init+0x234>)
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	4b5c      	ldr	r3, [pc, #368]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fb8d 	bl	8006274 <logger_log_print_>
 8007b5a:	f7fd fecf 	bl	80058fc <vPortExitCritical>
 8007b5e:	f7fd fe9b 	bl	8005898 <vPortEnterCritical>
 8007b62:	4b58      	ldr	r3, [pc, #352]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a5f      	ldr	r2, [pc, #380]	@ (8007ce4 <ao_ui_init+0x24c>)
 8007b68:	213f      	movs	r1, #63	@ 0x3f
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fcfa 	bl	8008564 <sniprintf>
 8007b70:	4603      	mov	r3, r0
 8007b72:	4a56      	ldr	r2, [pc, #344]	@ (8007ccc <ao_ui_init+0x234>)
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	4b53      	ldr	r3, [pc, #332]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fb7a 	bl	8006274 <logger_log_print_>
 8007b80:	f7fd febc 	bl	80058fc <vPortExitCritical>
 8007b84:	f7fd fe88 	bl	8005898 <vPortEnterCritical>
 8007b88:	4b4e      	ldr	r3, [pc, #312]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a51      	ldr	r2, [pc, #324]	@ (8007cd4 <ao_ui_init+0x23c>)
 8007b8e:	213f      	movs	r1, #63	@ 0x3f
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fce7 	bl	8008564 <sniprintf>
 8007b96:	4603      	mov	r3, r0
 8007b98:	4a4c      	ldr	r2, [pc, #304]	@ (8007ccc <ao_ui_init+0x234>)
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b49      	ldr	r3, [pc, #292]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe fb67 	bl	8006274 <logger_log_print_>
 8007ba6:	f7fd fea9 	bl	80058fc <vPortExitCritical>

  // Inicializar handles de LEDs
  ao_led_init(&led_red, AO_LED_COLOR_RED);
 8007baa:	2100      	movs	r1, #0
 8007bac:	484e      	ldr	r0, [pc, #312]	@ (8007ce8 <ao_ui_init+0x250>)
 8007bae:	f7ff fa87 	bl	80070c0 <ao_led_init>
  ao_led_init(&led_green, AO_LED_COLOR_GREEN);
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	484d      	ldr	r0, [pc, #308]	@ (8007cec <ao_ui_init+0x254>)
 8007bb6:	f7ff fa83 	bl	80070c0 <ao_led_init>
  ao_led_init(&led_blue, AO_LED_COLOR_BLUE);
 8007bba:	2102      	movs	r1, #2
 8007bbc:	484c      	ldr	r0, [pc, #304]	@ (8007cf0 <ao_ui_init+0x258>)
 8007bbe:	f7ff fa7f 	bl	80070c0 <ao_led_init>

  // Crear tareas LED
  ao_led_start_task(&led_red);
 8007bc2:	4849      	ldr	r0, [pc, #292]	@ (8007ce8 <ao_ui_init+0x250>)
 8007bc4:	f7ff fae6 	bl	8007194 <ao_led_start_task>
  ao_led_start_task(&led_green);
 8007bc8:	4848      	ldr	r0, [pc, #288]	@ (8007cec <ao_ui_init+0x254>)
 8007bca:	f7ff fae3 	bl	8007194 <ao_led_start_task>
  ao_led_start_task(&led_blue);
 8007bce:	4848      	ldr	r0, [pc, #288]	@ (8007cf0 <ao_ui_init+0x258>)
 8007bd0:	f7ff fae0 	bl	8007194 <ao_led_start_task>

  // Crear tarea UI
  BaseType_t status;
  status = xTaskCreate(task_, "task_ao_ui", 128, NULL, tskIDLE_PRIORITY, NULL);
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	2280      	movs	r2, #128	@ 0x80
 8007be0:	4944      	ldr	r1, [pc, #272]	@ (8007cf4 <ao_ui_init+0x25c>)
 8007be2:	4845      	ldr	r0, [pc, #276]	@ (8007cf8 <ao_ui_init+0x260>)
 8007be4:	f7fc fde4 	bl	80047b0 <xTaskCreate>
 8007be8:	60f8      	str	r0, [r7, #12]
  while (pdPASS != status)
 8007bea:	e038      	b.n	8007c5e <ao_ui_init+0x1c6>
  {
    // Error: No se pudo crear la tarea UI
    LOGGER_ERROR("UI: Error creando tarea UI");
 8007bec:	f7fd fe54 	bl	8005898 <vPortEnterCritical>
 8007bf0:	4b34      	ldr	r3, [pc, #208]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a34      	ldr	r2, [pc, #208]	@ (8007cc8 <ao_ui_init+0x230>)
 8007bf6:	213f      	movs	r1, #63	@ 0x3f
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fcb3 	bl	8008564 <sniprintf>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4a32      	ldr	r2, [pc, #200]	@ (8007ccc <ao_ui_init+0x234>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	4b2f      	ldr	r3, [pc, #188]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fb33 	bl	8006274 <logger_log_print_>
 8007c0e:	f7fd fe75 	bl	80058fc <vPortExitCritical>
 8007c12:	f7fd fe41 	bl	8005898 <vPortEnterCritical>
 8007c16:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a38      	ldr	r2, [pc, #224]	@ (8007cfc <ao_ui_init+0x264>)
 8007c1c:	213f      	movs	r1, #63	@ 0x3f
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fca0 	bl	8008564 <sniprintf>
 8007c24:	4603      	mov	r3, r0
 8007c26:	4a29      	ldr	r2, [pc, #164]	@ (8007ccc <ao_ui_init+0x234>)
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	4b26      	ldr	r3, [pc, #152]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fb20 	bl	8006274 <logger_log_print_>
 8007c34:	f7fd fe62 	bl	80058fc <vPortExitCritical>
 8007c38:	f7fd fe2e 	bl	8005898 <vPortEnterCritical>
 8007c3c:	4b21      	ldr	r3, [pc, #132]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a24      	ldr	r2, [pc, #144]	@ (8007cd4 <ao_ui_init+0x23c>)
 8007c42:	213f      	movs	r1, #63	@ 0x3f
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fc8d 	bl	8008564 <sniprintf>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ccc <ao_ui_init+0x234>)
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc4 <ao_ui_init+0x22c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe fb0d 	bl	8006274 <logger_log_print_>
 8007c5a:	f7fd fe4f 	bl	80058fc <vPortExitCritical>
  while (pdPASS != status)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d1c3      	bne.n	8007bec <ao_ui_init+0x154>
  }

  // Inicializar la lista enlazada de mensajes activos
  linked_list_init(&active_messages_list);
 8007c64:	4826      	ldr	r0, [pc, #152]	@ (8007d00 <ao_ui_init+0x268>)
 8007c66:	f7fe fa47 	bl	80060f8 <linked_list_init>

  // Apagar todos los LEDs usando el sistema de mensajes normal
  ao_led_message_t* msg_red = create_led_message(1, AO_LED_MESSAGE_OFF, 0);
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	2001      	movs	r0, #1
 8007c70:	f7ff fafe 	bl	8007270 <create_led_message>
 8007c74:	60b8      	str	r0, [r7, #8]
  ao_led_message_t* msg_green = create_led_message(2, AO_LED_MESSAGE_OFF, 0);
 8007c76:	2200      	movs	r2, #0
 8007c78:	2101      	movs	r1, #1
 8007c7a:	2002      	movs	r0, #2
 8007c7c:	f7ff faf8 	bl	8007270 <create_led_message>
 8007c80:	6078      	str	r0, [r7, #4]
  ao_led_message_t* msg_blue = create_led_message(3, AO_LED_MESSAGE_OFF, 0);
 8007c82:	2200      	movs	r2, #0
 8007c84:	2101      	movs	r1, #1
 8007c86:	2003      	movs	r0, #3
 8007c88:	f7ff faf2 	bl	8007270 <create_led_message>
 8007c8c:	6038      	str	r0, [r7, #0]

  if (msg_red) {
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <ao_ui_init+0x204>
    ao_led_send(&led_red, msg_red);
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	4814      	ldr	r0, [pc, #80]	@ (8007ce8 <ao_ui_init+0x250>)
 8007c98:	f7ff f922 	bl	8006ee0 <ao_led_send>
  }
  if (msg_green) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <ao_ui_init+0x212>
    ao_led_send(&led_green, msg_green);
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	4811      	ldr	r0, [pc, #68]	@ (8007cec <ao_ui_init+0x254>)
 8007ca6:	f7ff f91b 	bl	8006ee0 <ao_led_send>
  }
  if (msg_blue) {
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <ao_ui_init+0x220>
    ao_led_send(&led_blue, msg_blue);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	480f      	ldr	r0, [pc, #60]	@ (8007cf0 <ao_ui_init+0x258>)
 8007cb4:	f7ff f914 	bl	8006ee0 <ao_led_send>
  }
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20004230 	.word	0x20004230
 8007cc4:	08009b70 	.word	0x08009b70
 8007cc8:	0800990c 	.word	0x0800990c
 8007ccc:	200041ec 	.word	0x200041ec
 8007cd0:	08009af0 	.word	0x08009af0
 8007cd4:	08009948 	.word	0x08009948
 8007cd8:	20004240 	.word	0x20004240
 8007cdc:	20004234 	.word	0x20004234
 8007ce0:	08009a7c 	.word	0x08009a7c
 8007ce4:	08009b10 	.word	0x08009b10
 8007ce8:	20004200 	.word	0x20004200
 8007cec:	20004210 	.word	0x20004210
 8007cf0:	20004220 	.word	0x20004220
 8007cf4:	08009b28 	.word	0x08009b28
 8007cf8:	08007885 	.word	0x08007885
 8007cfc:	08009b34 	.word	0x08009b34
 8007d00:	200041f4 	.word	0x200041f4

08007d04 <findslot>:
 8007d04:	4b0a      	ldr	r3, [pc, #40]	@ (8007d30 <findslot+0x2c>)
 8007d06:	b510      	push	{r4, lr}
 8007d08:	4604      	mov	r4, r0
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	b118      	cbz	r0, 8007d16 <findslot+0x12>
 8007d0e:	6a03      	ldr	r3, [r0, #32]
 8007d10:	b90b      	cbnz	r3, 8007d16 <findslot+0x12>
 8007d12:	f000 fbdf 	bl	80084d4 <__sinit>
 8007d16:	2c13      	cmp	r4, #19
 8007d18:	d807      	bhi.n	8007d2a <findslot+0x26>
 8007d1a:	4806      	ldr	r0, [pc, #24]	@ (8007d34 <findslot+0x30>)
 8007d1c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007d20:	3201      	adds	r2, #1
 8007d22:	d002      	beq.n	8007d2a <findslot+0x26>
 8007d24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007d28:	bd10      	pop	{r4, pc}
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e7fc      	b.n	8007d28 <findslot+0x24>
 8007d2e:	bf00      	nop
 8007d30:	2000003c 	.word	0x2000003c
 8007d34:	20004318 	.word	0x20004318

08007d38 <error>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	f000 fcda 	bl	80086f4 <__errno>
 8007d40:	2613      	movs	r6, #19
 8007d42:	4605      	mov	r5, r0
 8007d44:	2700      	movs	r7, #0
 8007d46:	4630      	mov	r0, r6
 8007d48:	4639      	mov	r1, r7
 8007d4a:	beab      	bkpt	0x00ab
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	602e      	str	r6, [r5, #0]
 8007d50:	4620      	mov	r0, r4
 8007d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d54 <checkerror>:
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d101      	bne.n	8007d5c <checkerror+0x8>
 8007d58:	f7ff bfee 	b.w	8007d38 <error>
 8007d5c:	4770      	bx	lr

08007d5e <_swiread>:
 8007d5e:	b530      	push	{r4, r5, lr}
 8007d60:	b085      	sub	sp, #20
 8007d62:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007d66:	9203      	str	r2, [sp, #12]
 8007d68:	2406      	movs	r4, #6
 8007d6a:	ad01      	add	r5, sp, #4
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	beab      	bkpt	0x00ab
 8007d72:	4604      	mov	r4, r0
 8007d74:	4620      	mov	r0, r4
 8007d76:	f7ff ffed 	bl	8007d54 <checkerror>
 8007d7a:	b005      	add	sp, #20
 8007d7c:	bd30      	pop	{r4, r5, pc}

08007d7e <_read>:
 8007d7e:	b570      	push	{r4, r5, r6, lr}
 8007d80:	460e      	mov	r6, r1
 8007d82:	4614      	mov	r4, r2
 8007d84:	f7ff ffbe 	bl	8007d04 <findslot>
 8007d88:	4605      	mov	r5, r0
 8007d8a:	b930      	cbnz	r0, 8007d9a <_read+0x1c>
 8007d8c:	f000 fcb2 	bl	80086f4 <__errno>
 8007d90:	2309      	movs	r3, #9
 8007d92:	6003      	str	r3, [r0, #0]
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
 8007d9a:	6800      	ldr	r0, [r0, #0]
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	4631      	mov	r1, r6
 8007da0:	f7ff ffdd 	bl	8007d5e <_swiread>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	d0f5      	beq.n	8007d94 <_read+0x16>
 8007da8:	686b      	ldr	r3, [r5, #4]
 8007daa:	1a20      	subs	r0, r4, r0
 8007dac:	4403      	add	r3, r0
 8007dae:	606b      	str	r3, [r5, #4]
 8007db0:	e7f2      	b.n	8007d98 <_read+0x1a>

08007db2 <_swilseek>:
 8007db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db4:	460c      	mov	r4, r1
 8007db6:	4616      	mov	r6, r2
 8007db8:	f7ff ffa4 	bl	8007d04 <findslot>
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	b940      	cbnz	r0, 8007dd2 <_swilseek+0x20>
 8007dc0:	f000 fc98 	bl	80086f4 <__errno>
 8007dc4:	2309      	movs	r3, #9
 8007dc6:	6003      	str	r3, [r0, #0]
 8007dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8007dcc:	4620      	mov	r0, r4
 8007dce:	b003      	add	sp, #12
 8007dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd2:	2e02      	cmp	r6, #2
 8007dd4:	d903      	bls.n	8007dde <_swilseek+0x2c>
 8007dd6:	f000 fc8d 	bl	80086f4 <__errno>
 8007dda:	2316      	movs	r3, #22
 8007ddc:	e7f3      	b.n	8007dc6 <_swilseek+0x14>
 8007dde:	2e01      	cmp	r6, #1
 8007de0:	d112      	bne.n	8007e08 <_swilseek+0x56>
 8007de2:	6843      	ldr	r3, [r0, #4]
 8007de4:	18e4      	adds	r4, r4, r3
 8007de6:	d4f6      	bmi.n	8007dd6 <_swilseek+0x24>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	260a      	movs	r6, #10
 8007dec:	e9cd 3400 	strd	r3, r4, [sp]
 8007df0:	466f      	mov	r7, sp
 8007df2:	4630      	mov	r0, r6
 8007df4:	4639      	mov	r1, r7
 8007df6:	beab      	bkpt	0x00ab
 8007df8:	4606      	mov	r6, r0
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ffaa 	bl	8007d54 <checkerror>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	dbe1      	blt.n	8007dc8 <_swilseek+0x16>
 8007e04:	606c      	str	r4, [r5, #4]
 8007e06:	e7e1      	b.n	8007dcc <_swilseek+0x1a>
 8007e08:	2e02      	cmp	r6, #2
 8007e0a:	6803      	ldr	r3, [r0, #0]
 8007e0c:	d1ec      	bne.n	8007de8 <_swilseek+0x36>
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	260c      	movs	r6, #12
 8007e12:	466f      	mov	r7, sp
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	beab      	bkpt	0x00ab
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff ff99 	bl	8007d54 <checkerror>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	d0d0      	beq.n	8007dc8 <_swilseek+0x16>
 8007e26:	4404      	add	r4, r0
 8007e28:	e7de      	b.n	8007de8 <_swilseek+0x36>

08007e2a <_lseek>:
 8007e2a:	f7ff bfc2 	b.w	8007db2 <_swilseek>

08007e2e <_swiwrite>:
 8007e2e:	b530      	push	{r4, r5, lr}
 8007e30:	b085      	sub	sp, #20
 8007e32:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007e36:	9203      	str	r2, [sp, #12]
 8007e38:	2405      	movs	r4, #5
 8007e3a:	ad01      	add	r5, sp, #4
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	beab      	bkpt	0x00ab
 8007e42:	4604      	mov	r4, r0
 8007e44:	4620      	mov	r0, r4
 8007e46:	f7ff ff85 	bl	8007d54 <checkerror>
 8007e4a:	b005      	add	sp, #20
 8007e4c:	bd30      	pop	{r4, r5, pc}

08007e4e <_write>:
 8007e4e:	b570      	push	{r4, r5, r6, lr}
 8007e50:	460e      	mov	r6, r1
 8007e52:	4615      	mov	r5, r2
 8007e54:	f7ff ff56 	bl	8007d04 <findslot>
 8007e58:	4604      	mov	r4, r0
 8007e5a:	b930      	cbnz	r0, 8007e6a <_write+0x1c>
 8007e5c:	f000 fc4a 	bl	80086f4 <__errno>
 8007e60:	2309      	movs	r3, #9
 8007e62:	6003      	str	r3, [r0, #0]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	6800      	ldr	r0, [r0, #0]
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	4631      	mov	r1, r6
 8007e70:	f7ff ffdd 	bl	8007e2e <_swiwrite>
 8007e74:	1e03      	subs	r3, r0, #0
 8007e76:	dbf5      	blt.n	8007e64 <_write+0x16>
 8007e78:	6862      	ldr	r2, [r4, #4]
 8007e7a:	1ae8      	subs	r0, r5, r3
 8007e7c:	4402      	add	r2, r0
 8007e7e:	42ab      	cmp	r3, r5
 8007e80:	6062      	str	r2, [r4, #4]
 8007e82:	d1f1      	bne.n	8007e68 <_write+0x1a>
 8007e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e88:	2000      	movs	r0, #0
 8007e8a:	f7ff bf55 	b.w	8007d38 <error>

08007e8e <_swiclose>:
 8007e8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e90:	2402      	movs	r4, #2
 8007e92:	9001      	str	r0, [sp, #4]
 8007e94:	ad01      	add	r5, sp, #4
 8007e96:	4620      	mov	r0, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	beab      	bkpt	0x00ab
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f7ff ff58 	bl	8007d54 <checkerror>
 8007ea4:	b003      	add	sp, #12
 8007ea6:	bd30      	pop	{r4, r5, pc}

08007ea8 <_close>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4605      	mov	r5, r0
 8007eac:	f7ff ff2a 	bl	8007d04 <findslot>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	b930      	cbnz	r0, 8007ec2 <_close+0x1a>
 8007eb4:	f000 fc1e 	bl	80086f4 <__errno>
 8007eb8:	2309      	movs	r3, #9
 8007eba:	6003      	str	r3, [r0, #0]
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	bd38      	pop	{r3, r4, r5, pc}
 8007ec2:	3d01      	subs	r5, #1
 8007ec4:	2d01      	cmp	r5, #1
 8007ec6:	d809      	bhi.n	8007edc <_close+0x34>
 8007ec8:	4b09      	ldr	r3, [pc, #36]	@ (8007ef0 <_close+0x48>)
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d104      	bne.n	8007edc <_close+0x34>
 8007ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed6:	6003      	str	r3, [r0, #0]
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e7f1      	b.n	8007ec0 <_close+0x18>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	f7ff ffd6 	bl	8007e8e <_swiclose>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d1ec      	bne.n	8007ec0 <_close+0x18>
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	e7e8      	b.n	8007ec0 <_close+0x18>
 8007eee:	bf00      	nop
 8007ef0:	20004318 	.word	0x20004318

08007ef4 <_swistat>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	f7ff ff04 	bl	8007d04 <findslot>
 8007efc:	4605      	mov	r5, r0
 8007efe:	b930      	cbnz	r0, 8007f0e <_swistat+0x1a>
 8007f00:	f000 fbf8 	bl	80086f4 <__errno>
 8007f04:	2309      	movs	r3, #9
 8007f06:	6003      	str	r3, [r0, #0]
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007f14:	6063      	str	r3, [r4, #4]
 8007f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f1a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007f1c:	260c      	movs	r6, #12
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4629      	mov	r1, r5
 8007f22:	beab      	bkpt	0x00ab
 8007f24:	4605      	mov	r5, r0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7ff ff14 	bl	8007d54 <checkerror>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d0eb      	beq.n	8007f08 <_swistat+0x14>
 8007f30:	6120      	str	r0, [r4, #16]
 8007f32:	2000      	movs	r0, #0
 8007f34:	e7ea      	b.n	8007f0c <_swistat+0x18>

08007f36 <_fstat>:
 8007f36:	460b      	mov	r3, r1
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	2258      	movs	r2, #88	@ 0x58
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fb88 	bl	8008656 <memset>
 8007f46:	4601      	mov	r1, r0
 8007f48:	4620      	mov	r0, r4
 8007f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f4e:	f7ff bfd1 	b.w	8007ef4 <_swistat>

08007f52 <_stat>:
 8007f52:	b538      	push	{r3, r4, r5, lr}
 8007f54:	460d      	mov	r5, r1
 8007f56:	4604      	mov	r4, r0
 8007f58:	2258      	movs	r2, #88	@ 0x58
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f000 fb7a 	bl	8008656 <memset>
 8007f62:	4620      	mov	r0, r4
 8007f64:	2100      	movs	r1, #0
 8007f66:	f000 f811 	bl	8007f8c <_swiopen>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	d00b      	beq.n	8007f88 <_stat+0x36>
 8007f70:	686b      	ldr	r3, [r5, #4]
 8007f72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007f76:	606b      	str	r3, [r5, #4]
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7ff ffbb 	bl	8007ef4 <_swistat>
 8007f7e:	4605      	mov	r5, r0
 8007f80:	4620      	mov	r0, r4
 8007f82:	f7ff ff91 	bl	8007ea8 <_close>
 8007f86:	462c      	mov	r4, r5
 8007f88:	4620      	mov	r0, r4
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}

08007f8c <_swiopen>:
 8007f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f90:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800803c <_swiopen+0xb0>
 8007f94:	b096      	sub	sp, #88	@ 0x58
 8007f96:	4607      	mov	r7, r0
 8007f98:	460e      	mov	r6, r1
 8007f9a:	2400      	movs	r4, #0
 8007f9c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007fa6:	d032      	beq.n	800800e <_swiopen+0x82>
 8007fa8:	3401      	adds	r4, #1
 8007faa:	2c14      	cmp	r4, #20
 8007fac:	d1f6      	bne.n	8007f9c <_swiopen+0x10>
 8007fae:	f000 fba1 	bl	80086f4 <__errno>
 8007fb2:	2318      	movs	r3, #24
 8007fb4:	e03a      	b.n	800802c <_swiopen+0xa0>
 8007fb6:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007fba:	f240 6301 	movw	r3, #1537	@ 0x601
 8007fbe:	07b2      	lsls	r2, r6, #30
 8007fc0:	bf48      	it	mi
 8007fc2:	f045 0502 	orrmi.w	r5, r5, #2
 8007fc6:	421e      	tst	r6, r3
 8007fc8:	bf18      	it	ne
 8007fca:	f045 0504 	orrne.w	r5, r5, #4
 8007fce:	0733      	lsls	r3, r6, #28
 8007fd0:	bf48      	it	mi
 8007fd2:	f025 0504 	bicmi.w	r5, r5, #4
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	bf48      	it	mi
 8007fda:	f045 0508 	orrmi.w	r5, r5, #8
 8007fde:	9700      	str	r7, [sp, #0]
 8007fe0:	f7f8 f916 	bl	8000210 <strlen>
 8007fe4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007fe8:	2501      	movs	r5, #1
 8007fea:	4628      	mov	r0, r5
 8007fec:	4651      	mov	r1, sl
 8007fee:	beab      	bkpt	0x00ab
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	db06      	blt.n	8008004 <_swiopen+0x78>
 8007ff6:	44c8      	add	r8, r9
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8007ffe:	f8c8 3004 	str.w	r3, [r8, #4]
 8008002:	e016      	b.n	8008032 <_swiopen+0xa6>
 8008004:	4628      	mov	r0, r5
 8008006:	f7ff fe97 	bl	8007d38 <error>
 800800a:	4604      	mov	r4, r0
 800800c:	e011      	b.n	8008032 <_swiopen+0xa6>
 800800e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8008012:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008016:	46ea      	mov	sl, sp
 8008018:	d1cd      	bne.n	8007fb6 <_swiopen+0x2a>
 800801a:	4651      	mov	r1, sl
 800801c:	4638      	mov	r0, r7
 800801e:	f7ff ff98 	bl	8007f52 <_stat>
 8008022:	3001      	adds	r0, #1
 8008024:	d0c7      	beq.n	8007fb6 <_swiopen+0x2a>
 8008026:	f000 fb65 	bl	80086f4 <__errno>
 800802a:	2311      	movs	r3, #17
 800802c:	6003      	str	r3, [r0, #0]
 800802e:	f04f 34ff 	mov.w	r4, #4294967295
 8008032:	4620      	mov	r0, r4
 8008034:	b016      	add	sp, #88	@ 0x58
 8008036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803a:	bf00      	nop
 800803c:	20004318 	.word	0x20004318

08008040 <_get_semihosting_exts>:
 8008040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008044:	4606      	mov	r6, r0
 8008046:	460f      	mov	r7, r1
 8008048:	4829      	ldr	r0, [pc, #164]	@ (80080f0 <_get_semihosting_exts+0xb0>)
 800804a:	2100      	movs	r1, #0
 800804c:	4615      	mov	r5, r2
 800804e:	f7ff ff9d 	bl	8007f8c <_swiopen>
 8008052:	462a      	mov	r2, r5
 8008054:	4604      	mov	r4, r0
 8008056:	2100      	movs	r1, #0
 8008058:	4630      	mov	r0, r6
 800805a:	f000 fafc 	bl	8008656 <memset>
 800805e:	1c63      	adds	r3, r4, #1
 8008060:	d014      	beq.n	800808c <_get_semihosting_exts+0x4c>
 8008062:	4620      	mov	r0, r4
 8008064:	f7ff fe4e 	bl	8007d04 <findslot>
 8008068:	f04f 080c 	mov.w	r8, #12
 800806c:	4681      	mov	r9, r0
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	beab      	bkpt	0x00ab
 8008074:	4680      	mov	r8, r0
 8008076:	4640      	mov	r0, r8
 8008078:	f7ff fe6c 	bl	8007d54 <checkerror>
 800807c:	2803      	cmp	r0, #3
 800807e:	dd02      	ble.n	8008086 <_get_semihosting_exts+0x46>
 8008080:	1ec3      	subs	r3, r0, #3
 8008082:	42ab      	cmp	r3, r5
 8008084:	dc07      	bgt.n	8008096 <_get_semihosting_exts+0x56>
 8008086:	4620      	mov	r0, r4
 8008088:	f7ff ff0e 	bl	8007ea8 <_close>
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	b003      	add	sp, #12
 8008092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008096:	2204      	movs	r2, #4
 8008098:	eb0d 0102 	add.w	r1, sp, r2
 800809c:	4620      	mov	r0, r4
 800809e:	f7ff fe6e 	bl	8007d7e <_read>
 80080a2:	2803      	cmp	r0, #3
 80080a4:	ddef      	ble.n	8008086 <_get_semihosting_exts+0x46>
 80080a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80080aa:	2b53      	cmp	r3, #83	@ 0x53
 80080ac:	d1eb      	bne.n	8008086 <_get_semihosting_exts+0x46>
 80080ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80080b2:	2b48      	cmp	r3, #72	@ 0x48
 80080b4:	d1e7      	bne.n	8008086 <_get_semihosting_exts+0x46>
 80080b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80080ba:	2b46      	cmp	r3, #70	@ 0x46
 80080bc:	d1e3      	bne.n	8008086 <_get_semihosting_exts+0x46>
 80080be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80080c2:	2b42      	cmp	r3, #66	@ 0x42
 80080c4:	d1df      	bne.n	8008086 <_get_semihosting_exts+0x46>
 80080c6:	2201      	movs	r2, #1
 80080c8:	4639      	mov	r1, r7
 80080ca:	4620      	mov	r0, r4
 80080cc:	f7ff fe71 	bl	8007db2 <_swilseek>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	dbd8      	blt.n	8008086 <_get_semihosting_exts+0x46>
 80080d4:	462a      	mov	r2, r5
 80080d6:	4631      	mov	r1, r6
 80080d8:	4620      	mov	r0, r4
 80080da:	f7ff fe50 	bl	8007d7e <_read>
 80080de:	4605      	mov	r5, r0
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7ff fee1 	bl	8007ea8 <_close>
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7ff fe34 	bl	8007d54 <checkerror>
 80080ec:	e7d0      	b.n	8008090 <_get_semihosting_exts+0x50>
 80080ee:	bf00      	nop
 80080f0:	08009b74 	.word	0x08009b74

080080f4 <initialise_semihosting_exts>:
 80080f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080f6:	4d0a      	ldr	r5, [pc, #40]	@ (8008120 <initialise_semihosting_exts+0x2c>)
 80080f8:	4c0a      	ldr	r4, [pc, #40]	@ (8008124 <initialise_semihosting_exts+0x30>)
 80080fa:	2100      	movs	r1, #0
 80080fc:	2201      	movs	r2, #1
 80080fe:	a801      	add	r0, sp, #4
 8008100:	6029      	str	r1, [r5, #0]
 8008102:	6022      	str	r2, [r4, #0]
 8008104:	f7ff ff9c 	bl	8008040 <_get_semihosting_exts>
 8008108:	2800      	cmp	r0, #0
 800810a:	dd07      	ble.n	800811c <initialise_semihosting_exts+0x28>
 800810c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008110:	f003 0201 	and.w	r2, r3, #1
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	b003      	add	sp, #12
 800811e:	bd30      	pop	{r4, r5, pc}
 8008120:	2000002c 	.word	0x2000002c
 8008124:	20000028 	.word	0x20000028

08008128 <_has_ext_stdout_stderr>:
 8008128:	b510      	push	{r4, lr}
 800812a:	4c04      	ldr	r4, [pc, #16]	@ (800813c <_has_ext_stdout_stderr+0x14>)
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	da01      	bge.n	8008136 <_has_ext_stdout_stderr+0xe>
 8008132:	f7ff ffdf 	bl	80080f4 <initialise_semihosting_exts>
 8008136:	6820      	ldr	r0, [r4, #0]
 8008138:	bd10      	pop	{r4, pc}
 800813a:	bf00      	nop
 800813c:	20000028 	.word	0x20000028

08008140 <initialise_monitor_handles>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	b085      	sub	sp, #20
 8008146:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80081f8 <initialise_monitor_handles+0xb8>
 800814a:	f8cd 9004 	str.w	r9, [sp, #4]
 800814e:	2303      	movs	r3, #3
 8008150:	2400      	movs	r4, #0
 8008152:	9303      	str	r3, [sp, #12]
 8008154:	af01      	add	r7, sp, #4
 8008156:	9402      	str	r4, [sp, #8]
 8008158:	2501      	movs	r5, #1
 800815a:	4628      	mov	r0, r5
 800815c:	4639      	mov	r1, r7
 800815e:	beab      	bkpt	0x00ab
 8008160:	4605      	mov	r5, r0
 8008162:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80081fc <initialise_monitor_handles+0xbc>
 8008166:	4623      	mov	r3, r4
 8008168:	4c20      	ldr	r4, [pc, #128]	@ (80081ec <initialise_monitor_handles+0xac>)
 800816a:	f8c8 5000 	str.w	r5, [r8]
 800816e:	f04f 32ff 	mov.w	r2, #4294967295
 8008172:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8008176:	3301      	adds	r3, #1
 8008178:	2b14      	cmp	r3, #20
 800817a:	d1fa      	bne.n	8008172 <initialise_monitor_handles+0x32>
 800817c:	f7ff ffd4 	bl	8008128 <_has_ext_stdout_stderr>
 8008180:	4d1b      	ldr	r5, [pc, #108]	@ (80081f0 <initialise_monitor_handles+0xb0>)
 8008182:	b1d0      	cbz	r0, 80081ba <initialise_monitor_handles+0x7a>
 8008184:	f04f 0a03 	mov.w	sl, #3
 8008188:	2304      	movs	r3, #4
 800818a:	f8cd 9004 	str.w	r9, [sp, #4]
 800818e:	2601      	movs	r6, #1
 8008190:	f8cd a00c 	str.w	sl, [sp, #12]
 8008194:	9302      	str	r3, [sp, #8]
 8008196:	4630      	mov	r0, r6
 8008198:	4639      	mov	r1, r7
 800819a:	beab      	bkpt	0x00ab
 800819c:	4683      	mov	fp, r0
 800819e:	4b15      	ldr	r3, [pc, #84]	@ (80081f4 <initialise_monitor_handles+0xb4>)
 80081a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80081a4:	f8c3 b000 	str.w	fp, [r3]
 80081a8:	2308      	movs	r3, #8
 80081aa:	f8cd a00c 	str.w	sl, [sp, #12]
 80081ae:	9302      	str	r3, [sp, #8]
 80081b0:	4630      	mov	r0, r6
 80081b2:	4639      	mov	r1, r7
 80081b4:	beab      	bkpt	0x00ab
 80081b6:	4606      	mov	r6, r0
 80081b8:	602e      	str	r6, [r5, #0]
 80081ba:	682b      	ldr	r3, [r5, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	bf02      	ittt	eq
 80081c0:	4b0c      	ldreq	r3, [pc, #48]	@ (80081f4 <initialise_monitor_handles+0xb4>)
 80081c2:	681b      	ldreq	r3, [r3, #0]
 80081c4:	602b      	streq	r3, [r5, #0]
 80081c6:	2600      	movs	r6, #0
 80081c8:	f8d8 3000 	ldr.w	r3, [r8]
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	6066      	str	r6, [r4, #4]
 80081d0:	f7ff ffaa 	bl	8008128 <_has_ext_stdout_stderr>
 80081d4:	b130      	cbz	r0, 80081e4 <initialise_monitor_handles+0xa4>
 80081d6:	4b07      	ldr	r3, [pc, #28]	@ (80081f4 <initialise_monitor_handles+0xb4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80081de:	682b      	ldr	r3, [r5, #0]
 80081e0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80081e4:	b005      	add	sp, #20
 80081e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ea:	bf00      	nop
 80081ec:	20004318 	.word	0x20004318
 80081f0:	2000430c 	.word	0x2000430c
 80081f4:	20004310 	.word	0x20004310
 80081f8:	08009b8a 	.word	0x08009b8a
 80081fc:	20004314 	.word	0x20004314

08008200 <_isatty>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	f7ff fd7f 	bl	8007d04 <findslot>
 8008206:	2409      	movs	r4, #9
 8008208:	4605      	mov	r5, r0
 800820a:	b920      	cbnz	r0, 8008216 <_isatty+0x16>
 800820c:	f000 fa72 	bl	80086f4 <__errno>
 8008210:	6004      	str	r4, [r0, #0]
 8008212:	2000      	movs	r0, #0
 8008214:	bd70      	pop	{r4, r5, r6, pc}
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	beab      	bkpt	0x00ab
 800821c:	4604      	mov	r4, r0
 800821e:	2c01      	cmp	r4, #1
 8008220:	4620      	mov	r0, r4
 8008222:	d0f7      	beq.n	8008214 <_isatty+0x14>
 8008224:	f000 fa66 	bl	80086f4 <__errno>
 8008228:	2513      	movs	r5, #19
 800822a:	4604      	mov	r4, r0
 800822c:	2600      	movs	r6, #0
 800822e:	4628      	mov	r0, r5
 8008230:	4631      	mov	r1, r6
 8008232:	beab      	bkpt	0x00ab
 8008234:	4605      	mov	r5, r0
 8008236:	6025      	str	r5, [r4, #0]
 8008238:	e7eb      	b.n	8008212 <_isatty+0x12>
	...

0800823c <__sflush_r>:
 800823c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008244:	0716      	lsls	r6, r2, #28
 8008246:	4605      	mov	r5, r0
 8008248:	460c      	mov	r4, r1
 800824a:	d454      	bmi.n	80082f6 <__sflush_r+0xba>
 800824c:	684b      	ldr	r3, [r1, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dc02      	bgt.n	8008258 <__sflush_r+0x1c>
 8008252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	dd48      	ble.n	80082ea <__sflush_r+0xae>
 8008258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800825a:	2e00      	cmp	r6, #0
 800825c:	d045      	beq.n	80082ea <__sflush_r+0xae>
 800825e:	2300      	movs	r3, #0
 8008260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008264:	682f      	ldr	r7, [r5, #0]
 8008266:	6a21      	ldr	r1, [r4, #32]
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	d030      	beq.n	80082ce <__sflush_r+0x92>
 800826c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	0759      	lsls	r1, r3, #29
 8008272:	d505      	bpl.n	8008280 <__sflush_r+0x44>
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	1ad2      	subs	r2, r2, r3
 8008278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800827a:	b10b      	cbz	r3, 8008280 <__sflush_r+0x44>
 800827c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	2300      	movs	r3, #0
 8008282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008284:	6a21      	ldr	r1, [r4, #32]
 8008286:	4628      	mov	r0, r5
 8008288:	47b0      	blx	r6
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	d106      	bne.n	800829e <__sflush_r+0x62>
 8008290:	6829      	ldr	r1, [r5, #0]
 8008292:	291d      	cmp	r1, #29
 8008294:	d82b      	bhi.n	80082ee <__sflush_r+0xb2>
 8008296:	4a2a      	ldr	r2, [pc, #168]	@ (8008340 <__sflush_r+0x104>)
 8008298:	40ca      	lsrs	r2, r1
 800829a:	07d6      	lsls	r6, r2, #31
 800829c:	d527      	bpl.n	80082ee <__sflush_r+0xb2>
 800829e:	2200      	movs	r2, #0
 80082a0:	6062      	str	r2, [r4, #4]
 80082a2:	04d9      	lsls	r1, r3, #19
 80082a4:	6922      	ldr	r2, [r4, #16]
 80082a6:	6022      	str	r2, [r4, #0]
 80082a8:	d504      	bpl.n	80082b4 <__sflush_r+0x78>
 80082aa:	1c42      	adds	r2, r0, #1
 80082ac:	d101      	bne.n	80082b2 <__sflush_r+0x76>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	b903      	cbnz	r3, 80082b4 <__sflush_r+0x78>
 80082b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80082b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082b6:	602f      	str	r7, [r5, #0]
 80082b8:	b1b9      	cbz	r1, 80082ea <__sflush_r+0xae>
 80082ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082be:	4299      	cmp	r1, r3
 80082c0:	d002      	beq.n	80082c8 <__sflush_r+0x8c>
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 fa52 	bl	800876c <_free_r>
 80082c8:	2300      	movs	r3, #0
 80082ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80082cc:	e00d      	b.n	80082ea <__sflush_r+0xae>
 80082ce:	2301      	movs	r3, #1
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b0      	blx	r6
 80082d4:	4602      	mov	r2, r0
 80082d6:	1c50      	adds	r0, r2, #1
 80082d8:	d1c9      	bne.n	800826e <__sflush_r+0x32>
 80082da:	682b      	ldr	r3, [r5, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0c6      	beq.n	800826e <__sflush_r+0x32>
 80082e0:	2b1d      	cmp	r3, #29
 80082e2:	d001      	beq.n	80082e8 <__sflush_r+0xac>
 80082e4:	2b16      	cmp	r3, #22
 80082e6:	d11e      	bne.n	8008326 <__sflush_r+0xea>
 80082e8:	602f      	str	r7, [r5, #0]
 80082ea:	2000      	movs	r0, #0
 80082ec:	e022      	b.n	8008334 <__sflush_r+0xf8>
 80082ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f2:	b21b      	sxth	r3, r3
 80082f4:	e01b      	b.n	800832e <__sflush_r+0xf2>
 80082f6:	690f      	ldr	r7, [r1, #16]
 80082f8:	2f00      	cmp	r7, #0
 80082fa:	d0f6      	beq.n	80082ea <__sflush_r+0xae>
 80082fc:	0793      	lsls	r3, r2, #30
 80082fe:	680e      	ldr	r6, [r1, #0]
 8008300:	bf08      	it	eq
 8008302:	694b      	ldreq	r3, [r1, #20]
 8008304:	600f      	str	r7, [r1, #0]
 8008306:	bf18      	it	ne
 8008308:	2300      	movne	r3, #0
 800830a:	eba6 0807 	sub.w	r8, r6, r7
 800830e:	608b      	str	r3, [r1, #8]
 8008310:	f1b8 0f00 	cmp.w	r8, #0
 8008314:	dde9      	ble.n	80082ea <__sflush_r+0xae>
 8008316:	6a21      	ldr	r1, [r4, #32]
 8008318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800831a:	4643      	mov	r3, r8
 800831c:	463a      	mov	r2, r7
 800831e:	4628      	mov	r0, r5
 8008320:	47b0      	blx	r6
 8008322:	2800      	cmp	r0, #0
 8008324:	dc08      	bgt.n	8008338 <__sflush_r+0xfc>
 8008326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008338:	4407      	add	r7, r0
 800833a:	eba8 0800 	sub.w	r8, r8, r0
 800833e:	e7e7      	b.n	8008310 <__sflush_r+0xd4>
 8008340:	20400001 	.word	0x20400001

08008344 <_fflush_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	4605      	mov	r5, r0
 800834a:	460c      	mov	r4, r1
 800834c:	b913      	cbnz	r3, 8008354 <_fflush_r+0x10>
 800834e:	2500      	movs	r5, #0
 8008350:	4628      	mov	r0, r5
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	b118      	cbz	r0, 800835e <_fflush_r+0x1a>
 8008356:	6a03      	ldr	r3, [r0, #32]
 8008358:	b90b      	cbnz	r3, 800835e <_fflush_r+0x1a>
 800835a:	f000 f8bb 	bl	80084d4 <__sinit>
 800835e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0f3      	beq.n	800834e <_fflush_r+0xa>
 8008366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008368:	07d0      	lsls	r0, r2, #31
 800836a:	d404      	bmi.n	8008376 <_fflush_r+0x32>
 800836c:	0599      	lsls	r1, r3, #22
 800836e:	d402      	bmi.n	8008376 <_fflush_r+0x32>
 8008370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008372:	f000 f9ea 	bl	800874a <__retarget_lock_acquire_recursive>
 8008376:	4628      	mov	r0, r5
 8008378:	4621      	mov	r1, r4
 800837a:	f7ff ff5f 	bl	800823c <__sflush_r>
 800837e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008380:	07da      	lsls	r2, r3, #31
 8008382:	4605      	mov	r5, r0
 8008384:	d4e4      	bmi.n	8008350 <_fflush_r+0xc>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	059b      	lsls	r3, r3, #22
 800838a:	d4e1      	bmi.n	8008350 <_fflush_r+0xc>
 800838c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800838e:	f000 f9dd 	bl	800874c <__retarget_lock_release_recursive>
 8008392:	e7dd      	b.n	8008350 <_fflush_r+0xc>

08008394 <fflush>:
 8008394:	4601      	mov	r1, r0
 8008396:	b920      	cbnz	r0, 80083a2 <fflush+0xe>
 8008398:	4a04      	ldr	r2, [pc, #16]	@ (80083ac <fflush+0x18>)
 800839a:	4905      	ldr	r1, [pc, #20]	@ (80083b0 <fflush+0x1c>)
 800839c:	4805      	ldr	r0, [pc, #20]	@ (80083b4 <fflush+0x20>)
 800839e:	f000 b8b1 	b.w	8008504 <_fwalk_sglue>
 80083a2:	4b05      	ldr	r3, [pc, #20]	@ (80083b8 <fflush+0x24>)
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	f7ff bfcd 	b.w	8008344 <_fflush_r>
 80083aa:	bf00      	nop
 80083ac:	20000030 	.word	0x20000030
 80083b0:	08008345 	.word	0x08008345
 80083b4:	20000040 	.word	0x20000040
 80083b8:	2000003c 	.word	0x2000003c

080083bc <std>:
 80083bc:	2300      	movs	r3, #0
 80083be:	b510      	push	{r4, lr}
 80083c0:	4604      	mov	r4, r0
 80083c2:	e9c0 3300 	strd	r3, r3, [r0]
 80083c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ca:	6083      	str	r3, [r0, #8]
 80083cc:	8181      	strh	r1, [r0, #12]
 80083ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80083d0:	81c2      	strh	r2, [r0, #14]
 80083d2:	6183      	str	r3, [r0, #24]
 80083d4:	4619      	mov	r1, r3
 80083d6:	2208      	movs	r2, #8
 80083d8:	305c      	adds	r0, #92	@ 0x5c
 80083da:	f000 f93c 	bl	8008656 <memset>
 80083de:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <std+0x58>)
 80083e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80083e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008418 <std+0x5c>)
 80083e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083e6:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <std+0x60>)
 80083e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008420 <std+0x64>)
 80083ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80083ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <std+0x68>)
 80083f0:	6224      	str	r4, [r4, #32]
 80083f2:	429c      	cmp	r4, r3
 80083f4:	d006      	beq.n	8008404 <std+0x48>
 80083f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083fa:	4294      	cmp	r4, r2
 80083fc:	d002      	beq.n	8008404 <std+0x48>
 80083fe:	33d0      	adds	r3, #208	@ 0xd0
 8008400:	429c      	cmp	r4, r3
 8008402:	d105      	bne.n	8008410 <std+0x54>
 8008404:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800840c:	f000 b99c 	b.w	8008748 <__retarget_lock_init_recursive>
 8008410:	bd10      	pop	{r4, pc}
 8008412:	bf00      	nop
 8008414:	080085d1 	.word	0x080085d1
 8008418:	080085f3 	.word	0x080085f3
 800841c:	0800862b 	.word	0x0800862b
 8008420:	0800864f 	.word	0x0800864f
 8008424:	200043b8 	.word	0x200043b8

08008428 <stdio_exit_handler>:
 8008428:	4a02      	ldr	r2, [pc, #8]	@ (8008434 <stdio_exit_handler+0xc>)
 800842a:	4903      	ldr	r1, [pc, #12]	@ (8008438 <stdio_exit_handler+0x10>)
 800842c:	4803      	ldr	r0, [pc, #12]	@ (800843c <stdio_exit_handler+0x14>)
 800842e:	f000 b869 	b.w	8008504 <_fwalk_sglue>
 8008432:	bf00      	nop
 8008434:	20000030 	.word	0x20000030
 8008438:	08008345 	.word	0x08008345
 800843c:	20000040 	.word	0x20000040

08008440 <cleanup_stdio>:
 8008440:	6841      	ldr	r1, [r0, #4]
 8008442:	4b0c      	ldr	r3, [pc, #48]	@ (8008474 <cleanup_stdio+0x34>)
 8008444:	4299      	cmp	r1, r3
 8008446:	b510      	push	{r4, lr}
 8008448:	4604      	mov	r4, r0
 800844a:	d001      	beq.n	8008450 <cleanup_stdio+0x10>
 800844c:	f7ff ff7a 	bl	8008344 <_fflush_r>
 8008450:	68a1      	ldr	r1, [r4, #8]
 8008452:	4b09      	ldr	r3, [pc, #36]	@ (8008478 <cleanup_stdio+0x38>)
 8008454:	4299      	cmp	r1, r3
 8008456:	d002      	beq.n	800845e <cleanup_stdio+0x1e>
 8008458:	4620      	mov	r0, r4
 800845a:	f7ff ff73 	bl	8008344 <_fflush_r>
 800845e:	68e1      	ldr	r1, [r4, #12]
 8008460:	4b06      	ldr	r3, [pc, #24]	@ (800847c <cleanup_stdio+0x3c>)
 8008462:	4299      	cmp	r1, r3
 8008464:	d004      	beq.n	8008470 <cleanup_stdio+0x30>
 8008466:	4620      	mov	r0, r4
 8008468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846c:	f7ff bf6a 	b.w	8008344 <_fflush_r>
 8008470:	bd10      	pop	{r4, pc}
 8008472:	bf00      	nop
 8008474:	200043b8 	.word	0x200043b8
 8008478:	20004420 	.word	0x20004420
 800847c:	20004488 	.word	0x20004488

08008480 <global_stdio_init.part.0>:
 8008480:	b510      	push	{r4, lr}
 8008482:	4b0b      	ldr	r3, [pc, #44]	@ (80084b0 <global_stdio_init.part.0+0x30>)
 8008484:	4c0b      	ldr	r4, [pc, #44]	@ (80084b4 <global_stdio_init.part.0+0x34>)
 8008486:	4a0c      	ldr	r2, [pc, #48]	@ (80084b8 <global_stdio_init.part.0+0x38>)
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	4620      	mov	r0, r4
 800848c:	2200      	movs	r2, #0
 800848e:	2104      	movs	r1, #4
 8008490:	f7ff ff94 	bl	80083bc <std>
 8008494:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008498:	2201      	movs	r2, #1
 800849a:	2109      	movs	r1, #9
 800849c:	f7ff ff8e 	bl	80083bc <std>
 80084a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084a4:	2202      	movs	r2, #2
 80084a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084aa:	2112      	movs	r1, #18
 80084ac:	f7ff bf86 	b.w	80083bc <std>
 80084b0:	200044f0 	.word	0x200044f0
 80084b4:	200043b8 	.word	0x200043b8
 80084b8:	08008429 	.word	0x08008429

080084bc <__sfp_lock_acquire>:
 80084bc:	4801      	ldr	r0, [pc, #4]	@ (80084c4 <__sfp_lock_acquire+0x8>)
 80084be:	f000 b944 	b.w	800874a <__retarget_lock_acquire_recursive>
 80084c2:	bf00      	nop
 80084c4:	200044f9 	.word	0x200044f9

080084c8 <__sfp_lock_release>:
 80084c8:	4801      	ldr	r0, [pc, #4]	@ (80084d0 <__sfp_lock_release+0x8>)
 80084ca:	f000 b93f 	b.w	800874c <__retarget_lock_release_recursive>
 80084ce:	bf00      	nop
 80084d0:	200044f9 	.word	0x200044f9

080084d4 <__sinit>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	4604      	mov	r4, r0
 80084d8:	f7ff fff0 	bl	80084bc <__sfp_lock_acquire>
 80084dc:	6a23      	ldr	r3, [r4, #32]
 80084de:	b11b      	cbz	r3, 80084e8 <__sinit+0x14>
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e4:	f7ff bff0 	b.w	80084c8 <__sfp_lock_release>
 80084e8:	4b04      	ldr	r3, [pc, #16]	@ (80084fc <__sinit+0x28>)
 80084ea:	6223      	str	r3, [r4, #32]
 80084ec:	4b04      	ldr	r3, [pc, #16]	@ (8008500 <__sinit+0x2c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1f5      	bne.n	80084e0 <__sinit+0xc>
 80084f4:	f7ff ffc4 	bl	8008480 <global_stdio_init.part.0>
 80084f8:	e7f2      	b.n	80084e0 <__sinit+0xc>
 80084fa:	bf00      	nop
 80084fc:	08008441 	.word	0x08008441
 8008500:	200044f0 	.word	0x200044f0

08008504 <_fwalk_sglue>:
 8008504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008508:	4607      	mov	r7, r0
 800850a:	4688      	mov	r8, r1
 800850c:	4614      	mov	r4, r2
 800850e:	2600      	movs	r6, #0
 8008510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008514:	f1b9 0901 	subs.w	r9, r9, #1
 8008518:	d505      	bpl.n	8008526 <_fwalk_sglue+0x22>
 800851a:	6824      	ldr	r4, [r4, #0]
 800851c:	2c00      	cmp	r4, #0
 800851e:	d1f7      	bne.n	8008510 <_fwalk_sglue+0xc>
 8008520:	4630      	mov	r0, r6
 8008522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d907      	bls.n	800853c <_fwalk_sglue+0x38>
 800852c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008530:	3301      	adds	r3, #1
 8008532:	d003      	beq.n	800853c <_fwalk_sglue+0x38>
 8008534:	4629      	mov	r1, r5
 8008536:	4638      	mov	r0, r7
 8008538:	47c0      	blx	r8
 800853a:	4306      	orrs	r6, r0
 800853c:	3568      	adds	r5, #104	@ 0x68
 800853e:	e7e9      	b.n	8008514 <_fwalk_sglue+0x10>

08008540 <iprintf>:
 8008540:	b40f      	push	{r0, r1, r2, r3}
 8008542:	b507      	push	{r0, r1, r2, lr}
 8008544:	4906      	ldr	r1, [pc, #24]	@ (8008560 <iprintf+0x20>)
 8008546:	ab04      	add	r3, sp, #16
 8008548:	6808      	ldr	r0, [r1, #0]
 800854a:	f853 2b04 	ldr.w	r2, [r3], #4
 800854e:	6881      	ldr	r1, [r0, #8]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	f000 fb85 	bl	8008c60 <_vfiprintf_r>
 8008556:	b003      	add	sp, #12
 8008558:	f85d eb04 	ldr.w	lr, [sp], #4
 800855c:	b004      	add	sp, #16
 800855e:	4770      	bx	lr
 8008560:	2000003c 	.word	0x2000003c

08008564 <sniprintf>:
 8008564:	b40c      	push	{r2, r3}
 8008566:	b530      	push	{r4, r5, lr}
 8008568:	4b18      	ldr	r3, [pc, #96]	@ (80085cc <sniprintf+0x68>)
 800856a:	1e0c      	subs	r4, r1, #0
 800856c:	681d      	ldr	r5, [r3, #0]
 800856e:	b09d      	sub	sp, #116	@ 0x74
 8008570:	da08      	bge.n	8008584 <sniprintf+0x20>
 8008572:	238b      	movs	r3, #139	@ 0x8b
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	f04f 30ff 	mov.w	r0, #4294967295
 800857a:	b01d      	add	sp, #116	@ 0x74
 800857c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008580:	b002      	add	sp, #8
 8008582:	4770      	bx	lr
 8008584:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008588:	f8ad 3014 	strh.w	r3, [sp, #20]
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008592:	bf14      	ite	ne
 8008594:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008598:	4623      	moveq	r3, r4
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	9307      	str	r3, [sp, #28]
 800859e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80085a2:	9002      	str	r0, [sp, #8]
 80085a4:	9006      	str	r0, [sp, #24]
 80085a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80085aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085ac:	ab21      	add	r3, sp, #132	@ 0x84
 80085ae:	a902      	add	r1, sp, #8
 80085b0:	4628      	mov	r0, r5
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	f000 fa2e 	bl	8008a14 <_svfiprintf_r>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	bfbc      	itt	lt
 80085bc:	238b      	movlt	r3, #139	@ 0x8b
 80085be:	602b      	strlt	r3, [r5, #0]
 80085c0:	2c00      	cmp	r4, #0
 80085c2:	d0da      	beq.n	800857a <sniprintf+0x16>
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	e7d6      	b.n	800857a <sniprintf+0x16>
 80085cc:	2000003c 	.word	0x2000003c

080085d0 <__sread>:
 80085d0:	b510      	push	{r4, lr}
 80085d2:	460c      	mov	r4, r1
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	f000 f868 	bl	80086ac <_read_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	bfab      	itete	ge
 80085e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085e2:	89a3      	ldrhlt	r3, [r4, #12]
 80085e4:	181b      	addge	r3, r3, r0
 80085e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085ea:	bfac      	ite	ge
 80085ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085ee:	81a3      	strhlt	r3, [r4, #12]
 80085f0:	bd10      	pop	{r4, pc}

080085f2 <__swrite>:
 80085f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	461f      	mov	r7, r3
 80085f8:	898b      	ldrh	r3, [r1, #12]
 80085fa:	05db      	lsls	r3, r3, #23
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	4616      	mov	r6, r2
 8008602:	d505      	bpl.n	8008610 <__swrite+0x1e>
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	2302      	movs	r3, #2
 800860a:	2200      	movs	r2, #0
 800860c:	f000 f83c 	bl	8008688 <_lseek_r>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	4632      	mov	r2, r6
 800861e:	463b      	mov	r3, r7
 8008620:	4628      	mov	r0, r5
 8008622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	f000 b853 	b.w	80086d0 <_write_r>

0800862a <__sseek>:
 800862a:	b510      	push	{r4, lr}
 800862c:	460c      	mov	r4, r1
 800862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008632:	f000 f829 	bl	8008688 <_lseek_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	bf15      	itete	ne
 800863c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800863e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008642:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008646:	81a3      	strheq	r3, [r4, #12]
 8008648:	bf18      	it	ne
 800864a:	81a3      	strhne	r3, [r4, #12]
 800864c:	bd10      	pop	{r4, pc}

0800864e <__sclose>:
 800864e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008652:	f000 b809 	b.w	8008668 <_close_r>

08008656 <memset>:
 8008656:	4402      	add	r2, r0
 8008658:	4603      	mov	r3, r0
 800865a:	4293      	cmp	r3, r2
 800865c:	d100      	bne.n	8008660 <memset+0xa>
 800865e:	4770      	bx	lr
 8008660:	f803 1b01 	strb.w	r1, [r3], #1
 8008664:	e7f9      	b.n	800865a <memset+0x4>
	...

08008668 <_close_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d06      	ldr	r5, [pc, #24]	@ (8008684 <_close_r+0x1c>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	602b      	str	r3, [r5, #0]
 8008674:	f7ff fc18 	bl	8007ea8 <_close>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_close_r+0x1a>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_close_r+0x1a>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	200044f4 	.word	0x200044f4

08008688 <_lseek_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d07      	ldr	r5, [pc, #28]	@ (80086a8 <_lseek_r+0x20>)
 800868c:	4604      	mov	r4, r0
 800868e:	4608      	mov	r0, r1
 8008690:	4611      	mov	r1, r2
 8008692:	2200      	movs	r2, #0
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f7ff fbc7 	bl	8007e2a <_lseek>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_lseek_r+0x1e>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_lseek_r+0x1e>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	200044f4 	.word	0x200044f4

080086ac <_read_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	@ (80086cc <_read_r+0x20>)
 80086b0:	4604      	mov	r4, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	4611      	mov	r1, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	602a      	str	r2, [r5, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7ff fb5f 	bl	8007d7e <_read>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_read_r+0x1e>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_read_r+0x1e>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	200044f4 	.word	0x200044f4

080086d0 <_write_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	@ (80086f0 <_write_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7ff fbb5 	bl	8007e4e <_write>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_write_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_write_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	200044f4 	.word	0x200044f4

080086f4 <__errno>:
 80086f4:	4b01      	ldr	r3, [pc, #4]	@ (80086fc <__errno+0x8>)
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	2000003c 	.word	0x2000003c

08008700 <__libc_init_array>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	4d0d      	ldr	r5, [pc, #52]	@ (8008738 <__libc_init_array+0x38>)
 8008704:	4c0d      	ldr	r4, [pc, #52]	@ (800873c <__libc_init_array+0x3c>)
 8008706:	1b64      	subs	r4, r4, r5
 8008708:	10a4      	asrs	r4, r4, #2
 800870a:	2600      	movs	r6, #0
 800870c:	42a6      	cmp	r6, r4
 800870e:	d109      	bne.n	8008724 <__libc_init_array+0x24>
 8008710:	4d0b      	ldr	r5, [pc, #44]	@ (8008740 <__libc_init_array+0x40>)
 8008712:	4c0c      	ldr	r4, [pc, #48]	@ (8008744 <__libc_init_array+0x44>)
 8008714:	f000 fec0 	bl	8009498 <_init>
 8008718:	1b64      	subs	r4, r4, r5
 800871a:	10a4      	asrs	r4, r4, #2
 800871c:	2600      	movs	r6, #0
 800871e:	42a6      	cmp	r6, r4
 8008720:	d105      	bne.n	800872e <__libc_init_array+0x2e>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	f855 3b04 	ldr.w	r3, [r5], #4
 8008728:	4798      	blx	r3
 800872a:	3601      	adds	r6, #1
 800872c:	e7ee      	b.n	800870c <__libc_init_array+0xc>
 800872e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008732:	4798      	blx	r3
 8008734:	3601      	adds	r6, #1
 8008736:	e7f2      	b.n	800871e <__libc_init_array+0x1e>
 8008738:	08009bcc 	.word	0x08009bcc
 800873c:	08009bcc 	.word	0x08009bcc
 8008740:	08009bcc 	.word	0x08009bcc
 8008744:	08009bd0 	.word	0x08009bd0

08008748 <__retarget_lock_init_recursive>:
 8008748:	4770      	bx	lr

0800874a <__retarget_lock_acquire_recursive>:
 800874a:	4770      	bx	lr

0800874c <__retarget_lock_release_recursive>:
 800874c:	4770      	bx	lr

0800874e <memcpy>:
 800874e:	440a      	add	r2, r1
 8008750:	4291      	cmp	r1, r2
 8008752:	f100 33ff 	add.w	r3, r0, #4294967295
 8008756:	d100      	bne.n	800875a <memcpy+0xc>
 8008758:	4770      	bx	lr
 800875a:	b510      	push	{r4, lr}
 800875c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008764:	4291      	cmp	r1, r2
 8008766:	d1f9      	bne.n	800875c <memcpy+0xe>
 8008768:	bd10      	pop	{r4, pc}
	...

0800876c <_free_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4605      	mov	r5, r0
 8008770:	2900      	cmp	r1, #0
 8008772:	d041      	beq.n	80087f8 <_free_r+0x8c>
 8008774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008778:	1f0c      	subs	r4, r1, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	bfb8      	it	lt
 800877e:	18e4      	addlt	r4, r4, r3
 8008780:	f000 f8e0 	bl	8008944 <__malloc_lock>
 8008784:	4a1d      	ldr	r2, [pc, #116]	@ (80087fc <_free_r+0x90>)
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	b933      	cbnz	r3, 8008798 <_free_r+0x2c>
 800878a:	6063      	str	r3, [r4, #4]
 800878c:	6014      	str	r4, [r2, #0]
 800878e:	4628      	mov	r0, r5
 8008790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008794:	f000 b8dc 	b.w	8008950 <__malloc_unlock>
 8008798:	42a3      	cmp	r3, r4
 800879a:	d908      	bls.n	80087ae <_free_r+0x42>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	1821      	adds	r1, r4, r0
 80087a0:	428b      	cmp	r3, r1
 80087a2:	bf01      	itttt	eq
 80087a4:	6819      	ldreq	r1, [r3, #0]
 80087a6:	685b      	ldreq	r3, [r3, #4]
 80087a8:	1809      	addeq	r1, r1, r0
 80087aa:	6021      	streq	r1, [r4, #0]
 80087ac:	e7ed      	b.n	800878a <_free_r+0x1e>
 80087ae:	461a      	mov	r2, r3
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	b10b      	cbz	r3, 80087b8 <_free_r+0x4c>
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	d9fa      	bls.n	80087ae <_free_r+0x42>
 80087b8:	6811      	ldr	r1, [r2, #0]
 80087ba:	1850      	adds	r0, r2, r1
 80087bc:	42a0      	cmp	r0, r4
 80087be:	d10b      	bne.n	80087d8 <_free_r+0x6c>
 80087c0:	6820      	ldr	r0, [r4, #0]
 80087c2:	4401      	add	r1, r0
 80087c4:	1850      	adds	r0, r2, r1
 80087c6:	4283      	cmp	r3, r0
 80087c8:	6011      	str	r1, [r2, #0]
 80087ca:	d1e0      	bne.n	800878e <_free_r+0x22>
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	6053      	str	r3, [r2, #4]
 80087d2:	4408      	add	r0, r1
 80087d4:	6010      	str	r0, [r2, #0]
 80087d6:	e7da      	b.n	800878e <_free_r+0x22>
 80087d8:	d902      	bls.n	80087e0 <_free_r+0x74>
 80087da:	230c      	movs	r3, #12
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	e7d6      	b.n	800878e <_free_r+0x22>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	1821      	adds	r1, r4, r0
 80087e4:	428b      	cmp	r3, r1
 80087e6:	bf04      	itt	eq
 80087e8:	6819      	ldreq	r1, [r3, #0]
 80087ea:	685b      	ldreq	r3, [r3, #4]
 80087ec:	6063      	str	r3, [r4, #4]
 80087ee:	bf04      	itt	eq
 80087f0:	1809      	addeq	r1, r1, r0
 80087f2:	6021      	streq	r1, [r4, #0]
 80087f4:	6054      	str	r4, [r2, #4]
 80087f6:	e7ca      	b.n	800878e <_free_r+0x22>
 80087f8:	bd38      	pop	{r3, r4, r5, pc}
 80087fa:	bf00      	nop
 80087fc:	20004500 	.word	0x20004500

08008800 <sbrk_aligned>:
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	4e0f      	ldr	r6, [pc, #60]	@ (8008840 <sbrk_aligned+0x40>)
 8008804:	460c      	mov	r4, r1
 8008806:	6831      	ldr	r1, [r6, #0]
 8008808:	4605      	mov	r5, r0
 800880a:	b911      	cbnz	r1, 8008812 <sbrk_aligned+0x12>
 800880c:	f000 fd7a 	bl	8009304 <_sbrk_r>
 8008810:	6030      	str	r0, [r6, #0]
 8008812:	4621      	mov	r1, r4
 8008814:	4628      	mov	r0, r5
 8008816:	f000 fd75 	bl	8009304 <_sbrk_r>
 800881a:	1c43      	adds	r3, r0, #1
 800881c:	d103      	bne.n	8008826 <sbrk_aligned+0x26>
 800881e:	f04f 34ff 	mov.w	r4, #4294967295
 8008822:	4620      	mov	r0, r4
 8008824:	bd70      	pop	{r4, r5, r6, pc}
 8008826:	1cc4      	adds	r4, r0, #3
 8008828:	f024 0403 	bic.w	r4, r4, #3
 800882c:	42a0      	cmp	r0, r4
 800882e:	d0f8      	beq.n	8008822 <sbrk_aligned+0x22>
 8008830:	1a21      	subs	r1, r4, r0
 8008832:	4628      	mov	r0, r5
 8008834:	f000 fd66 	bl	8009304 <_sbrk_r>
 8008838:	3001      	adds	r0, #1
 800883a:	d1f2      	bne.n	8008822 <sbrk_aligned+0x22>
 800883c:	e7ef      	b.n	800881e <sbrk_aligned+0x1e>
 800883e:	bf00      	nop
 8008840:	200044fc 	.word	0x200044fc

08008844 <_malloc_r>:
 8008844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008848:	1ccd      	adds	r5, r1, #3
 800884a:	f025 0503 	bic.w	r5, r5, #3
 800884e:	3508      	adds	r5, #8
 8008850:	2d0c      	cmp	r5, #12
 8008852:	bf38      	it	cc
 8008854:	250c      	movcc	r5, #12
 8008856:	2d00      	cmp	r5, #0
 8008858:	4606      	mov	r6, r0
 800885a:	db01      	blt.n	8008860 <_malloc_r+0x1c>
 800885c:	42a9      	cmp	r1, r5
 800885e:	d904      	bls.n	800886a <_malloc_r+0x26>
 8008860:	230c      	movs	r3, #12
 8008862:	6033      	str	r3, [r6, #0]
 8008864:	2000      	movs	r0, #0
 8008866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008940 <_malloc_r+0xfc>
 800886e:	f000 f869 	bl	8008944 <__malloc_lock>
 8008872:	f8d8 3000 	ldr.w	r3, [r8]
 8008876:	461c      	mov	r4, r3
 8008878:	bb44      	cbnz	r4, 80088cc <_malloc_r+0x88>
 800887a:	4629      	mov	r1, r5
 800887c:	4630      	mov	r0, r6
 800887e:	f7ff ffbf 	bl	8008800 <sbrk_aligned>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	4604      	mov	r4, r0
 8008886:	d158      	bne.n	800893a <_malloc_r+0xf6>
 8008888:	f8d8 4000 	ldr.w	r4, [r8]
 800888c:	4627      	mov	r7, r4
 800888e:	2f00      	cmp	r7, #0
 8008890:	d143      	bne.n	800891a <_malloc_r+0xd6>
 8008892:	2c00      	cmp	r4, #0
 8008894:	d04b      	beq.n	800892e <_malloc_r+0xea>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	4639      	mov	r1, r7
 800889a:	4630      	mov	r0, r6
 800889c:	eb04 0903 	add.w	r9, r4, r3
 80088a0:	f000 fd30 	bl	8009304 <_sbrk_r>
 80088a4:	4581      	cmp	r9, r0
 80088a6:	d142      	bne.n	800892e <_malloc_r+0xea>
 80088a8:	6821      	ldr	r1, [r4, #0]
 80088aa:	1a6d      	subs	r5, r5, r1
 80088ac:	4629      	mov	r1, r5
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7ff ffa6 	bl	8008800 <sbrk_aligned>
 80088b4:	3001      	adds	r0, #1
 80088b6:	d03a      	beq.n	800892e <_malloc_r+0xea>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	442b      	add	r3, r5
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	f8d8 3000 	ldr.w	r3, [r8]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	bb62      	cbnz	r2, 8008920 <_malloc_r+0xdc>
 80088c6:	f8c8 7000 	str.w	r7, [r8]
 80088ca:	e00f      	b.n	80088ec <_malloc_r+0xa8>
 80088cc:	6822      	ldr	r2, [r4, #0]
 80088ce:	1b52      	subs	r2, r2, r5
 80088d0:	d420      	bmi.n	8008914 <_malloc_r+0xd0>
 80088d2:	2a0b      	cmp	r2, #11
 80088d4:	d917      	bls.n	8008906 <_malloc_r+0xc2>
 80088d6:	1961      	adds	r1, r4, r5
 80088d8:	42a3      	cmp	r3, r4
 80088da:	6025      	str	r5, [r4, #0]
 80088dc:	bf18      	it	ne
 80088de:	6059      	strne	r1, [r3, #4]
 80088e0:	6863      	ldr	r3, [r4, #4]
 80088e2:	bf08      	it	eq
 80088e4:	f8c8 1000 	streq.w	r1, [r8]
 80088e8:	5162      	str	r2, [r4, r5]
 80088ea:	604b      	str	r3, [r1, #4]
 80088ec:	4630      	mov	r0, r6
 80088ee:	f000 f82f 	bl	8008950 <__malloc_unlock>
 80088f2:	f104 000b 	add.w	r0, r4, #11
 80088f6:	1d23      	adds	r3, r4, #4
 80088f8:	f020 0007 	bic.w	r0, r0, #7
 80088fc:	1ac2      	subs	r2, r0, r3
 80088fe:	bf1c      	itt	ne
 8008900:	1a1b      	subne	r3, r3, r0
 8008902:	50a3      	strne	r3, [r4, r2]
 8008904:	e7af      	b.n	8008866 <_malloc_r+0x22>
 8008906:	6862      	ldr	r2, [r4, #4]
 8008908:	42a3      	cmp	r3, r4
 800890a:	bf0c      	ite	eq
 800890c:	f8c8 2000 	streq.w	r2, [r8]
 8008910:	605a      	strne	r2, [r3, #4]
 8008912:	e7eb      	b.n	80088ec <_malloc_r+0xa8>
 8008914:	4623      	mov	r3, r4
 8008916:	6864      	ldr	r4, [r4, #4]
 8008918:	e7ae      	b.n	8008878 <_malloc_r+0x34>
 800891a:	463c      	mov	r4, r7
 800891c:	687f      	ldr	r7, [r7, #4]
 800891e:	e7b6      	b.n	800888e <_malloc_r+0x4a>
 8008920:	461a      	mov	r2, r3
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	42a3      	cmp	r3, r4
 8008926:	d1fb      	bne.n	8008920 <_malloc_r+0xdc>
 8008928:	2300      	movs	r3, #0
 800892a:	6053      	str	r3, [r2, #4]
 800892c:	e7de      	b.n	80088ec <_malloc_r+0xa8>
 800892e:	230c      	movs	r3, #12
 8008930:	6033      	str	r3, [r6, #0]
 8008932:	4630      	mov	r0, r6
 8008934:	f000 f80c 	bl	8008950 <__malloc_unlock>
 8008938:	e794      	b.n	8008864 <_malloc_r+0x20>
 800893a:	6005      	str	r5, [r0, #0]
 800893c:	e7d6      	b.n	80088ec <_malloc_r+0xa8>
 800893e:	bf00      	nop
 8008940:	20004500 	.word	0x20004500

08008944 <__malloc_lock>:
 8008944:	4801      	ldr	r0, [pc, #4]	@ (800894c <__malloc_lock+0x8>)
 8008946:	f7ff bf00 	b.w	800874a <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	200044f8 	.word	0x200044f8

08008950 <__malloc_unlock>:
 8008950:	4801      	ldr	r0, [pc, #4]	@ (8008958 <__malloc_unlock+0x8>)
 8008952:	f7ff befb 	b.w	800874c <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	200044f8 	.word	0x200044f8

0800895c <__ssputs_r>:
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	688e      	ldr	r6, [r1, #8]
 8008962:	461f      	mov	r7, r3
 8008964:	42be      	cmp	r6, r7
 8008966:	680b      	ldr	r3, [r1, #0]
 8008968:	4682      	mov	sl, r0
 800896a:	460c      	mov	r4, r1
 800896c:	4690      	mov	r8, r2
 800896e:	d82d      	bhi.n	80089cc <__ssputs_r+0x70>
 8008970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008978:	d026      	beq.n	80089c8 <__ssputs_r+0x6c>
 800897a:	6965      	ldr	r5, [r4, #20]
 800897c:	6909      	ldr	r1, [r1, #16]
 800897e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008982:	eba3 0901 	sub.w	r9, r3, r1
 8008986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800898a:	1c7b      	adds	r3, r7, #1
 800898c:	444b      	add	r3, r9
 800898e:	106d      	asrs	r5, r5, #1
 8008990:	429d      	cmp	r5, r3
 8008992:	bf38      	it	cc
 8008994:	461d      	movcc	r5, r3
 8008996:	0553      	lsls	r3, r2, #21
 8008998:	d527      	bpl.n	80089ea <__ssputs_r+0x8e>
 800899a:	4629      	mov	r1, r5
 800899c:	f7ff ff52 	bl	8008844 <_malloc_r>
 80089a0:	4606      	mov	r6, r0
 80089a2:	b360      	cbz	r0, 80089fe <__ssputs_r+0xa2>
 80089a4:	6921      	ldr	r1, [r4, #16]
 80089a6:	464a      	mov	r2, r9
 80089a8:	f7ff fed1 	bl	800874e <memcpy>
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089b6:	81a3      	strh	r3, [r4, #12]
 80089b8:	6126      	str	r6, [r4, #16]
 80089ba:	6165      	str	r5, [r4, #20]
 80089bc:	444e      	add	r6, r9
 80089be:	eba5 0509 	sub.w	r5, r5, r9
 80089c2:	6026      	str	r6, [r4, #0]
 80089c4:	60a5      	str	r5, [r4, #8]
 80089c6:	463e      	mov	r6, r7
 80089c8:	42be      	cmp	r6, r7
 80089ca:	d900      	bls.n	80089ce <__ssputs_r+0x72>
 80089cc:	463e      	mov	r6, r7
 80089ce:	6820      	ldr	r0, [r4, #0]
 80089d0:	4632      	mov	r2, r6
 80089d2:	4641      	mov	r1, r8
 80089d4:	f000 fc7c 	bl	80092d0 <memmove>
 80089d8:	68a3      	ldr	r3, [r4, #8]
 80089da:	1b9b      	subs	r3, r3, r6
 80089dc:	60a3      	str	r3, [r4, #8]
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	4433      	add	r3, r6
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	2000      	movs	r0, #0
 80089e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ea:	462a      	mov	r2, r5
 80089ec:	f000 fc9a 	bl	8009324 <_realloc_r>
 80089f0:	4606      	mov	r6, r0
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d1e0      	bne.n	80089b8 <__ssputs_r+0x5c>
 80089f6:	6921      	ldr	r1, [r4, #16]
 80089f8:	4650      	mov	r0, sl
 80089fa:	f7ff feb7 	bl	800876c <_free_r>
 80089fe:	230c      	movs	r3, #12
 8008a00:	f8ca 3000 	str.w	r3, [sl]
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	e7e9      	b.n	80089e6 <__ssputs_r+0x8a>
	...

08008a14 <_svfiprintf_r>:
 8008a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	4698      	mov	r8, r3
 8008a1a:	898b      	ldrh	r3, [r1, #12]
 8008a1c:	061b      	lsls	r3, r3, #24
 8008a1e:	b09d      	sub	sp, #116	@ 0x74
 8008a20:	4607      	mov	r7, r0
 8008a22:	460d      	mov	r5, r1
 8008a24:	4614      	mov	r4, r2
 8008a26:	d510      	bpl.n	8008a4a <_svfiprintf_r+0x36>
 8008a28:	690b      	ldr	r3, [r1, #16]
 8008a2a:	b973      	cbnz	r3, 8008a4a <_svfiprintf_r+0x36>
 8008a2c:	2140      	movs	r1, #64	@ 0x40
 8008a2e:	f7ff ff09 	bl	8008844 <_malloc_r>
 8008a32:	6028      	str	r0, [r5, #0]
 8008a34:	6128      	str	r0, [r5, #16]
 8008a36:	b930      	cbnz	r0, 8008a46 <_svfiprintf_r+0x32>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	b01d      	add	sp, #116	@ 0x74
 8008a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a46:	2340      	movs	r3, #64	@ 0x40
 8008a48:	616b      	str	r3, [r5, #20]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a4e:	2320      	movs	r3, #32
 8008a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a58:	2330      	movs	r3, #48	@ 0x30
 8008a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008bf8 <_svfiprintf_r+0x1e4>
 8008a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a62:	f04f 0901 	mov.w	r9, #1
 8008a66:	4623      	mov	r3, r4
 8008a68:	469a      	mov	sl, r3
 8008a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a6e:	b10a      	cbz	r2, 8008a74 <_svfiprintf_r+0x60>
 8008a70:	2a25      	cmp	r2, #37	@ 0x25
 8008a72:	d1f9      	bne.n	8008a68 <_svfiprintf_r+0x54>
 8008a74:	ebba 0b04 	subs.w	fp, sl, r4
 8008a78:	d00b      	beq.n	8008a92 <_svfiprintf_r+0x7e>
 8008a7a:	465b      	mov	r3, fp
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff ff6b 	bl	800895c <__ssputs_r>
 8008a86:	3001      	adds	r0, #1
 8008a88:	f000 80a7 	beq.w	8008bda <_svfiprintf_r+0x1c6>
 8008a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a8e:	445a      	add	r2, fp
 8008a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a92:	f89a 3000 	ldrb.w	r3, [sl]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 809f 	beq.w	8008bda <_svfiprintf_r+0x1c6>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aa6:	f10a 0a01 	add.w	sl, sl, #1
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	9307      	str	r3, [sp, #28]
 8008aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ab4:	4654      	mov	r4, sl
 8008ab6:	2205      	movs	r2, #5
 8008ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008abc:	484e      	ldr	r0, [pc, #312]	@ (8008bf8 <_svfiprintf_r+0x1e4>)
 8008abe:	f7f7 fbaf 	bl	8000220 <memchr>
 8008ac2:	9a04      	ldr	r2, [sp, #16]
 8008ac4:	b9d8      	cbnz	r0, 8008afe <_svfiprintf_r+0xea>
 8008ac6:	06d0      	lsls	r0, r2, #27
 8008ac8:	bf44      	itt	mi
 8008aca:	2320      	movmi	r3, #32
 8008acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ad0:	0711      	lsls	r1, r2, #28
 8008ad2:	bf44      	itt	mi
 8008ad4:	232b      	movmi	r3, #43	@ 0x2b
 8008ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ada:	f89a 3000 	ldrb.w	r3, [sl]
 8008ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ae0:	d015      	beq.n	8008b0e <_svfiprintf_r+0xfa>
 8008ae2:	9a07      	ldr	r2, [sp, #28]
 8008ae4:	4654      	mov	r4, sl
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f04f 0c0a 	mov.w	ip, #10
 8008aec:	4621      	mov	r1, r4
 8008aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008af2:	3b30      	subs	r3, #48	@ 0x30
 8008af4:	2b09      	cmp	r3, #9
 8008af6:	d94b      	bls.n	8008b90 <_svfiprintf_r+0x17c>
 8008af8:	b1b0      	cbz	r0, 8008b28 <_svfiprintf_r+0x114>
 8008afa:	9207      	str	r2, [sp, #28]
 8008afc:	e014      	b.n	8008b28 <_svfiprintf_r+0x114>
 8008afe:	eba0 0308 	sub.w	r3, r0, r8
 8008b02:	fa09 f303 	lsl.w	r3, r9, r3
 8008b06:	4313      	orrs	r3, r2
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	46a2      	mov	sl, r4
 8008b0c:	e7d2      	b.n	8008ab4 <_svfiprintf_r+0xa0>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	1d19      	adds	r1, r3, #4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	9103      	str	r1, [sp, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfbb      	ittet	lt
 8008b1a:	425b      	neglt	r3, r3
 8008b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b20:	9307      	strge	r3, [sp, #28]
 8008b22:	9307      	strlt	r3, [sp, #28]
 8008b24:	bfb8      	it	lt
 8008b26:	9204      	strlt	r2, [sp, #16]
 8008b28:	7823      	ldrb	r3, [r4, #0]
 8008b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b2c:	d10a      	bne.n	8008b44 <_svfiprintf_r+0x130>
 8008b2e:	7863      	ldrb	r3, [r4, #1]
 8008b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b32:	d132      	bne.n	8008b9a <_svfiprintf_r+0x186>
 8008b34:	9b03      	ldr	r3, [sp, #12]
 8008b36:	1d1a      	adds	r2, r3, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	9203      	str	r2, [sp, #12]
 8008b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b40:	3402      	adds	r4, #2
 8008b42:	9305      	str	r3, [sp, #20]
 8008b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c08 <_svfiprintf_r+0x1f4>
 8008b48:	7821      	ldrb	r1, [r4, #0]
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	4650      	mov	r0, sl
 8008b4e:	f7f7 fb67 	bl	8000220 <memchr>
 8008b52:	b138      	cbz	r0, 8008b64 <_svfiprintf_r+0x150>
 8008b54:	9b04      	ldr	r3, [sp, #16]
 8008b56:	eba0 000a 	sub.w	r0, r0, sl
 8008b5a:	2240      	movs	r2, #64	@ 0x40
 8008b5c:	4082      	lsls	r2, r0
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	3401      	adds	r4, #1
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b68:	4824      	ldr	r0, [pc, #144]	@ (8008bfc <_svfiprintf_r+0x1e8>)
 8008b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b6e:	2206      	movs	r2, #6
 8008b70:	f7f7 fb56 	bl	8000220 <memchr>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d036      	beq.n	8008be6 <_svfiprintf_r+0x1d2>
 8008b78:	4b21      	ldr	r3, [pc, #132]	@ (8008c00 <_svfiprintf_r+0x1ec>)
 8008b7a:	bb1b      	cbnz	r3, 8008bc4 <_svfiprintf_r+0x1b0>
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	3307      	adds	r3, #7
 8008b80:	f023 0307 	bic.w	r3, r3, #7
 8008b84:	3308      	adds	r3, #8
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8a:	4433      	add	r3, r6
 8008b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b8e:	e76a      	b.n	8008a66 <_svfiprintf_r+0x52>
 8008b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b94:	460c      	mov	r4, r1
 8008b96:	2001      	movs	r0, #1
 8008b98:	e7a8      	b.n	8008aec <_svfiprintf_r+0xd8>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	3401      	adds	r4, #1
 8008b9e:	9305      	str	r3, [sp, #20]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	f04f 0c0a 	mov.w	ip, #10
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bac:	3a30      	subs	r2, #48	@ 0x30
 8008bae:	2a09      	cmp	r2, #9
 8008bb0:	d903      	bls.n	8008bba <_svfiprintf_r+0x1a6>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0c6      	beq.n	8008b44 <_svfiprintf_r+0x130>
 8008bb6:	9105      	str	r1, [sp, #20]
 8008bb8:	e7c4      	b.n	8008b44 <_svfiprintf_r+0x130>
 8008bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e7f0      	b.n	8008ba6 <_svfiprintf_r+0x192>
 8008bc4:	ab03      	add	r3, sp, #12
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4b0e      	ldr	r3, [pc, #56]	@ (8008c04 <_svfiprintf_r+0x1f0>)
 8008bcc:	a904      	add	r1, sp, #16
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f3af 8000 	nop.w
 8008bd4:	1c42      	adds	r2, r0, #1
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	d1d6      	bne.n	8008b88 <_svfiprintf_r+0x174>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	065b      	lsls	r3, r3, #25
 8008bde:	f53f af2d 	bmi.w	8008a3c <_svfiprintf_r+0x28>
 8008be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008be4:	e72c      	b.n	8008a40 <_svfiprintf_r+0x2c>
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	462a      	mov	r2, r5
 8008bec:	4b05      	ldr	r3, [pc, #20]	@ (8008c04 <_svfiprintf_r+0x1f0>)
 8008bee:	a904      	add	r1, sp, #16
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f000 f9bb 	bl	8008f6c <_printf_i>
 8008bf6:	e7ed      	b.n	8008bd4 <_svfiprintf_r+0x1c0>
 8008bf8:	08009b8e 	.word	0x08009b8e
 8008bfc:	08009b98 	.word	0x08009b98
 8008c00:	00000000 	.word	0x00000000
 8008c04:	0800895d 	.word	0x0800895d
 8008c08:	08009b94 	.word	0x08009b94

08008c0c <__sfputc_r>:
 8008c0c:	6893      	ldr	r3, [r2, #8]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	b410      	push	{r4}
 8008c14:	6093      	str	r3, [r2, #8]
 8008c16:	da08      	bge.n	8008c2a <__sfputc_r+0x1e>
 8008c18:	6994      	ldr	r4, [r2, #24]
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	db01      	blt.n	8008c22 <__sfputc_r+0x16>
 8008c1e:	290a      	cmp	r1, #10
 8008c20:	d103      	bne.n	8008c2a <__sfputc_r+0x1e>
 8008c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c26:	f000 babf 	b.w	80091a8 <__swbuf_r>
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	1c58      	adds	r0, r3, #1
 8008c2e:	6010      	str	r0, [r2, #0]
 8008c30:	7019      	strb	r1, [r3, #0]
 8008c32:	4608      	mov	r0, r1
 8008c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <__sfputs_r>:
 8008c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	460f      	mov	r7, r1
 8008c40:	4614      	mov	r4, r2
 8008c42:	18d5      	adds	r5, r2, r3
 8008c44:	42ac      	cmp	r4, r5
 8008c46:	d101      	bne.n	8008c4c <__sfputs_r+0x12>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e007      	b.n	8008c5c <__sfputs_r+0x22>
 8008c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c50:	463a      	mov	r2, r7
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ffda 	bl	8008c0c <__sfputc_r>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d1f3      	bne.n	8008c44 <__sfputs_r+0xa>
 8008c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c60 <_vfiprintf_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	460d      	mov	r5, r1
 8008c66:	b09d      	sub	sp, #116	@ 0x74
 8008c68:	4614      	mov	r4, r2
 8008c6a:	4698      	mov	r8, r3
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	b118      	cbz	r0, 8008c78 <_vfiprintf_r+0x18>
 8008c70:	6a03      	ldr	r3, [r0, #32]
 8008c72:	b90b      	cbnz	r3, 8008c78 <_vfiprintf_r+0x18>
 8008c74:	f7ff fc2e 	bl	80084d4 <__sinit>
 8008c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c7a:	07d9      	lsls	r1, r3, #31
 8008c7c:	d405      	bmi.n	8008c8a <_vfiprintf_r+0x2a>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	059a      	lsls	r2, r3, #22
 8008c82:	d402      	bmi.n	8008c8a <_vfiprintf_r+0x2a>
 8008c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c86:	f7ff fd60 	bl	800874a <__retarget_lock_acquire_recursive>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	071b      	lsls	r3, r3, #28
 8008c8e:	d501      	bpl.n	8008c94 <_vfiprintf_r+0x34>
 8008c90:	692b      	ldr	r3, [r5, #16]
 8008c92:	b99b      	cbnz	r3, 8008cbc <_vfiprintf_r+0x5c>
 8008c94:	4629      	mov	r1, r5
 8008c96:	4630      	mov	r0, r6
 8008c98:	f000 fac4 	bl	8009224 <__swsetup_r>
 8008c9c:	b170      	cbz	r0, 8008cbc <_vfiprintf_r+0x5c>
 8008c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca0:	07dc      	lsls	r4, r3, #31
 8008ca2:	d504      	bpl.n	8008cae <_vfiprintf_r+0x4e>
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	b01d      	add	sp, #116	@ 0x74
 8008caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cae:	89ab      	ldrh	r3, [r5, #12]
 8008cb0:	0598      	lsls	r0, r3, #22
 8008cb2:	d4f7      	bmi.n	8008ca4 <_vfiprintf_r+0x44>
 8008cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cb6:	f7ff fd49 	bl	800874c <__retarget_lock_release_recursive>
 8008cba:	e7f3      	b.n	8008ca4 <_vfiprintf_r+0x44>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc0:	2320      	movs	r3, #32
 8008cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cca:	2330      	movs	r3, #48	@ 0x30
 8008ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e7c <_vfiprintf_r+0x21c>
 8008cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cd4:	f04f 0901 	mov.w	r9, #1
 8008cd8:	4623      	mov	r3, r4
 8008cda:	469a      	mov	sl, r3
 8008cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce0:	b10a      	cbz	r2, 8008ce6 <_vfiprintf_r+0x86>
 8008ce2:	2a25      	cmp	r2, #37	@ 0x25
 8008ce4:	d1f9      	bne.n	8008cda <_vfiprintf_r+0x7a>
 8008ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cea:	d00b      	beq.n	8008d04 <_vfiprintf_r+0xa4>
 8008cec:	465b      	mov	r3, fp
 8008cee:	4622      	mov	r2, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff ffa1 	bl	8008c3a <__sfputs_r>
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	f000 80a7 	beq.w	8008e4c <_vfiprintf_r+0x1ec>
 8008cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d00:	445a      	add	r2, fp
 8008d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d04:	f89a 3000 	ldrb.w	r3, [sl]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 809f 	beq.w	8008e4c <_vfiprintf_r+0x1ec>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f04f 32ff 	mov.w	r2, #4294967295
 8008d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d18:	f10a 0a01 	add.w	sl, sl, #1
 8008d1c:	9304      	str	r3, [sp, #16]
 8008d1e:	9307      	str	r3, [sp, #28]
 8008d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d26:	4654      	mov	r4, sl
 8008d28:	2205      	movs	r2, #5
 8008d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2e:	4853      	ldr	r0, [pc, #332]	@ (8008e7c <_vfiprintf_r+0x21c>)
 8008d30:	f7f7 fa76 	bl	8000220 <memchr>
 8008d34:	9a04      	ldr	r2, [sp, #16]
 8008d36:	b9d8      	cbnz	r0, 8008d70 <_vfiprintf_r+0x110>
 8008d38:	06d1      	lsls	r1, r2, #27
 8008d3a:	bf44      	itt	mi
 8008d3c:	2320      	movmi	r3, #32
 8008d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d42:	0713      	lsls	r3, r2, #28
 8008d44:	bf44      	itt	mi
 8008d46:	232b      	movmi	r3, #43	@ 0x2b
 8008d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d52:	d015      	beq.n	8008d80 <_vfiprintf_r+0x120>
 8008d54:	9a07      	ldr	r2, [sp, #28]
 8008d56:	4654      	mov	r4, sl
 8008d58:	2000      	movs	r0, #0
 8008d5a:	f04f 0c0a 	mov.w	ip, #10
 8008d5e:	4621      	mov	r1, r4
 8008d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d64:	3b30      	subs	r3, #48	@ 0x30
 8008d66:	2b09      	cmp	r3, #9
 8008d68:	d94b      	bls.n	8008e02 <_vfiprintf_r+0x1a2>
 8008d6a:	b1b0      	cbz	r0, 8008d9a <_vfiprintf_r+0x13a>
 8008d6c:	9207      	str	r2, [sp, #28]
 8008d6e:	e014      	b.n	8008d9a <_vfiprintf_r+0x13a>
 8008d70:	eba0 0308 	sub.w	r3, r0, r8
 8008d74:	fa09 f303 	lsl.w	r3, r9, r3
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	46a2      	mov	sl, r4
 8008d7e:	e7d2      	b.n	8008d26 <_vfiprintf_r+0xc6>
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	1d19      	adds	r1, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	9103      	str	r1, [sp, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bfbb      	ittet	lt
 8008d8c:	425b      	neglt	r3, r3
 8008d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d92:	9307      	strge	r3, [sp, #28]
 8008d94:	9307      	strlt	r3, [sp, #28]
 8008d96:	bfb8      	it	lt
 8008d98:	9204      	strlt	r2, [sp, #16]
 8008d9a:	7823      	ldrb	r3, [r4, #0]
 8008d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d9e:	d10a      	bne.n	8008db6 <_vfiprintf_r+0x156>
 8008da0:	7863      	ldrb	r3, [r4, #1]
 8008da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008da4:	d132      	bne.n	8008e0c <_vfiprintf_r+0x1ac>
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	1d1a      	adds	r2, r3, #4
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	9203      	str	r2, [sp, #12]
 8008dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008db2:	3402      	adds	r4, #2
 8008db4:	9305      	str	r3, [sp, #20]
 8008db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e8c <_vfiprintf_r+0x22c>
 8008dba:	7821      	ldrb	r1, [r4, #0]
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	4650      	mov	r0, sl
 8008dc0:	f7f7 fa2e 	bl	8000220 <memchr>
 8008dc4:	b138      	cbz	r0, 8008dd6 <_vfiprintf_r+0x176>
 8008dc6:	9b04      	ldr	r3, [sp, #16]
 8008dc8:	eba0 000a 	sub.w	r0, r0, sl
 8008dcc:	2240      	movs	r2, #64	@ 0x40
 8008dce:	4082      	lsls	r2, r0
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	3401      	adds	r4, #1
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dda:	4829      	ldr	r0, [pc, #164]	@ (8008e80 <_vfiprintf_r+0x220>)
 8008ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008de0:	2206      	movs	r2, #6
 8008de2:	f7f7 fa1d 	bl	8000220 <memchr>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d03f      	beq.n	8008e6a <_vfiprintf_r+0x20a>
 8008dea:	4b26      	ldr	r3, [pc, #152]	@ (8008e84 <_vfiprintf_r+0x224>)
 8008dec:	bb1b      	cbnz	r3, 8008e36 <_vfiprintf_r+0x1d6>
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	3307      	adds	r3, #7
 8008df2:	f023 0307 	bic.w	r3, r3, #7
 8008df6:	3308      	adds	r3, #8
 8008df8:	9303      	str	r3, [sp, #12]
 8008dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dfc:	443b      	add	r3, r7
 8008dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e00:	e76a      	b.n	8008cd8 <_vfiprintf_r+0x78>
 8008e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e06:	460c      	mov	r4, r1
 8008e08:	2001      	movs	r0, #1
 8008e0a:	e7a8      	b.n	8008d5e <_vfiprintf_r+0xfe>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	3401      	adds	r4, #1
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	4619      	mov	r1, r3
 8008e14:	f04f 0c0a 	mov.w	ip, #10
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e1e:	3a30      	subs	r2, #48	@ 0x30
 8008e20:	2a09      	cmp	r2, #9
 8008e22:	d903      	bls.n	8008e2c <_vfiprintf_r+0x1cc>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0c6      	beq.n	8008db6 <_vfiprintf_r+0x156>
 8008e28:	9105      	str	r1, [sp, #20]
 8008e2a:	e7c4      	b.n	8008db6 <_vfiprintf_r+0x156>
 8008e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e30:	4604      	mov	r4, r0
 8008e32:	2301      	movs	r3, #1
 8008e34:	e7f0      	b.n	8008e18 <_vfiprintf_r+0x1b8>
 8008e36:	ab03      	add	r3, sp, #12
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	4b12      	ldr	r3, [pc, #72]	@ (8008e88 <_vfiprintf_r+0x228>)
 8008e3e:	a904      	add	r1, sp, #16
 8008e40:	4630      	mov	r0, r6
 8008e42:	f3af 8000 	nop.w
 8008e46:	4607      	mov	r7, r0
 8008e48:	1c78      	adds	r0, r7, #1
 8008e4a:	d1d6      	bne.n	8008dfa <_vfiprintf_r+0x19a>
 8008e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e4e:	07d9      	lsls	r1, r3, #31
 8008e50:	d405      	bmi.n	8008e5e <_vfiprintf_r+0x1fe>
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	059a      	lsls	r2, r3, #22
 8008e56:	d402      	bmi.n	8008e5e <_vfiprintf_r+0x1fe>
 8008e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e5a:	f7ff fc77 	bl	800874c <__retarget_lock_release_recursive>
 8008e5e:	89ab      	ldrh	r3, [r5, #12]
 8008e60:	065b      	lsls	r3, r3, #25
 8008e62:	f53f af1f 	bmi.w	8008ca4 <_vfiprintf_r+0x44>
 8008e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e68:	e71e      	b.n	8008ca8 <_vfiprintf_r+0x48>
 8008e6a:	ab03      	add	r3, sp, #12
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	462a      	mov	r2, r5
 8008e70:	4b05      	ldr	r3, [pc, #20]	@ (8008e88 <_vfiprintf_r+0x228>)
 8008e72:	a904      	add	r1, sp, #16
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f879 	bl	8008f6c <_printf_i>
 8008e7a:	e7e4      	b.n	8008e46 <_vfiprintf_r+0x1e6>
 8008e7c:	08009b8e 	.word	0x08009b8e
 8008e80:	08009b98 	.word	0x08009b98
 8008e84:	00000000 	.word	0x00000000
 8008e88:	08008c3b 	.word	0x08008c3b
 8008e8c:	08009b94 	.word	0x08009b94

08008e90 <_printf_common>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	4616      	mov	r6, r2
 8008e96:	4698      	mov	r8, r3
 8008e98:	688a      	ldr	r2, [r1, #8]
 8008e9a:	690b      	ldr	r3, [r1, #16]
 8008e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	bfb8      	it	lt
 8008ea4:	4613      	movlt	r3, r2
 8008ea6:	6033      	str	r3, [r6, #0]
 8008ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008eac:	4607      	mov	r7, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	b10a      	cbz	r2, 8008eb6 <_printf_common+0x26>
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	6033      	str	r3, [r6, #0]
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	0699      	lsls	r1, r3, #26
 8008eba:	bf42      	ittt	mi
 8008ebc:	6833      	ldrmi	r3, [r6, #0]
 8008ebe:	3302      	addmi	r3, #2
 8008ec0:	6033      	strmi	r3, [r6, #0]
 8008ec2:	6825      	ldr	r5, [r4, #0]
 8008ec4:	f015 0506 	ands.w	r5, r5, #6
 8008ec8:	d106      	bne.n	8008ed8 <_printf_common+0x48>
 8008eca:	f104 0a19 	add.w	sl, r4, #25
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	6832      	ldr	r2, [r6, #0]
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	42ab      	cmp	r3, r5
 8008ed6:	dc26      	bgt.n	8008f26 <_printf_common+0x96>
 8008ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008edc:	6822      	ldr	r2, [r4, #0]
 8008ede:	3b00      	subs	r3, #0
 8008ee0:	bf18      	it	ne
 8008ee2:	2301      	movne	r3, #1
 8008ee4:	0692      	lsls	r2, r2, #26
 8008ee6:	d42b      	bmi.n	8008f40 <_printf_common+0xb0>
 8008ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008eec:	4641      	mov	r1, r8
 8008eee:	4638      	mov	r0, r7
 8008ef0:	47c8      	blx	r9
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	d01e      	beq.n	8008f34 <_printf_common+0xa4>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	6922      	ldr	r2, [r4, #16]
 8008efa:	f003 0306 	and.w	r3, r3, #6
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	bf02      	ittt	eq
 8008f02:	68e5      	ldreq	r5, [r4, #12]
 8008f04:	6833      	ldreq	r3, [r6, #0]
 8008f06:	1aed      	subeq	r5, r5, r3
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	bf0c      	ite	eq
 8008f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f10:	2500      	movne	r5, #0
 8008f12:	4293      	cmp	r3, r2
 8008f14:	bfc4      	itt	gt
 8008f16:	1a9b      	subgt	r3, r3, r2
 8008f18:	18ed      	addgt	r5, r5, r3
 8008f1a:	2600      	movs	r6, #0
 8008f1c:	341a      	adds	r4, #26
 8008f1e:	42b5      	cmp	r5, r6
 8008f20:	d11a      	bne.n	8008f58 <_printf_common+0xc8>
 8008f22:	2000      	movs	r0, #0
 8008f24:	e008      	b.n	8008f38 <_printf_common+0xa8>
 8008f26:	2301      	movs	r3, #1
 8008f28:	4652      	mov	r2, sl
 8008f2a:	4641      	mov	r1, r8
 8008f2c:	4638      	mov	r0, r7
 8008f2e:	47c8      	blx	r9
 8008f30:	3001      	adds	r0, #1
 8008f32:	d103      	bne.n	8008f3c <_printf_common+0xac>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	e7c6      	b.n	8008ece <_printf_common+0x3e>
 8008f40:	18e1      	adds	r1, r4, r3
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	2030      	movs	r0, #48	@ 0x30
 8008f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f4a:	4422      	add	r2, r4
 8008f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f54:	3302      	adds	r3, #2
 8008f56:	e7c7      	b.n	8008ee8 <_printf_common+0x58>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	4641      	mov	r1, r8
 8008f5e:	4638      	mov	r0, r7
 8008f60:	47c8      	blx	r9
 8008f62:	3001      	adds	r0, #1
 8008f64:	d0e6      	beq.n	8008f34 <_printf_common+0xa4>
 8008f66:	3601      	adds	r6, #1
 8008f68:	e7d9      	b.n	8008f1e <_printf_common+0x8e>
	...

08008f6c <_printf_i>:
 8008f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	7e0f      	ldrb	r7, [r1, #24]
 8008f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f74:	2f78      	cmp	r7, #120	@ 0x78
 8008f76:	4691      	mov	r9, r2
 8008f78:	4680      	mov	r8, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	469a      	mov	sl, r3
 8008f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f82:	d807      	bhi.n	8008f94 <_printf_i+0x28>
 8008f84:	2f62      	cmp	r7, #98	@ 0x62
 8008f86:	d80a      	bhi.n	8008f9e <_printf_i+0x32>
 8008f88:	2f00      	cmp	r7, #0
 8008f8a:	f000 80d1 	beq.w	8009130 <_printf_i+0x1c4>
 8008f8e:	2f58      	cmp	r7, #88	@ 0x58
 8008f90:	f000 80b8 	beq.w	8009104 <_printf_i+0x198>
 8008f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f9c:	e03a      	b.n	8009014 <_printf_i+0xa8>
 8008f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fa2:	2b15      	cmp	r3, #21
 8008fa4:	d8f6      	bhi.n	8008f94 <_printf_i+0x28>
 8008fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8008fac <_printf_i+0x40>)
 8008fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fac:	08009005 	.word	0x08009005
 8008fb0:	08009019 	.word	0x08009019
 8008fb4:	08008f95 	.word	0x08008f95
 8008fb8:	08008f95 	.word	0x08008f95
 8008fbc:	08008f95 	.word	0x08008f95
 8008fc0:	08008f95 	.word	0x08008f95
 8008fc4:	08009019 	.word	0x08009019
 8008fc8:	08008f95 	.word	0x08008f95
 8008fcc:	08008f95 	.word	0x08008f95
 8008fd0:	08008f95 	.word	0x08008f95
 8008fd4:	08008f95 	.word	0x08008f95
 8008fd8:	08009117 	.word	0x08009117
 8008fdc:	08009043 	.word	0x08009043
 8008fe0:	080090d1 	.word	0x080090d1
 8008fe4:	08008f95 	.word	0x08008f95
 8008fe8:	08008f95 	.word	0x08008f95
 8008fec:	08009139 	.word	0x08009139
 8008ff0:	08008f95 	.word	0x08008f95
 8008ff4:	08009043 	.word	0x08009043
 8008ff8:	08008f95 	.word	0x08008f95
 8008ffc:	08008f95 	.word	0x08008f95
 8009000:	080090d9 	.word	0x080090d9
 8009004:	6833      	ldr	r3, [r6, #0]
 8009006:	1d1a      	adds	r2, r3, #4
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6032      	str	r2, [r6, #0]
 800900c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009014:	2301      	movs	r3, #1
 8009016:	e09c      	b.n	8009152 <_printf_i+0x1e6>
 8009018:	6833      	ldr	r3, [r6, #0]
 800901a:	6820      	ldr	r0, [r4, #0]
 800901c:	1d19      	adds	r1, r3, #4
 800901e:	6031      	str	r1, [r6, #0]
 8009020:	0606      	lsls	r6, r0, #24
 8009022:	d501      	bpl.n	8009028 <_printf_i+0xbc>
 8009024:	681d      	ldr	r5, [r3, #0]
 8009026:	e003      	b.n	8009030 <_printf_i+0xc4>
 8009028:	0645      	lsls	r5, r0, #25
 800902a:	d5fb      	bpl.n	8009024 <_printf_i+0xb8>
 800902c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009030:	2d00      	cmp	r5, #0
 8009032:	da03      	bge.n	800903c <_printf_i+0xd0>
 8009034:	232d      	movs	r3, #45	@ 0x2d
 8009036:	426d      	negs	r5, r5
 8009038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800903c:	4858      	ldr	r0, [pc, #352]	@ (80091a0 <_printf_i+0x234>)
 800903e:	230a      	movs	r3, #10
 8009040:	e011      	b.n	8009066 <_printf_i+0xfa>
 8009042:	6821      	ldr	r1, [r4, #0]
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	0608      	lsls	r0, r1, #24
 8009048:	f853 5b04 	ldr.w	r5, [r3], #4
 800904c:	d402      	bmi.n	8009054 <_printf_i+0xe8>
 800904e:	0649      	lsls	r1, r1, #25
 8009050:	bf48      	it	mi
 8009052:	b2ad      	uxthmi	r5, r5
 8009054:	2f6f      	cmp	r7, #111	@ 0x6f
 8009056:	4852      	ldr	r0, [pc, #328]	@ (80091a0 <_printf_i+0x234>)
 8009058:	6033      	str	r3, [r6, #0]
 800905a:	bf14      	ite	ne
 800905c:	230a      	movne	r3, #10
 800905e:	2308      	moveq	r3, #8
 8009060:	2100      	movs	r1, #0
 8009062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009066:	6866      	ldr	r6, [r4, #4]
 8009068:	60a6      	str	r6, [r4, #8]
 800906a:	2e00      	cmp	r6, #0
 800906c:	db05      	blt.n	800907a <_printf_i+0x10e>
 800906e:	6821      	ldr	r1, [r4, #0]
 8009070:	432e      	orrs	r6, r5
 8009072:	f021 0104 	bic.w	r1, r1, #4
 8009076:	6021      	str	r1, [r4, #0]
 8009078:	d04b      	beq.n	8009112 <_printf_i+0x1a6>
 800907a:	4616      	mov	r6, r2
 800907c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009080:	fb03 5711 	mls	r7, r3, r1, r5
 8009084:	5dc7      	ldrb	r7, [r0, r7]
 8009086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800908a:	462f      	mov	r7, r5
 800908c:	42bb      	cmp	r3, r7
 800908e:	460d      	mov	r5, r1
 8009090:	d9f4      	bls.n	800907c <_printf_i+0x110>
 8009092:	2b08      	cmp	r3, #8
 8009094:	d10b      	bne.n	80090ae <_printf_i+0x142>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	07df      	lsls	r7, r3, #31
 800909a:	d508      	bpl.n	80090ae <_printf_i+0x142>
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	6861      	ldr	r1, [r4, #4]
 80090a0:	4299      	cmp	r1, r3
 80090a2:	bfde      	ittt	le
 80090a4:	2330      	movle	r3, #48	@ 0x30
 80090a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090ae:	1b92      	subs	r2, r2, r6
 80090b0:	6122      	str	r2, [r4, #16]
 80090b2:	f8cd a000 	str.w	sl, [sp]
 80090b6:	464b      	mov	r3, r9
 80090b8:	aa03      	add	r2, sp, #12
 80090ba:	4621      	mov	r1, r4
 80090bc:	4640      	mov	r0, r8
 80090be:	f7ff fee7 	bl	8008e90 <_printf_common>
 80090c2:	3001      	adds	r0, #1
 80090c4:	d14a      	bne.n	800915c <_printf_i+0x1f0>
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	b004      	add	sp, #16
 80090cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	f043 0320 	orr.w	r3, r3, #32
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	4832      	ldr	r0, [pc, #200]	@ (80091a4 <_printf_i+0x238>)
 80090da:	2778      	movs	r7, #120	@ 0x78
 80090dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	6831      	ldr	r1, [r6, #0]
 80090e4:	061f      	lsls	r7, r3, #24
 80090e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80090ea:	d402      	bmi.n	80090f2 <_printf_i+0x186>
 80090ec:	065f      	lsls	r7, r3, #25
 80090ee:	bf48      	it	mi
 80090f0:	b2ad      	uxthmi	r5, r5
 80090f2:	6031      	str	r1, [r6, #0]
 80090f4:	07d9      	lsls	r1, r3, #31
 80090f6:	bf44      	itt	mi
 80090f8:	f043 0320 	orrmi.w	r3, r3, #32
 80090fc:	6023      	strmi	r3, [r4, #0]
 80090fe:	b11d      	cbz	r5, 8009108 <_printf_i+0x19c>
 8009100:	2310      	movs	r3, #16
 8009102:	e7ad      	b.n	8009060 <_printf_i+0xf4>
 8009104:	4826      	ldr	r0, [pc, #152]	@ (80091a0 <_printf_i+0x234>)
 8009106:	e7e9      	b.n	80090dc <_printf_i+0x170>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	f023 0320 	bic.w	r3, r3, #32
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	e7f6      	b.n	8009100 <_printf_i+0x194>
 8009112:	4616      	mov	r6, r2
 8009114:	e7bd      	b.n	8009092 <_printf_i+0x126>
 8009116:	6833      	ldr	r3, [r6, #0]
 8009118:	6825      	ldr	r5, [r4, #0]
 800911a:	6961      	ldr	r1, [r4, #20]
 800911c:	1d18      	adds	r0, r3, #4
 800911e:	6030      	str	r0, [r6, #0]
 8009120:	062e      	lsls	r6, r5, #24
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	d501      	bpl.n	800912a <_printf_i+0x1be>
 8009126:	6019      	str	r1, [r3, #0]
 8009128:	e002      	b.n	8009130 <_printf_i+0x1c4>
 800912a:	0668      	lsls	r0, r5, #25
 800912c:	d5fb      	bpl.n	8009126 <_printf_i+0x1ba>
 800912e:	8019      	strh	r1, [r3, #0]
 8009130:	2300      	movs	r3, #0
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	4616      	mov	r6, r2
 8009136:	e7bc      	b.n	80090b2 <_printf_i+0x146>
 8009138:	6833      	ldr	r3, [r6, #0]
 800913a:	1d1a      	adds	r2, r3, #4
 800913c:	6032      	str	r2, [r6, #0]
 800913e:	681e      	ldr	r6, [r3, #0]
 8009140:	6862      	ldr	r2, [r4, #4]
 8009142:	2100      	movs	r1, #0
 8009144:	4630      	mov	r0, r6
 8009146:	f7f7 f86b 	bl	8000220 <memchr>
 800914a:	b108      	cbz	r0, 8009150 <_printf_i+0x1e4>
 800914c:	1b80      	subs	r0, r0, r6
 800914e:	6060      	str	r0, [r4, #4]
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	2300      	movs	r3, #0
 8009156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800915a:	e7aa      	b.n	80090b2 <_printf_i+0x146>
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	4632      	mov	r2, r6
 8009160:	4649      	mov	r1, r9
 8009162:	4640      	mov	r0, r8
 8009164:	47d0      	blx	sl
 8009166:	3001      	adds	r0, #1
 8009168:	d0ad      	beq.n	80090c6 <_printf_i+0x15a>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	079b      	lsls	r3, r3, #30
 800916e:	d413      	bmi.n	8009198 <_printf_i+0x22c>
 8009170:	68e0      	ldr	r0, [r4, #12]
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	4298      	cmp	r0, r3
 8009176:	bfb8      	it	lt
 8009178:	4618      	movlt	r0, r3
 800917a:	e7a6      	b.n	80090ca <_printf_i+0x15e>
 800917c:	2301      	movs	r3, #1
 800917e:	4632      	mov	r2, r6
 8009180:	4649      	mov	r1, r9
 8009182:	4640      	mov	r0, r8
 8009184:	47d0      	blx	sl
 8009186:	3001      	adds	r0, #1
 8009188:	d09d      	beq.n	80090c6 <_printf_i+0x15a>
 800918a:	3501      	adds	r5, #1
 800918c:	68e3      	ldr	r3, [r4, #12]
 800918e:	9903      	ldr	r1, [sp, #12]
 8009190:	1a5b      	subs	r3, r3, r1
 8009192:	42ab      	cmp	r3, r5
 8009194:	dcf2      	bgt.n	800917c <_printf_i+0x210>
 8009196:	e7eb      	b.n	8009170 <_printf_i+0x204>
 8009198:	2500      	movs	r5, #0
 800919a:	f104 0619 	add.w	r6, r4, #25
 800919e:	e7f5      	b.n	800918c <_printf_i+0x220>
 80091a0:	08009b9f 	.word	0x08009b9f
 80091a4:	08009bb0 	.word	0x08009bb0

080091a8 <__swbuf_r>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	460e      	mov	r6, r1
 80091ac:	4614      	mov	r4, r2
 80091ae:	4605      	mov	r5, r0
 80091b0:	b118      	cbz	r0, 80091ba <__swbuf_r+0x12>
 80091b2:	6a03      	ldr	r3, [r0, #32]
 80091b4:	b90b      	cbnz	r3, 80091ba <__swbuf_r+0x12>
 80091b6:	f7ff f98d 	bl	80084d4 <__sinit>
 80091ba:	69a3      	ldr	r3, [r4, #24]
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	071a      	lsls	r2, r3, #28
 80091c2:	d501      	bpl.n	80091c8 <__swbuf_r+0x20>
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	b943      	cbnz	r3, 80091da <__swbuf_r+0x32>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f82a 	bl	8009224 <__swsetup_r>
 80091d0:	b118      	cbz	r0, 80091da <__swbuf_r+0x32>
 80091d2:	f04f 37ff 	mov.w	r7, #4294967295
 80091d6:	4638      	mov	r0, r7
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	6922      	ldr	r2, [r4, #16]
 80091de:	1a98      	subs	r0, r3, r2
 80091e0:	6963      	ldr	r3, [r4, #20]
 80091e2:	b2f6      	uxtb	r6, r6
 80091e4:	4283      	cmp	r3, r0
 80091e6:	4637      	mov	r7, r6
 80091e8:	dc05      	bgt.n	80091f6 <__swbuf_r+0x4e>
 80091ea:	4621      	mov	r1, r4
 80091ec:	4628      	mov	r0, r5
 80091ee:	f7ff f8a9 	bl	8008344 <_fflush_r>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d1ed      	bne.n	80091d2 <__swbuf_r+0x2a>
 80091f6:	68a3      	ldr	r3, [r4, #8]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	60a3      	str	r3, [r4, #8]
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	6022      	str	r2, [r4, #0]
 8009202:	701e      	strb	r6, [r3, #0]
 8009204:	6962      	ldr	r2, [r4, #20]
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	429a      	cmp	r2, r3
 800920a:	d004      	beq.n	8009216 <__swbuf_r+0x6e>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	07db      	lsls	r3, r3, #31
 8009210:	d5e1      	bpl.n	80091d6 <__swbuf_r+0x2e>
 8009212:	2e0a      	cmp	r6, #10
 8009214:	d1df      	bne.n	80091d6 <__swbuf_r+0x2e>
 8009216:	4621      	mov	r1, r4
 8009218:	4628      	mov	r0, r5
 800921a:	f7ff f893 	bl	8008344 <_fflush_r>
 800921e:	2800      	cmp	r0, #0
 8009220:	d0d9      	beq.n	80091d6 <__swbuf_r+0x2e>
 8009222:	e7d6      	b.n	80091d2 <__swbuf_r+0x2a>

08009224 <__swsetup_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4b29      	ldr	r3, [pc, #164]	@ (80092cc <__swsetup_r+0xa8>)
 8009228:	4605      	mov	r5, r0
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	460c      	mov	r4, r1
 800922e:	b118      	cbz	r0, 8009238 <__swsetup_r+0x14>
 8009230:	6a03      	ldr	r3, [r0, #32]
 8009232:	b90b      	cbnz	r3, 8009238 <__swsetup_r+0x14>
 8009234:	f7ff f94e 	bl	80084d4 <__sinit>
 8009238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923c:	0719      	lsls	r1, r3, #28
 800923e:	d422      	bmi.n	8009286 <__swsetup_r+0x62>
 8009240:	06da      	lsls	r2, r3, #27
 8009242:	d407      	bmi.n	8009254 <__swsetup_r+0x30>
 8009244:	2209      	movs	r2, #9
 8009246:	602a      	str	r2, [r5, #0]
 8009248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800924c:	81a3      	strh	r3, [r4, #12]
 800924e:	f04f 30ff 	mov.w	r0, #4294967295
 8009252:	e033      	b.n	80092bc <__swsetup_r+0x98>
 8009254:	0758      	lsls	r0, r3, #29
 8009256:	d512      	bpl.n	800927e <__swsetup_r+0x5a>
 8009258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800925a:	b141      	cbz	r1, 800926e <__swsetup_r+0x4a>
 800925c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d002      	beq.n	800926a <__swsetup_r+0x46>
 8009264:	4628      	mov	r0, r5
 8009266:	f7ff fa81 	bl	800876c <_free_r>
 800926a:	2300      	movs	r3, #0
 800926c:	6363      	str	r3, [r4, #52]	@ 0x34
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	2300      	movs	r3, #0
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0308 	orr.w	r3, r3, #8
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	b94b      	cbnz	r3, 800929e <__swsetup_r+0x7a>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009294:	d003      	beq.n	800929e <__swsetup_r+0x7a>
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f000 f897 	bl	80093cc <__smakebuf_r>
 800929e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a2:	f013 0201 	ands.w	r2, r3, #1
 80092a6:	d00a      	beq.n	80092be <__swsetup_r+0x9a>
 80092a8:	2200      	movs	r2, #0
 80092aa:	60a2      	str	r2, [r4, #8]
 80092ac:	6962      	ldr	r2, [r4, #20]
 80092ae:	4252      	negs	r2, r2
 80092b0:	61a2      	str	r2, [r4, #24]
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	b942      	cbnz	r2, 80092c8 <__swsetup_r+0xa4>
 80092b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092ba:	d1c5      	bne.n	8009248 <__swsetup_r+0x24>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	0799      	lsls	r1, r3, #30
 80092c0:	bf58      	it	pl
 80092c2:	6962      	ldrpl	r2, [r4, #20]
 80092c4:	60a2      	str	r2, [r4, #8]
 80092c6:	e7f4      	b.n	80092b2 <__swsetup_r+0x8e>
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7f7      	b.n	80092bc <__swsetup_r+0x98>
 80092cc:	2000003c 	.word	0x2000003c

080092d0 <memmove>:
 80092d0:	4288      	cmp	r0, r1
 80092d2:	b510      	push	{r4, lr}
 80092d4:	eb01 0402 	add.w	r4, r1, r2
 80092d8:	d902      	bls.n	80092e0 <memmove+0x10>
 80092da:	4284      	cmp	r4, r0
 80092dc:	4623      	mov	r3, r4
 80092de:	d807      	bhi.n	80092f0 <memmove+0x20>
 80092e0:	1e43      	subs	r3, r0, #1
 80092e2:	42a1      	cmp	r1, r4
 80092e4:	d008      	beq.n	80092f8 <memmove+0x28>
 80092e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092ee:	e7f8      	b.n	80092e2 <memmove+0x12>
 80092f0:	4402      	add	r2, r0
 80092f2:	4601      	mov	r1, r0
 80092f4:	428a      	cmp	r2, r1
 80092f6:	d100      	bne.n	80092fa <memmove+0x2a>
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009302:	e7f7      	b.n	80092f4 <memmove+0x24>

08009304 <_sbrk_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d06      	ldr	r5, [pc, #24]	@ (8009320 <_sbrk_r+0x1c>)
 8009308:	2300      	movs	r3, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	602b      	str	r3, [r5, #0]
 8009310:	f7f7 fce2 	bl	8000cd8 <_sbrk>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_sbrk_r+0x1a>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_sbrk_r+0x1a>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	200044f4 	.word	0x200044f4

08009324 <_realloc_r>:
 8009324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009328:	4607      	mov	r7, r0
 800932a:	4614      	mov	r4, r2
 800932c:	460d      	mov	r5, r1
 800932e:	b921      	cbnz	r1, 800933a <_realloc_r+0x16>
 8009330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009334:	4611      	mov	r1, r2
 8009336:	f7ff ba85 	b.w	8008844 <_malloc_r>
 800933a:	b92a      	cbnz	r2, 8009348 <_realloc_r+0x24>
 800933c:	f7ff fa16 	bl	800876c <_free_r>
 8009340:	4625      	mov	r5, r4
 8009342:	4628      	mov	r0, r5
 8009344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009348:	f000 f89e 	bl	8009488 <_malloc_usable_size_r>
 800934c:	4284      	cmp	r4, r0
 800934e:	4606      	mov	r6, r0
 8009350:	d802      	bhi.n	8009358 <_realloc_r+0x34>
 8009352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009356:	d8f4      	bhi.n	8009342 <_realloc_r+0x1e>
 8009358:	4621      	mov	r1, r4
 800935a:	4638      	mov	r0, r7
 800935c:	f7ff fa72 	bl	8008844 <_malloc_r>
 8009360:	4680      	mov	r8, r0
 8009362:	b908      	cbnz	r0, 8009368 <_realloc_r+0x44>
 8009364:	4645      	mov	r5, r8
 8009366:	e7ec      	b.n	8009342 <_realloc_r+0x1e>
 8009368:	42b4      	cmp	r4, r6
 800936a:	4622      	mov	r2, r4
 800936c:	4629      	mov	r1, r5
 800936e:	bf28      	it	cs
 8009370:	4632      	movcs	r2, r6
 8009372:	f7ff f9ec 	bl	800874e <memcpy>
 8009376:	4629      	mov	r1, r5
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff f9f7 	bl	800876c <_free_r>
 800937e:	e7f1      	b.n	8009364 <_realloc_r+0x40>

08009380 <__swhatbuf_r>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	460c      	mov	r4, r1
 8009384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009388:	2900      	cmp	r1, #0
 800938a:	b096      	sub	sp, #88	@ 0x58
 800938c:	4615      	mov	r5, r2
 800938e:	461e      	mov	r6, r3
 8009390:	da0d      	bge.n	80093ae <__swhatbuf_r+0x2e>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009398:	f04f 0100 	mov.w	r1, #0
 800939c:	bf14      	ite	ne
 800939e:	2340      	movne	r3, #64	@ 0x40
 80093a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093a4:	2000      	movs	r0, #0
 80093a6:	6031      	str	r1, [r6, #0]
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	b016      	add	sp, #88	@ 0x58
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
 80093ae:	466a      	mov	r2, sp
 80093b0:	f000 f848 	bl	8009444 <_fstat_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	dbec      	blt.n	8009392 <__swhatbuf_r+0x12>
 80093b8:	9901      	ldr	r1, [sp, #4]
 80093ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093c2:	4259      	negs	r1, r3
 80093c4:	4159      	adcs	r1, r3
 80093c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093ca:	e7eb      	b.n	80093a4 <__swhatbuf_r+0x24>

080093cc <__smakebuf_r>:
 80093cc:	898b      	ldrh	r3, [r1, #12]
 80093ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093d0:	079d      	lsls	r5, r3, #30
 80093d2:	4606      	mov	r6, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	d507      	bpl.n	80093e8 <__smakebuf_r+0x1c>
 80093d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	2301      	movs	r3, #1
 80093e2:	6163      	str	r3, [r4, #20]
 80093e4:	b003      	add	sp, #12
 80093e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e8:	ab01      	add	r3, sp, #4
 80093ea:	466a      	mov	r2, sp
 80093ec:	f7ff ffc8 	bl	8009380 <__swhatbuf_r>
 80093f0:	9f00      	ldr	r7, [sp, #0]
 80093f2:	4605      	mov	r5, r0
 80093f4:	4639      	mov	r1, r7
 80093f6:	4630      	mov	r0, r6
 80093f8:	f7ff fa24 	bl	8008844 <_malloc_r>
 80093fc:	b948      	cbnz	r0, 8009412 <__smakebuf_r+0x46>
 80093fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009402:	059a      	lsls	r2, r3, #22
 8009404:	d4ee      	bmi.n	80093e4 <__smakebuf_r+0x18>
 8009406:	f023 0303 	bic.w	r3, r3, #3
 800940a:	f043 0302 	orr.w	r3, r3, #2
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	e7e2      	b.n	80093d8 <__smakebuf_r+0xc>
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	6020      	str	r0, [r4, #0]
 8009416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	9b01      	ldr	r3, [sp, #4]
 800941e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009422:	b15b      	cbz	r3, 800943c <__smakebuf_r+0x70>
 8009424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009428:	4630      	mov	r0, r6
 800942a:	f000 f81d 	bl	8009468 <_isatty_r>
 800942e:	b128      	cbz	r0, 800943c <__smakebuf_r+0x70>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f023 0303 	bic.w	r3, r3, #3
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	81a3      	strh	r3, [r4, #12]
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	431d      	orrs	r5, r3
 8009440:	81a5      	strh	r5, [r4, #12]
 8009442:	e7cf      	b.n	80093e4 <__smakebuf_r+0x18>

08009444 <_fstat_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	@ (8009464 <_fstat_r+0x20>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	4611      	mov	r1, r2
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	f7fe fd70 	bl	8007f36 <_fstat>
 8009456:	1c43      	adds	r3, r0, #1
 8009458:	d102      	bne.n	8009460 <_fstat_r+0x1c>
 800945a:	682b      	ldr	r3, [r5, #0]
 800945c:	b103      	cbz	r3, 8009460 <_fstat_r+0x1c>
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	bd38      	pop	{r3, r4, r5, pc}
 8009462:	bf00      	nop
 8009464:	200044f4 	.word	0x200044f4

08009468 <_isatty_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d06      	ldr	r5, [pc, #24]	@ (8009484 <_isatty_r+0x1c>)
 800946c:	2300      	movs	r3, #0
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	602b      	str	r3, [r5, #0]
 8009474:	f7fe fec4 	bl	8008200 <_isatty>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_isatty_r+0x1a>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_isatty_r+0x1a>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	200044f4 	.word	0x200044f4

08009488 <_malloc_usable_size_r>:
 8009488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948c:	1f18      	subs	r0, r3, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfbc      	itt	lt
 8009492:	580b      	ldrlt	r3, [r1, r0]
 8009494:	18c0      	addlt	r0, r0, r3
 8009496:	4770      	bx	lr

08009498 <_init>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr

080094a4 <_fini>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	bf00      	nop
 80094a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094aa:	bc08      	pop	{r3}
 80094ac:	469e      	mov	lr, r3
 80094ae:	4770      	bx	lr
