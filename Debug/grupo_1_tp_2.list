
grupo_1_tp_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fa8  08007fa8  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fa8  08007fa8  00008fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb0  08007fb0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb0  08007fb0  00008fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fb4  08007fb4  00008fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007fb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043b8  20000060  08008018  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004418  08008018  00009418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001783f  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9d  00000000  00000000  000208cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00024670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107f  00000000  00000000  00025bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d6d  00000000  00000000  00026c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e38  00000000  00000000  0004b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb82  00000000  00000000  000657f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d38  00000000  00000000  001413bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001470f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e5c 	.word	0x08007e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007e5c 	.word	0x08007e5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationIdleHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c
 800061c:	200000e0 	.word	0x200000e0

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fbc0 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f814 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f916 	bl	800085c <MX_GPIO_Init>
  MX_DMA_Init();
 8000630:	f000 f8f4 	bl	800081c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000634:	f000 f8c8 	bl	80007c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000638:	f000 f87a 	bl	8000730 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <main+0x30>)
 800063e:	f002 f8f1 	bl	8002824 <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 8000642:	f006 fc69 	bl	8006f18 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f003 fd7f 	bl	8004148 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0x2a>
 800064e:	bf00      	nop
 8000650:	200002e0 	.word	0x200002e0

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	@ 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 ff7c 	bl	8007560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	@ (800072c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a0:	4a22      	ldr	r2, [pc, #136]	@ (800072c <SystemClock_Config+0xd8>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	@ (800072c <SystemClock_Config+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fdb0 	bl	8002248 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ee:	f000 f959 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fa1e 	bl	8001b50 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071a:	f000 f943 	bl	80009a4 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000762:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000766:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_TIM2_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000774:	4813      	ldr	r0, [pc, #76]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000776:	f002 f805 	bl	8002784 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000780:	f000 f910 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_TIM2_Init+0x94>)
 8000792:	f002 f9a7 	bl	8002ae4 <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 f902 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_TIM2_Init+0x94>)
 80007ae:	f002 fbc9 	bl	8002f44 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007b8:	f000 f8f4 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200002e0 	.word	0x200002e0

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f002 fc30 	bl	8003064 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f8cb 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000328 	.word	0x20000328
 8000818:	40004400 	.word	0x40004400

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_DMA_Init+0x3c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <MX_DMA_Init+0x3c>)
 800082c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_DMA_Init+0x3c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	2011      	movs	r0, #17
 8000844:	f000 fbaa 	bl	8000f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000848:	2011      	movs	r0, #17
 800084a:	f000 fbc3 	bl	8000fd4 <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a2c      	ldr	r2, [pc, #176]	@ (800092c <MX_GPIO_Init+0xd0>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a25      	ldr	r2, [pc, #148]	@ (800092c <MX_GPIO_Init+0xd0>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4812      	ldr	r0, [pc, #72]	@ (8000930 <MX_GPIO_Init+0xd4>)
 80008e8:	f001 f918 	bl	8001b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MX_GPIO_Init+0xd8>)
 8000904:	f000 ff76 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000908:	2320      	movs	r3, #32
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_GPIO_Init+0xd4>)
 8000920:	f000 ff68 	bl	80017f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800

08000938 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <configureTimerForRunTimeStats+0x14>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	200003d0 	.word	0x200003d0

08000950 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <getRunTimeCounterValue+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200003d0 	.word	0x200003d0

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a09      	ldr	r2, [pc, #36]	@ (800099c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 fa37 	bl	8000dec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000986:	d104      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000990:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40010000 	.word	0x40010000
 80009a0:	200003d0 	.word	0x200003d0

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_MspInit+0x54>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a11      	ldr	r2, [pc, #68]	@ (8000a04 <HAL_MspInit+0x54>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <HAL_MspInit+0x54>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <HAL_MspInit+0x54>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	210f      	movs	r1, #15
 80009f2:	f06f 0001 	mvn.w	r0, #1
 80009f6:	f000 fad1 	bl	8000f9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a18:	d115      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <HAL_TIM_Base_MspInit+0x48>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <HAL_TIM_Base_MspInit+0x48>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_TIM_Base_MspInit+0x48>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	201c      	movs	r0, #28
 8000a3c:	f000 faae 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a40:	201c      	movs	r0, #28
 8000a42:	f000 fac7 	bl	8000fd4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a34      	ldr	r2, [pc, #208]	@ (8000b44 <HAL_UART_MspInit+0xf0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d161      	bne.n	8000b3a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b33      	ldr	r3, [pc, #204]	@ (8000b48 <HAL_UART_MspInit+0xf4>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a32      	ldr	r2, [pc, #200]	@ (8000b48 <HAL_UART_MspInit+0xf4>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b30      	ldr	r3, [pc, #192]	@ (8000b48 <HAL_UART_MspInit+0xf4>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <HAL_UART_MspInit+0xf4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000b48 <HAL_UART_MspInit+0xf4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <HAL_UART_MspInit+0xf4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4820      	ldr	r0, [pc, #128]	@ (8000b4c <HAL_UART_MspInit+0xf8>)
 8000aca:	f000 fe93 	bl	80017f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ace:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000ad0:	4a20      	ldr	r2, [pc, #128]	@ (8000b54 <HAL_UART_MspInit+0x100>)
 8000ad2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000ad6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ada:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000ade:	2240      	movs	r2, #64	@ 0x40
 8000ae0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000aea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b0e:	4810      	ldr	r0, [pc, #64]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000b10:	f000 fa6e 	bl	8000ff0 <HAL_DMA_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000b1a:	f7ff ff43 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a0b      	ldr	r2, [pc, #44]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000b22:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b24:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_UART_MspInit+0xfc>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2105      	movs	r1, #5
 8000b2e:	2026      	movs	r0, #38	@ 0x26
 8000b30:	f000 fa34 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b34:	2026      	movs	r0, #38	@ 0x26
 8000b36:	f000 fa4d 	bl	8000fd4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	@ 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	20000370 	.word	0x20000370
 8000b54:	400260a0 	.word	0x400260a0

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <HAL_InitTick+0xd0>)
 8000b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b70:	4a2d      	ldr	r2, [pc, #180]	@ (8000c28 <HAL_InitTick+0xd0>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b78:	4b2b      	ldr	r3, [pc, #172]	@ (8000c28 <HAL_InitTick+0xd0>)
 8000b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b84:	f107 020c 	add.w	r2, r7, #12
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 f8f8 	bl	8001d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b94:	f001 f8e2 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8000b98:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b9c:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <HAL_InitTick+0xd4>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_InitTick+0xd8>)
 8000baa:	4a22      	ldr	r2, [pc, #136]	@ (8000c34 <HAL_InitTick+0xdc>)
 8000bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bae:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <HAL_InitTick+0xd8>)
 8000bb0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c30 <HAL_InitTick+0xd8>)
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_InitTick+0xd8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <HAL_InitTick+0xd8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_InitTick+0xd8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bce:	4818      	ldr	r0, [pc, #96]	@ (8000c30 <HAL_InitTick+0xd8>)
 8000bd0:	f001 fdd8 	bl	8002784 <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d11b      	bne.n	8000c1a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000be2:	4813      	ldr	r0, [pc, #76]	@ (8000c30 <HAL_InitTick+0xd8>)
 8000be4:	f001 fe1e 	bl	8002824 <HAL_TIM_Base_Start_IT>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d111      	bne.n	8000c1a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 f9ec 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d808      	bhi.n	8000c14 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c02:	2200      	movs	r2, #0
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	2019      	movs	r0, #25
 8000c08:	f000 f9c8 	bl	8000f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_InitTick+0xe0>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e002      	b.n	8000c1a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3730      	adds	r7, #48	@ 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	200003d4 	.word	0x200003d4
 8000c34:	40010000 	.word	0x40010000
 8000c38:	20000004 	.word	0x20000004

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <DMA1_Stream6_IRQHandler+0x10>)
 8000c7a:	f000 fb51 	bl	8001320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000370 	.word	0x20000370

08000c88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c8e:	f001 fe39 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200003d4 	.word	0x200003d4

08000c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <TIM2_IRQHandler+0x10>)
 8000ca2:	f001 fe2f 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200002e0 	.word	0x200002e0

08000cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <USART2_IRQHandler+0x10>)
 8000cb6:	f002 faa1 	bl	80031fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000328 	.word	0x20000328

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f006 fc3c 	bl	8007570 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	2000041c 	.word	0x2000041c
 8000d2c:	20004418 	.word	0x20004418

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d58:	f7ff ffea 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	@ (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	@ (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f006 fbfb 	bl	800757c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fc4b 	bl	8000620 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d98:	08007fb8 	.word	0x08007fb8
  ldr r2, =_sbss
 8000d9c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000da0:	20004418 	.word	0x20004418

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f8d8 	bl	8000f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	200f      	movs	r0, #15
 8000dd8:	f7ff febe 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fde8 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000420 	.word	0x20000420

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000420 	.word	0x20000420

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	@ (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	@ (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	@ 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff4c 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fae:	f7ff ff61 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f7ff ffb1 	bl	8000f20 <NVIC_EncodePriority>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff80 	bl	8000ecc <__NVIC_SetPriority>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff54 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ff0a 	bl	8000e14 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e099      	b.n	8001140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102c:	e00f      	b.n	800104e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800102e:	f7ff fef1 	bl	8000e14 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b05      	cmp	r3, #5
 800103a:	d908      	bls.n	800104e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e078      	b.n	8001140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e8      	bne.n	800102e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4b38      	ldr	r3, [pc, #224]	@ (8001148 <HAL_DMA_Init+0x158>)
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800107a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d107      	bne.n	80010b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	4313      	orrs	r3, r2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f023 0307 	bic.w	r3, r3, #7
 80010ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d117      	bne.n	8001112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fb01 	bl	80016fc <DMA_CheckFifoParam>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2240      	movs	r2, #64	@ 0x40
 8001104:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800110e:	2301      	movs	r3, #1
 8001110:	e016      	b.n	8001140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fab8 	bl	8001690 <DMA_CalcBaseAndBitshift>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001128:	223f      	movs	r2, #63	@ 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	f010803f 	.word	0xf010803f

0800114c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_DMA_Start_IT+0x26>
 800116e:	2302      	movs	r3, #2
 8001170:	e040      	b.n	80011f4 <HAL_DMA_Start_IT+0xa8>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d12f      	bne.n	80011e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 fa4a 	bl	8001634 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a4:	223f      	movs	r2, #63	@ 0x3f
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0216 	orr.w	r2, r2, #22
 80011ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0208 	orr.w	r2, r2, #8
 80011d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e005      	b.n	80011f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011ee:	2302      	movs	r3, #2
 80011f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800120a:	f7ff fe03 	bl	8000e14 <HAL_GetTick>
 800120e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d008      	beq.n	800122e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2280      	movs	r2, #128	@ 0x80
 8001220:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e052      	b.n	80012d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0216 	bic.w	r2, r2, #22
 800123c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	695a      	ldr	r2, [r3, #20]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800124c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <HAL_DMA_Abort+0x62>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0208 	bic.w	r2, r2, #8
 800126c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0201 	bic.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127e:	e013      	b.n	80012a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001280:	f7ff fdc8 	bl	8000e14 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b05      	cmp	r3, #5
 800128c:	d90c      	bls.n	80012a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2220      	movs	r2, #32
 8001292:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e015      	b.n	80012d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e4      	bne.n	8001280 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ba:	223f      	movs	r2, #63	@ 0x3f
 80012bc:	409a      	lsls	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d004      	beq.n	80012fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00c      	b.n	8001314 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2205      	movs	r2, #5
 80012fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800132c:	4b8e      	ldr	r3, [pc, #568]	@ (8001568 <HAL_DMA_IRQHandler+0x248>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a8e      	ldr	r2, [pc, #568]	@ (800156c <HAL_DMA_IRQHandler+0x24c>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0a9b      	lsrs	r3, r3, #10
 8001338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800134a:	2208      	movs	r2, #8
 800134c:	409a      	lsls	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01a      	beq.n	800138c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0204 	bic.w	r2, r2, #4
 8001372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001378:	2208      	movs	r2, #8
 800137a:	409a      	lsls	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001390:	2201      	movs	r2, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d012      	beq.n	80013c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ae:	2201      	movs	r2, #1
 80013b0:	409a      	lsls	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ba:	f043 0202 	orr.w	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c6:	2204      	movs	r2, #4
 80013c8:	409a      	lsls	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e4:	2204      	movs	r2, #4
 80013e6:	409a      	lsls	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f0:	f043 0204 	orr.w	r2, r3, #4
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013fc:	2210      	movs	r2, #16
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d043      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d03c      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800141a:	2210      	movs	r2, #16
 800141c:	409a      	lsls	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d018      	beq.n	8001462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d108      	bne.n	8001450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d024      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
 800144e:	e01f      	b.n	8001490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01b      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
 8001460:	e016      	b.n	8001490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0208 	bic.w	r2, r2, #8
 800147e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001494:	2220      	movs	r2, #32
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 808f 	beq.w	80015c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8087 	beq.w	80015c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b6:	2220      	movs	r2, #32
 80014b8:	409a      	lsls	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d136      	bne.n	8001538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0216 	bic.w	r2, r2, #22
 80014d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <HAL_DMA_IRQHandler+0x1da>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0208 	bic.w	r2, r2, #8
 8001508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150e:	223f      	movs	r2, #63	@ 0x3f
 8001510:	409a      	lsls	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800152a:	2b00      	cmp	r3, #0
 800152c:	d07e      	beq.n	800162c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
        }
        return;
 8001536:	e079      	b.n	800162c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01d      	beq.n	8001582 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10d      	bne.n	8001570 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001558:	2b00      	cmp	r3, #0
 800155a:	d031      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
 8001564:	e02c      	b.n	80015c0 <HAL_DMA_IRQHandler+0x2a0>
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000
 800156c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001574:	2b00      	cmp	r3, #0
 8001576:	d023      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	4798      	blx	r3
 8001580:	e01e      	b.n	80015c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10f      	bne.n	80015b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0210 	bic.w	r2, r2, #16
 800159e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d032      	beq.n	800162e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d022      	beq.n	800161a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2205      	movs	r2, #5
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d307      	bcc.n	8001608 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f2      	bne.n	80015ec <HAL_DMA_IRQHandler+0x2cc>
 8001606:	e000      	b.n	800160a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001608:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
 800162a:	e000      	b.n	800162e <HAL_DMA_IRQHandler+0x30e>
        return;
 800162c:	bf00      	nop
    }
  }
}
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001650:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b40      	cmp	r3, #64	@ 0x40
 8001660:	d108      	bne.n	8001674 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001672:	e007      	b.n	8001684 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	60da      	str	r2, [r3, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	3b10      	subs	r3, #16
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <DMA_CalcBaseAndBitshift+0x64>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016aa:	4a13      	ldr	r2, [pc, #76]	@ (80016f8 <DMA_CalcBaseAndBitshift+0x68>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d909      	bls.n	80016d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	1d1a      	adds	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80016d0:	e007      	b.n	80016e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	aaaaaaab 	.word	0xaaaaaaab
 80016f8:	08007f6c 	.word	0x08007f6c

080016fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11f      	bne.n	8001756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d856      	bhi.n	80017ca <DMA_CheckFifoParam+0xce>
 800171c:	a201      	add	r2, pc, #4	@ (adr r2, 8001724 <DMA_CheckFifoParam+0x28>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001735 	.word	0x08001735
 8001728:	08001747 	.word	0x08001747
 800172c:	08001735 	.word	0x08001735
 8001730:	080017cb 	.word	0x080017cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d046      	beq.n	80017ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001744:	e043      	b.n	80017ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800174e:	d140      	bne.n	80017d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001754:	e03d      	b.n	80017d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800175e:	d121      	bne.n	80017a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d837      	bhi.n	80017d6 <DMA_CheckFifoParam+0xda>
 8001766:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <DMA_CheckFifoParam+0x70>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001783 	.word	0x08001783
 8001774:	0800177d 	.word	0x0800177d
 8001778:	08001795 	.word	0x08001795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
      break;
 8001780:	e030      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d025      	beq.n	80017da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001792:	e022      	b.n	80017da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800179c:	d11f      	bne.n	80017de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017a2:	e01c      	b.n	80017de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d903      	bls.n	80017b2 <DMA_CheckFifoParam+0xb6>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d003      	beq.n	80017b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017b0:	e018      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
      break;
 80017b6:	e015      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      break;
 80017c8:	e00b      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;
 80017ca:	bf00      	nop
 80017cc:	e00a      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ce:	bf00      	nop
 80017d0:	e008      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017d2:	bf00      	nop
 80017d4:	e006      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017d6:	bf00      	nop
 80017d8:	e004      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017da:	bf00      	nop
 80017dc:	e002      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80017de:	bf00      	nop
 80017e0:	e000      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017e2:	bf00      	nop
    }
  } 
  
  return status; 
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e165      	b.n	8001adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8154 	bne.w	8001ad6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d005      	beq.n	8001846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	2b02      	cmp	r3, #2
 8001844:	d130      	bne.n	80018a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 0201 	and.w	r2, r3, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d017      	beq.n	80018e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d123      	bne.n	8001938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80ae 	beq.w	8001ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <HAL_GPIO_Init+0x300>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	4a5c      	ldr	r2, [pc, #368]	@ (8001af4 <HAL_GPIO_Init+0x300>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
 800198a:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <HAL_GPIO_Init+0x300>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001996:	4a58      	ldr	r2, [pc, #352]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4f      	ldr	r2, [pc, #316]	@ (8001afc <HAL_GPIO_Init+0x308>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d025      	beq.n	8001a0e <HAL_GPIO_Init+0x21a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001b00 <HAL_GPIO_Init+0x30c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01f      	beq.n	8001a0a <HAL_GPIO_Init+0x216>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001b04 <HAL_GPIO_Init+0x310>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_Init+0x212>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b08 <HAL_GPIO_Init+0x314>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x20e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4b      	ldr	r2, [pc, #300]	@ (8001b0c <HAL_GPIO_Init+0x318>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x20a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001b10 <HAL_GPIO_Init+0x31c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x206>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a49      	ldr	r2, [pc, #292]	@ (8001b14 <HAL_GPIO_Init+0x320>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x202>
 80019f2:	2306      	movs	r3, #6
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x21c>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a31      	ldr	r2, [pc, #196]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <HAL_GPIO_Init+0x324>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae96 	bls.w	8001810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40013c00 	.word	0x40013c00

08001b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b2c:	787b      	ldrb	r3, [r7, #1]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b38:	e003      	b.n	8001b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	041a      	lsls	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0cc      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b68      	ldr	r3, [pc, #416]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d90c      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b65      	ldr	r3, [pc, #404]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d044      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e067      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4934      	ldr	r1, [pc, #208]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c40:	f7ff f8e8 	bl	8000e14 <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7ff f8e4 	bl	8000e14 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e04f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d20c      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f887 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ff2e 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08007f54 	.word	0x08007f54
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08007f64 	.word	0x08007f64

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d60:	f7ff ffdc 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0b5b      	lsrs	r3, r3, #13
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	@ (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08007f64 	.word	0x08007f64

08001d84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	220f      	movs	r2, #15
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dc6:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <HAL_RCC_GetClockConfig+0x60>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 020f 	and.w	r2, r3, #15
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40023c00 	.word	0x40023c00

08001de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b0ae      	sub	sp, #184	@ 0xb8
 8001dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e0e:	4bcb      	ldr	r3, [pc, #812]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	f200 8206 	bhi.w	8002228 <HAL_RCC_GetSysClockFreq+0x440>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e59 	.word	0x08001e59
 8001e28:	08002229 	.word	0x08002229
 8001e2c:	08002229 	.word	0x08002229
 8001e30:	08002229 	.word	0x08002229
 8001e34:	08001e61 	.word	0x08001e61
 8001e38:	08002229 	.word	0x08002229
 8001e3c:	08002229 	.word	0x08002229
 8001e40:	08002229 	.word	0x08002229
 8001e44:	08001e69 	.word	0x08001e69
 8001e48:	08002229 	.word	0x08002229
 8001e4c:	08002229 	.word	0x08002229
 8001e50:	08002229 	.word	0x08002229
 8001e54:	08002059 	.word	0x08002059
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4bb9      	ldr	r3, [pc, #740]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e5e:	e1e7      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e60:	4bb8      	ldr	r3, [pc, #736]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e66:	e1e3      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e68:	4bb4      	ldr	r3, [pc, #720]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e74:	4bb1      	ldr	r3, [pc, #708]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d071      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e80:	4bae      	ldr	r3, [pc, #696]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e8c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	0159      	lsls	r1, r3, #5
 8001eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb8:	0150      	lsls	r0, r2, #5
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	1a51      	subs	r1, r2, r1
 8001ec2:	6439      	str	r1, [r7, #64]	@ 0x40
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001ed8:	4649      	mov	r1, r9
 8001eda:	018b      	lsls	r3, r1, #6
 8001edc:	4641      	mov	r1, r8
 8001ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ee2:	4641      	mov	r1, r8
 8001ee4:	018a      	lsls	r2, r1, #6
 8001ee6:	4641      	mov	r1, r8
 8001ee8:	1a51      	subs	r1, r2, r1
 8001eea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001eec:	4649      	mov	r1, r9
 8001eee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f00:	4649      	mov	r1, r9
 8001f02:	00cb      	lsls	r3, r1, #3
 8001f04:	4641      	mov	r1, r8
 8001f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	00ca      	lsls	r2, r1, #3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	4622      	mov	r2, r4
 8001f16:	189b      	adds	r3, r3, r2
 8001f18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f1a:	462b      	mov	r3, r5
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	eb42 0303 	adc.w	r3, r2, r3
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f30:	4629      	mov	r1, r5
 8001f32:	024b      	lsls	r3, r1, #9
 8001f34:	4621      	mov	r1, r4
 8001f36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	024a      	lsls	r2, r1, #9
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f46:	2200      	movs	r2, #0
 8001f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f54:	f7fe f9ac 	bl	80002b0 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f62:	e067      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f64:	4b75      	ldr	r3, [pc, #468]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	099b      	lsrs	r3, r3, #6
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f70:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f7e:	2300      	movs	r3, #0
 8001f80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f86:	4622      	mov	r2, r4
 8001f88:	462b      	mov	r3, r5
 8001f8a:	f04f 0000 	mov.w	r0, #0
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	0159      	lsls	r1, r3, #5
 8001f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f98:	0150      	lsls	r0, r2, #5
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	1a51      	subs	r1, r2, r1
 8001fa2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001fb8:	4649      	mov	r1, r9
 8001fba:	018b      	lsls	r3, r1, #6
 8001fbc:	4641      	mov	r1, r8
 8001fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	018a      	lsls	r2, r1, #6
 8001fc6:	4641      	mov	r1, r8
 8001fc8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fcc:	4649      	mov	r1, r9
 8001fce:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fde:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fe6:	4692      	mov	sl, r2
 8001fe8:	469b      	mov	fp, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	eb1a 0303 	adds.w	r3, sl, r3
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002006:	4629      	mov	r1, r5
 8002008:	028b      	lsls	r3, r1, #10
 800200a:	4621      	mov	r1, r4
 800200c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002010:	4621      	mov	r1, r4
 8002012:	028a      	lsls	r2, r1, #10
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800201c:	2200      	movs	r2, #0
 800201e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002020:	677a      	str	r2, [r7, #116]	@ 0x74
 8002022:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002026:	f7fe f943 	bl	80002b0 <__aeabi_uldivmod>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4613      	mov	r3, r2
 8002030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002034:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	3301      	adds	r3, #1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800204a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002056:	e0eb      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002058:	4b38      	ldr	r3, [pc, #224]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002064:	4b35      	ldr	r3, [pc, #212]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d06b      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002070:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_RCC_GetSysClockFreq+0x354>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	2200      	movs	r2, #0
 8002078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800207a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800207c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800207e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002082:	663b      	str	r3, [r7, #96]	@ 0x60
 8002084:	2300      	movs	r3, #0
 8002086:	667b      	str	r3, [r7, #100]	@ 0x64
 8002088:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800208c:	4622      	mov	r2, r4
 800208e:	462b      	mov	r3, r5
 8002090:	f04f 0000 	mov.w	r0, #0
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	0159      	lsls	r1, r3, #5
 800209a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800209e:	0150      	lsls	r0, r2, #5
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4621      	mov	r1, r4
 80020a6:	1a51      	subs	r1, r2, r1
 80020a8:	61b9      	str	r1, [r7, #24]
 80020aa:	4629      	mov	r1, r5
 80020ac:	eb63 0301 	sbc.w	r3, r3, r1
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020be:	4659      	mov	r1, fp
 80020c0:	018b      	lsls	r3, r1, #6
 80020c2:	4651      	mov	r1, sl
 80020c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020c8:	4651      	mov	r1, sl
 80020ca:	018a      	lsls	r2, r1, #6
 80020cc:	4651      	mov	r1, sl
 80020ce:	ebb2 0801 	subs.w	r8, r2, r1
 80020d2:	4659      	mov	r1, fp
 80020d4:	eb63 0901 	sbc.w	r9, r3, r1
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ec:	4690      	mov	r8, r2
 80020ee:	4699      	mov	r9, r3
 80020f0:	4623      	mov	r3, r4
 80020f2:	eb18 0303 	adds.w	r3, r8, r3
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	462b      	mov	r3, r5
 80020fa:	eb49 0303 	adc.w	r3, r9, r3
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800210c:	4629      	mov	r1, r5
 800210e:	024b      	lsls	r3, r1, #9
 8002110:	4621      	mov	r1, r4
 8002112:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002116:	4621      	mov	r1, r4
 8002118:	024a      	lsls	r2, r1, #9
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002122:	2200      	movs	r2, #0
 8002124:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002126:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002128:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800212c:	f7fe f8c0 	bl	80002b0 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4613      	mov	r3, r2
 8002136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800213a:	e065      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x420>
 800213c:	40023800 	.word	0x40023800
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002148:	4b3d      	ldr	r3, [pc, #244]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x458>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	2200      	movs	r2, #0
 8002150:	4618      	mov	r0, r3
 8002152:	4611      	mov	r1, r2
 8002154:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002158:	653b      	str	r3, [r7, #80]	@ 0x50
 800215a:	2300      	movs	r3, #0
 800215c:	657b      	str	r3, [r7, #84]	@ 0x54
 800215e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002162:	4642      	mov	r2, r8
 8002164:	464b      	mov	r3, r9
 8002166:	f04f 0000 	mov.w	r0, #0
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	0159      	lsls	r1, r3, #5
 8002170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002174:	0150      	lsls	r0, r2, #5
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4641      	mov	r1, r8
 800217c:	1a51      	subs	r1, r2, r1
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	4649      	mov	r1, r9
 8002182:	eb63 0301 	sbc.w	r3, r3, r1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002194:	4659      	mov	r1, fp
 8002196:	018b      	lsls	r3, r1, #6
 8002198:	4651      	mov	r1, sl
 800219a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800219e:	4651      	mov	r1, sl
 80021a0:	018a      	lsls	r2, r1, #6
 80021a2:	4651      	mov	r1, sl
 80021a4:	1a54      	subs	r4, r2, r1
 80021a6:	4659      	mov	r1, fp
 80021a8:	eb63 0501 	sbc.w	r5, r3, r1
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	00eb      	lsls	r3, r5, #3
 80021b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ba:	00e2      	lsls	r2, r4, #3
 80021bc:	4614      	mov	r4, r2
 80021be:	461d      	mov	r5, r3
 80021c0:	4643      	mov	r3, r8
 80021c2:	18e3      	adds	r3, r4, r3
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	464b      	mov	r3, r9
 80021c8:	eb45 0303 	adc.w	r3, r5, r3
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021da:	4629      	mov	r1, r5
 80021dc:	028b      	lsls	r3, r1, #10
 80021de:	4621      	mov	r1, r4
 80021e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021e4:	4621      	mov	r1, r4
 80021e6:	028a      	lsls	r2, r1, #10
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021f0:	2200      	movs	r2, #0
 80021f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80021f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021fa:	f7fe f859 	bl	80002b0 <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4613      	mov	r3, r2
 8002204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002208:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x458>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	0f1b      	lsrs	r3, r3, #28
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800221a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002226:	e003      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x45c>)
 800222a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800222e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002234:	4618      	mov	r0, r3
 8002236:	37b8      	adds	r7, #184	@ 0xb8
 8002238:	46bd      	mov	sp, r7
 800223a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	00f42400 	.word	0x00f42400

08002248 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e28d      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8083 	beq.w	800236e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002268:	4b94      	ldr	r3, [pc, #592]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b04      	cmp	r3, #4
 8002272:	d019      	beq.n	80022a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002274:	4b91      	ldr	r3, [pc, #580]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
        || \
 800227c:	2b08      	cmp	r3, #8
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002280:	4b8e      	ldr	r3, [pc, #568]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800228c:	d00c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4b8b      	ldr	r3, [pc, #556]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d112      	bne.n	80022c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229a:	4b88      	ldr	r3, [pc, #544]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	4b84      	ldr	r3, [pc, #528]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05b      	beq.n	800236c <HAL_RCC_OscConfig+0x124>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d157      	bne.n	800236c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e25a      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x90>
 80022ca:	4b7c      	ldr	r3, [pc, #496]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7b      	ldr	r2, [pc, #492]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xcc>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0xb4>
 80022e2:	4b76      	ldr	r3, [pc, #472]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a75      	ldr	r2, [pc, #468]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b73      	ldr	r3, [pc, #460]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a72      	ldr	r2, [pc, #456]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xcc>
 80022fc:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6e      	ldr	r2, [pc, #440]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b6c      	ldr	r3, [pc, #432]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6b      	ldr	r2, [pc, #428]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fd7a 	bl	8000e14 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe fd76 	bl	8000e14 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e21f      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b61      	ldr	r3, [pc, #388]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xdc>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fd66 	bl	8000e14 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fd62 	bl	8000e14 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e20b      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	4b57      	ldr	r3, [pc, #348]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x104>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d06f      	beq.n	800245a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800237a:	4b50      	ldr	r3, [pc, #320]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d017      	beq.n	80023b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002386:	4b4d      	ldr	r3, [pc, #308]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
        || \
 800238e:	2b08      	cmp	r3, #8
 8002390:	d105      	bne.n	800239e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002392:	4b4a      	ldr	r3, [pc, #296]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239e:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d11c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023aa:	4b44      	ldr	r3, [pc, #272]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d116      	bne.n	80023e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	4b41      	ldr	r3, [pc, #260]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x186>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1d3      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4937      	ldr	r1, [pc, #220]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	e03a      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ec:	4b34      	ldr	r3, [pc, #208]	@ (80024c0 <HAL_RCC_OscConfig+0x278>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd0f 	bl	8000e14 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe fd0b 	bl	8000e14 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1b4      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4925      	ldr	r1, [pc, #148]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <HAL_RCC_OscConfig+0x278>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fcee 	bl	8000e14 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7fe fcea 	bl	8000e14 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e193      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d036      	beq.n	80024d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7fe fcce 	bl	8000e14 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe fcca 	bl	8000e14 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e173      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x234>
 800249a:	e01b      	b.n	80024d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249c:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fcb7 	bl	8000e14 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	e00e      	b.n	80024c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe fcb3 	bl	8000e14 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d907      	bls.n	80024c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e15c      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470000 	.word	0x42470000
 80024c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	4b8a      	ldr	r3, [pc, #552]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 80024ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ea      	bne.n	80024aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8097 	beq.w	8002610 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e6:	4b83      	ldr	r3, [pc, #524]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b7f      	ldr	r3, [pc, #508]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	4a7e      	ldr	r2, [pc, #504]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	@ 0x40
 8002502:	4b7c      	ldr	r3, [pc, #496]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250e:	2301      	movs	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b79      	ldr	r3, [pc, #484]	@ (80026f8 <HAL_RCC_OscConfig+0x4b0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d118      	bne.n	8002550 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251e:	4b76      	ldr	r3, [pc, #472]	@ (80026f8 <HAL_RCC_OscConfig+0x4b0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a75      	ldr	r2, [pc, #468]	@ (80026f8 <HAL_RCC_OscConfig+0x4b0>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252a:	f7fe fc73 	bl	8000e14 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002532:	f7fe fc6f 	bl	8000e14 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e118      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	4b6c      	ldr	r3, [pc, #432]	@ (80026f8 <HAL_RCC_OscConfig+0x4b0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x31e>
 8002558:	4b66      	ldr	r3, [pc, #408]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255c:	4a65      	ldr	r2, [pc, #404]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	@ 0x70
 8002564:	e01c      	b.n	80025a0 <HAL_RCC_OscConfig+0x358>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b05      	cmp	r3, #5
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x340>
 800256e:	4b61      	ldr	r3, [pc, #388]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002572:	4a60      	ldr	r2, [pc, #384]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	6713      	str	r3, [r2, #112]	@ 0x70
 800257a:	4b5e      	ldr	r3, [pc, #376]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257e:	4a5d      	ldr	r2, [pc, #372]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6713      	str	r3, [r2, #112]	@ 0x70
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0x358>
 8002588:	4b5a      	ldr	r3, [pc, #360]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	4a59      	ldr	r2, [pc, #356]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	6713      	str	r3, [r2, #112]	@ 0x70
 8002594:	4b57      	ldr	r3, [pc, #348]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002598:	4a56      	ldr	r2, [pc, #344]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 800259a:	f023 0304 	bic.w	r3, r3, #4
 800259e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d015      	beq.n	80025d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7fe fc34 	bl	8000e14 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b0:	f7fe fc30 	bl	8000e14 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0d7      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c6:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0ee      	beq.n	80025b0 <HAL_RCC_OscConfig+0x368>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fc1e 	bl	8000e14 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe fc1a 	bl	8000e14 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0c1      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f2:	4b40      	ldr	r3, [pc, #256]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ee      	bne.n	80025dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002604:	4b3b      	ldr	r3, [pc, #236]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	4a3a      	ldr	r2, [pc, #232]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 800260a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800260e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80ad 	beq.w	8002774 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800261a:	4b36      	ldr	r3, [pc, #216]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	d060      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d145      	bne.n	80026ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b33      	ldr	r3, [pc, #204]	@ (80026fc <HAL_RCC_OscConfig+0x4b4>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fbee 	bl	8000e14 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fbea 	bl	8000e14 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e093      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	019b      	lsls	r3, r3, #6
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	3b01      	subs	r3, #1
 8002674:	041b      	lsls	r3, r3, #16
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	071b      	lsls	r3, r3, #28
 8002686:	491b      	ldr	r1, [pc, #108]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_RCC_OscConfig+0x4b4>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fbbf 	bl	8000e14 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe fbbb 	bl	8000e14 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e064      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x452>
 80026b8:	e05c      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <HAL_RCC_OscConfig+0x4b4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fba8 	bl	8000e14 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fba4 	bl	8000e14 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e04d      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x480>
 80026e6:	e045      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e040      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002700:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <HAL_RCC_OscConfig+0x538>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d030      	beq.n	8002770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d129      	bne.n	8002770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d122      	bne.n	8002770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002738:	4293      	cmp	r3, r2
 800273a:	d119      	bne.n	8002770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	3b01      	subs	r3, #1
 800274a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d10f      	bne.n	8002770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e041      	b.n	800281a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f92c 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 fa7e 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d001      	beq.n	800283c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e04e      	b.n	80028da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a23      	ldr	r2, [pc, #140]	@ (80028e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x80>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002866:	d01d      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x80>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1f      	ldr	r2, [pc, #124]	@ (80028ec <HAL_TIM_Base_Start_IT+0xc8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x80>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1e      	ldr	r2, [pc, #120]	@ (80028f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x80>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1c      	ldr	r2, [pc, #112]	@ (80028f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x80>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1b      	ldr	r2, [pc, #108]	@ (80028f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x80>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a19      	ldr	r2, [pc, #100]	@ (80028fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x80>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a18      	ldr	r2, [pc, #96]	@ (8002900 <HAL_TIM_Base_Start_IT+0xdc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d111      	bne.n	80028c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d010      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c6:	e007      	b.n	80028d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40000c00 	.word	0x40000c00
 80028f8:	40010400 	.word	0x40010400
 80028fc:	40014000 	.word	0x40014000
 8002900:	40001800 	.word	0x40001800

08002904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d020      	beq.n	8002968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01b      	beq.n	8002968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0202 	mvn.w	r2, #2
 8002938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f999 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f98b 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f99c 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d020      	beq.n	80029b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0204 	mvn.w	r2, #4
 8002984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f973 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f965 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f976 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d020      	beq.n	8002a00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0208 	mvn.w	r2, #8
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2204      	movs	r2, #4
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f94d 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f93f 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f950 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d020      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01b      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0210 	mvn.w	r2, #16
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2208      	movs	r2, #8
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f927 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f919 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f92a 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0201 	mvn.w	r2, #1
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd ff7c 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fade 	bl	8003050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8fb 	bl	8002cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00c      	beq.n	8002adc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0220 	mvn.w	r2, #32
 8002ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fab0 	bl	800303c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_TIM_ConfigClockSource+0x1c>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0b4      	b.n	8002c6a <HAL_TIM_ConfigClockSource+0x186>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b38:	d03e      	beq.n	8002bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b3e:	f200 8087 	bhi.w	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b46:	f000 8086 	beq.w	8002c56 <HAL_TIM_ConfigClockSource+0x172>
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b4e:	d87f      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b50:	2b70      	cmp	r3, #112	@ 0x70
 8002b52:	d01a      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0xa6>
 8002b54:	2b70      	cmp	r3, #112	@ 0x70
 8002b56:	d87b      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b58:	2b60      	cmp	r3, #96	@ 0x60
 8002b5a:	d050      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x11a>
 8002b5c:	2b60      	cmp	r3, #96	@ 0x60
 8002b5e:	d877      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b60:	2b50      	cmp	r3, #80	@ 0x50
 8002b62:	d03c      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0xfa>
 8002b64:	2b50      	cmp	r3, #80	@ 0x50
 8002b66:	d873      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b68:	2b40      	cmp	r3, #64	@ 0x40
 8002b6a:	d058      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x13a>
 8002b6c:	2b40      	cmp	r3, #64	@ 0x40
 8002b6e:	d86f      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b70:	2b30      	cmp	r3, #48	@ 0x30
 8002b72:	d064      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x15a>
 8002b74:	2b30      	cmp	r3, #48	@ 0x30
 8002b76:	d86b      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d060      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x15a>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d867      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05c      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x15a>
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d05a      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x15a>
 8002b88:	e062      	b.n	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b9a:	f000 f9b3 	bl	8002f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	609a      	str	r2, [r3, #8]
      break;
 8002bb6:	e04f      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bc8:	f000 f99c 	bl	8002f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bda:	609a      	str	r2, [r3, #8]
      break;
 8002bdc:	e03c      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 f910 	bl	8002e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2150      	movs	r1, #80	@ 0x50
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f969 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e02c      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f000 f92f 	bl	8002e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2160      	movs	r1, #96	@ 0x60
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f959 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002c1c:	e01c      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 f8f0 	bl	8002e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2140      	movs	r1, #64	@ 0x40
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f949 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e00c      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f000 f940 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002c4e:	e003      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e000      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a43      	ldr	r2, [pc, #268]	@ (8002de4 <TIM_Base_SetConfig+0x120>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce2:	d00f      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a40      	ldr	r2, [pc, #256]	@ (8002de8 <TIM_Base_SetConfig+0x124>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3f      	ldr	r2, [pc, #252]	@ (8002dec <TIM_Base_SetConfig+0x128>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8002df4 <TIM_Base_SetConfig+0x130>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d108      	bne.n	8002d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a32      	ldr	r2, [pc, #200]	@ (8002de4 <TIM_Base_SetConfig+0x120>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d24:	d027      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	@ (8002de8 <TIM_Base_SetConfig+0x124>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d023      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <TIM_Base_SetConfig+0x128>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01f      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2d      	ldr	r2, [pc, #180]	@ (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01b      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2c      	ldr	r2, [pc, #176]	@ (8002df4 <TIM_Base_SetConfig+0x130>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d017      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2b      	ldr	r2, [pc, #172]	@ (8002df8 <TIM_Base_SetConfig+0x134>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	@ (8002dfc <TIM_Base_SetConfig+0x138>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00f      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a29      	ldr	r2, [pc, #164]	@ (8002e00 <TIM_Base_SetConfig+0x13c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a28      	ldr	r2, [pc, #160]	@ (8002e04 <TIM_Base_SetConfig+0x140>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a27      	ldr	r2, [pc, #156]	@ (8002e08 <TIM_Base_SetConfig+0x144>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a26      	ldr	r2, [pc, #152]	@ (8002e0c <TIM_Base_SetConfig+0x148>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a0e      	ldr	r2, [pc, #56]	@ (8002de4 <TIM_Base_SetConfig+0x120>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0xf2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a10      	ldr	r2, [pc, #64]	@ (8002df4 <TIM_Base_SetConfig+0x130>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d103      	bne.n	8002dbe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f043 0204 	orr.w	r2, r3, #4
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	601a      	str	r2, [r3, #0]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40000c00 	.word	0x40000c00
 8002df4:	40010400 	.word	0x40010400
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40014400 	.word	0x40014400
 8002e00:	40014800 	.word	0x40014800
 8002e04:	40001800 	.word	0x40001800
 8002e08:	40001c00 	.word	0x40001c00
 8002e0c:	40002000 	.word	0x40002000

08002e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0201 	bic.w	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 030a 	bic.w	r3, r3, #10
 8002e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f023 0210 	bic.w	r2, r3, #16
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	031b      	lsls	r3, r3, #12
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f043 0307 	orr.w	r3, r3, #7
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e05a      	b.n	8003012 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a21      	ldr	r2, [pc, #132]	@ (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d022      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1d      	ldr	r2, [pc, #116]	@ (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d018      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800302c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	@ (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10c      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40010400 	.word	0x40010400
 8003034:	40014000 	.word	0x40014000
 8003038:	40001800 	.word	0x40001800

0800303c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e042      	b.n	80030fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd fce2 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	@ 0x24
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fdd9 	bl	8003c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	@ 0x30
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	d162      	bne.n	80031e4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_UART_Transmit_DMA+0x26>
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e05b      	b.n	80031e6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2221      	movs	r2, #33	@ 0x21
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	4a27      	ldr	r2, [pc, #156]	@ (80031f0 <HAL_UART_Transmit_DMA+0xec>)
 8003154:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315a:	4a26      	ldr	r2, [pc, #152]	@ (80031f4 <HAL_UART_Transmit_DMA+0xf0>)
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	4a25      	ldr	r2, [pc, #148]	@ (80031f8 <HAL_UART_Transmit_DMA+0xf4>)
 8003164:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316a:	2200      	movs	r2, #0
 800316c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800316e:	f107 0308 	add.w	r3, r7, #8
 8003172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3304      	adds	r3, #4
 8003182:	461a      	mov	r2, r3
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	f7fd ffe1 	bl	800114c <HAL_DMA_Start_IT>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2210      	movs	r2, #16
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e021      	b.n	80031e6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3314      	adds	r3, #20
 80031b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	617b      	str	r3, [r7, #20]
   return(result);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3314      	adds	r3, #20
 80031ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80031ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6a39      	ldr	r1, [r7, #32]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3730      	adds	r7, #48	@ 0x30
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	08003791 	.word	0x08003791
 80031f4:	0800382b 	.word	0x0800382b
 80031f8:	08003847 	.word	0x08003847

080031fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b0ba      	sub	sp, #232	@ 0xe8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800323a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_UART_IRQHandler+0x66>
 800324e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fc41 	bl	8003ae2 <UART_Receive_IT>
      return;
 8003260:	e273      	b.n	800374a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80de 	beq.w	8003428 <HAL_UART_IRQHandler+0x22c>
 800326c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800327c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80d1 	beq.w	8003428 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_UART_IRQHandler+0xae>
 8003292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_UART_IRQHandler+0xd2>
 80032b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	f043 0202 	orr.w	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_UART_IRQHandler+0xf6>
 80032da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	f043 0204 	orr.w	r2, r3, #4
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d011      	beq.n	8003322 <HAL_UART_IRQHandler+0x126>
 80032fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800330a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f043 0208 	orr.w	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 820a 	beq.w	8003740 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800332c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_UART_IRQHandler+0x14e>
 8003338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fbcc 	bl	8003ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003354:	2b40      	cmp	r3, #64	@ 0x40
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_UART_IRQHandler+0x17a>
 800336e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d04f      	beq.n	8003416 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fad7 	bl	800392a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b40      	cmp	r3, #64	@ 0x40
 8003388:	d141      	bne.n	800340e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1d9      	bne.n	800338a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d013      	beq.n	8003406 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	4a8a      	ldr	r2, [pc, #552]	@ (800360c <HAL_UART_IRQHandler+0x410>)
 80033e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd ff76 	bl	80012dc <HAL_DMA_Abort_IT>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003400:	4610      	mov	r0, r2
 8003402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	e00e      	b.n	8003424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f003 fdf0 	bl	8006fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	e00a      	b.n	8003424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f003 fdec 	bl	8006fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	e006      	b.n	8003424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f003 fde8 	bl	8006fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003422:	e18d      	b.n	8003740 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	bf00      	nop
    return;
 8003426:	e18b      	b.n	8003740 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	2b01      	cmp	r3, #1
 800342e:	f040 8167 	bne.w	8003700 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8160 	beq.w	8003700 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8159 	beq.w	8003700 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	f040 80ce 	bne.w	8003610 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a9 	beq.w	80035dc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800348e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003492:	429a      	cmp	r2, r3
 8003494:	f080 80a2 	bcs.w	80035dc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800349e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034aa:	f000 8088 	beq.w	80035be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1d9      	bne.n	80034ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800350a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800351e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003522:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e1      	bne.n	80034fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3314      	adds	r3, #20
 800353c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800354c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800355a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800355c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e3      	bne.n	8003536 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800358c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e3      	bne.n	800357c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fd fe1f 	bl	80011fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8cf 	bl	8003778 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80035da:	e0b3      	b.n	8003744 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 80ad 	bne.w	8003744 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f4:	f040 80a6 	bne.w	8003744 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8b7 	bl	8003778 <HAL_UARTEx_RxEventCallback>
      return;
 800360a:	e09b      	b.n	8003744 <HAL_UART_IRQHandler+0x548>
 800360c:	080039f1 	.word	0x080039f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003618:	b29b      	uxth	r3, r3
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 808e 	beq.w	8003748 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800362c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8089 	beq.w	8003748 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	330c      	adds	r3, #12
 800363c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800364c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800365a:	647a      	str	r2, [r7, #68]	@ 0x44
 800365c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003660:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e3      	bne.n	8003636 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3314      	adds	r3, #20
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	623b      	str	r3, [r7, #32]
   return(result);
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003692:	633a      	str	r2, [r7, #48]	@ 0x30
 8003694:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e3      	bne.n	800366e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	330c      	adds	r3, #12
 80036d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036d8:	61fa      	str	r2, [r7, #28]
 80036da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	69b9      	ldr	r1, [r7, #24]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	617b      	str	r3, [r7, #20]
   return(result);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e3      	bne.n	80036b4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036f6:	4619      	mov	r1, r3
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f83d 	bl	8003778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036fe:	e023      	b.n	8003748 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <HAL_UART_IRQHandler+0x524>
 800370c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f97a 	bl	8003a12 <UART_Transmit_IT>
    return;
 800371e:	e014      	b.n	800374a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <HAL_UART_IRQHandler+0x54e>
 800372c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f9ba 	bl	8003ab2 <UART_EndTransmit_IT>
    return;
 800373e:	e004      	b.n	800374a <HAL_UART_IRQHandler+0x54e>
    return;
 8003740:	bf00      	nop
 8003742:	e002      	b.n	800374a <HAL_UART_IRQHandler+0x54e>
      return;
 8003744:	bf00      	nop
 8003746:	e000      	b.n	800374a <HAL_UART_IRQHandler+0x54e>
      return;
 8003748:	bf00      	nop
  }
}
 800374a:	37e8      	adds	r7, #232	@ 0xe8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b090      	sub	sp, #64	@ 0x40
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d137      	bne.n	800381c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80037ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ae:	2200      	movs	r2, #0
 80037b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	623b      	str	r3, [r7, #32]
   return(result);
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80037d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e5      	bne.n	80037b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003806:	61fa      	str	r2, [r7, #28]
 8003808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	69b9      	ldr	r1, [r7, #24]
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	617b      	str	r3, [r7, #20]
   return(result);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e5      	bne.n	80037e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800381a:	e002      	b.n	8003822 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800381c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800381e:	f003 fbd5 	bl	8006fcc <HAL_UART_TxCpltCallback>
}
 8003822:	bf00      	nop
 8003824:	3740      	adds	r7, #64	@ 0x40
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003836:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff ff89 	bl	8003750 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003856:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b21      	cmp	r3, #33	@ 0x21
 8003878:	d108      	bne.n	800388c <UART_DMAError+0x46>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2200      	movs	r2, #0
 8003884:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003886:	68b8      	ldr	r0, [r7, #8]
 8003888:	f000 f827 	bl	80038da <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003896:	2b40      	cmp	r3, #64	@ 0x40
 8003898:	bf0c      	ite	eq
 800389a:	2301      	moveq	r3, #1
 800389c:	2300      	movne	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b22      	cmp	r3, #34	@ 0x22
 80038ac:	d108      	bne.n	80038c0 <UART_DMAError+0x7a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	f000 f835 	bl	800392a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	f043 0210 	orr.w	r2, r3, #16
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038cc:	68b8      	ldr	r0, [r7, #8]
 80038ce:	f003 fb8d 	bl	8006fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038da:	b480      	push	{r7}
 80038dc:	b089      	sub	sp, #36	@ 0x24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	61ba      	str	r2, [r7, #24]
 8003904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6979      	ldr	r1, [r7, #20]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	613b      	str	r3, [r7, #16]
   return(result);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800391e:	bf00      	nop
 8003920:	3724      	adds	r7, #36	@ 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800392a:	b480      	push	{r7}
 800392c:	b095      	sub	sp, #84	@ 0x54
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003952:	643a      	str	r2, [r7, #64]	@ 0x40
 8003954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	61fb      	str	r3, [r7, #28]
   return(result);
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800398c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d119      	bne.n	80039d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f023 0310 	bic.w	r3, r3, #16
 80039b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039c2:	61ba      	str	r2, [r7, #24]
 80039c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6979      	ldr	r1, [r7, #20]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	613b      	str	r3, [r7, #16]
   return(result);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e5      	bne.n	80039a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039e4:	bf00      	nop
 80039e6:	3754      	adds	r7, #84	@ 0x54
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f003 faf1 	bl	8006fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b21      	cmp	r3, #33	@ 0x21
 8003a24:	d13e      	bne.n	8003aa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2e:	d114      	bne.n	8003a5a <UART_Transmit_IT+0x48>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d110      	bne.n	8003a5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	1c9a      	adds	r2, r3, #2
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	621a      	str	r2, [r3, #32]
 8003a58:	e008      	b.n	8003a6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	1c59      	adds	r1, r3, #1
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6211      	str	r1, [r2, #32]
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10f      	bne.n	8003aa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f003 fa7a 	bl	8006fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b08c      	sub	sp, #48	@ 0x30
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b22      	cmp	r3, #34	@ 0x22
 8003afc:	f040 80aa 	bne.w	8003c54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b08:	d115      	bne.n	8003b36 <UART_Receive_IT+0x54>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d111      	bne.n	8003b36 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2e:	1c9a      	adds	r2, r3, #2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b34:	e024      	b.n	8003b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b44:	d007      	beq.n	8003b56 <UART_Receive_IT+0x74>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <UART_Receive_IT+0x82>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e008      	b.n	8003b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d15d      	bne.n	8003c50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0220 	bic.w	r2, r2, #32
 8003ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d135      	bne.n	8003c46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f023 0310 	bic.w	r3, r3, #16
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c00:	623a      	str	r2, [r7, #32]
 8003c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	69f9      	ldr	r1, [r7, #28]
 8003c06:	6a3a      	ldr	r2, [r7, #32]
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e5      	bne.n	8003be0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d10a      	bne.n	8003c38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fd9a 	bl	8003778 <HAL_UARTEx_RxEventCallback>
 8003c44:	e002      	b.n	8003c4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fd8c 	bl	8003764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e002      	b.n	8003c56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3730      	adds	r7, #48	@ 0x30
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c64:	b0c0      	sub	sp, #256	@ 0x100
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7c:	68d9      	ldr	r1, [r3, #12]
 8003c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	ea40 0301 	orr.w	r3, r0, r1
 8003c88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cb8:	f021 010c 	bic.w	r1, r1, #12
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cda:	6999      	ldr	r1, [r3, #24]
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	ea40 0301 	orr.w	r3, r0, r1
 8003ce6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b8f      	ldr	r3, [pc, #572]	@ (8003f2c <UART_SetConfig+0x2cc>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d005      	beq.n	8003d00 <UART_SetConfig+0xa0>
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8003f30 <UART_SetConfig+0x2d0>)
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d104      	bne.n	8003d0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d00:	f7fe f82c 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8003d04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d08:	e003      	b.n	8003d12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0a:	f7fe f813 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8003d0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d1c:	f040 810c 	bne.w	8003f38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	1891      	adds	r1, r2, r2
 8003d38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d3a:	415b      	adcs	r3, r3
 8003d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d42:	4621      	mov	r1, r4
 8003d44:	eb12 0801 	adds.w	r8, r2, r1
 8003d48:	4629      	mov	r1, r5
 8003d4a:	eb43 0901 	adc.w	r9, r3, r1
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d62:	4690      	mov	r8, r2
 8003d64:	4699      	mov	r9, r3
 8003d66:	4623      	mov	r3, r4
 8003d68:	eb18 0303 	adds.w	r3, r8, r3
 8003d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d70:	462b      	mov	r3, r5
 8003d72:	eb49 0303 	adc.w	r3, r9, r3
 8003d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d8e:	460b      	mov	r3, r1
 8003d90:	18db      	adds	r3, r3, r3
 8003d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d94:	4613      	mov	r3, r2
 8003d96:	eb42 0303 	adc.w	r3, r2, r3
 8003d9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003da0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003da4:	f7fc fa84 	bl	80002b0 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4b61      	ldr	r3, [pc, #388]	@ (8003f34 <UART_SetConfig+0x2d4>)
 8003dae:	fba3 2302 	umull	r2, r3, r3, r2
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	011c      	lsls	r4, r3, #4
 8003db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003dc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dd8:	4641      	mov	r1, r8
 8003dda:	eb12 0a01 	adds.w	sl, r2, r1
 8003dde:	4649      	mov	r1, r9
 8003de0:	eb43 0b01 	adc.w	fp, r3, r1
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003df0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df8:	4692      	mov	sl, r2
 8003dfa:	469b      	mov	fp, r3
 8003dfc:	4643      	mov	r3, r8
 8003dfe:	eb1a 0303 	adds.w	r3, sl, r3
 8003e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e06:	464b      	mov	r3, r9
 8003e08:	eb4b 0303 	adc.w	r3, fp, r3
 8003e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e24:	460b      	mov	r3, r1
 8003e26:	18db      	adds	r3, r3, r3
 8003e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	eb42 0303 	adc.w	r3, r2, r3
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e3a:	f7fc fa39 	bl	80002b0 <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <UART_SetConfig+0x2d4>)
 8003e46:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2264      	movs	r2, #100	@ 0x64
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	1acb      	subs	r3, r1, r3
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e5a:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <UART_SetConfig+0x2d4>)
 8003e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e68:	441c      	add	r4, r3
 8003e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	464b      	mov	r3, r9
 8003e80:	1891      	adds	r1, r2, r2
 8003e82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e84:	415b      	adcs	r3, r3
 8003e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	1851      	adds	r1, r2, r1
 8003e90:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e92:	4649      	mov	r1, r9
 8003e94:	414b      	adcs	r3, r1
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	00cb      	lsls	r3, r1, #3
 8003ea8:	4651      	mov	r1, sl
 8003eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eae:	4651      	mov	r1, sl
 8003eb0:	00ca      	lsls	r2, r1, #3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4642      	mov	r2, r8
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	eb42 0303 	adc.w	r3, r2, r3
 8003ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ed8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	18db      	adds	r3, r3, r3
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	eb42 0303 	adc.w	r3, r2, r3
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ef2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ef6:	f7fc f9db 	bl	80002b0 <__aeabi_uldivmod>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4b0d      	ldr	r3, [pc, #52]	@ (8003f34 <UART_SetConfig+0x2d4>)
 8003f00:	fba3 1302 	umull	r1, r3, r3, r2
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	2164      	movs	r1, #100	@ 0x64
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	3332      	adds	r3, #50	@ 0x32
 8003f12:	4a08      	ldr	r2, [pc, #32]	@ (8003f34 <UART_SetConfig+0x2d4>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	f003 0207 	and.w	r2, r3, #7
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4422      	add	r2, r4
 8003f26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f28:	e106      	b.n	8004138 <UART_SetConfig+0x4d8>
 8003f2a:	bf00      	nop
 8003f2c:	40011000 	.word	0x40011000
 8003f30:	40011400 	.word	0x40011400
 8003f34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f4a:	4642      	mov	r2, r8
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	1891      	adds	r1, r2, r2
 8003f50:	6239      	str	r1, [r7, #32]
 8003f52:	415b      	adcs	r3, r3
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f5a:	4641      	mov	r1, r8
 8003f5c:	1854      	adds	r4, r2, r1
 8003f5e:	4649      	mov	r1, r9
 8003f60:	eb43 0501 	adc.w	r5, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	00eb      	lsls	r3, r5, #3
 8003f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f72:	00e2      	lsls	r2, r4, #3
 8003f74:	4614      	mov	r4, r2
 8003f76:	461d      	mov	r5, r3
 8003f78:	4643      	mov	r3, r8
 8003f7a:	18e3      	adds	r3, r4, r3
 8003f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f80:	464b      	mov	r3, r9
 8003f82:	eb45 0303 	adc.w	r3, r5, r3
 8003f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	008b      	lsls	r3, r1, #2
 8003faa:	4621      	mov	r1, r4
 8003fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	008a      	lsls	r2, r1, #2
 8003fb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fb8:	f7fc f97a 	bl	80002b0 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4b60      	ldr	r3, [pc, #384]	@ (8004144 <UART_SetConfig+0x4e4>)
 8003fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	011c      	lsls	r4, r3, #4
 8003fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	61b9      	str	r1, [r7, #24]
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fec:	4641      	mov	r1, r8
 8003fee:	1851      	adds	r1, r2, r1
 8003ff0:	6139      	str	r1, [r7, #16]
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	414b      	adcs	r3, r1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004004:	4659      	mov	r1, fp
 8004006:	00cb      	lsls	r3, r1, #3
 8004008:	4651      	mov	r1, sl
 800400a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800400e:	4651      	mov	r1, sl
 8004010:	00ca      	lsls	r2, r1, #3
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	4603      	mov	r3, r0
 8004018:	4642      	mov	r2, r8
 800401a:	189b      	adds	r3, r3, r2
 800401c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004020:	464b      	mov	r3, r9
 8004022:	460a      	mov	r2, r1
 8004024:	eb42 0303 	adc.w	r3, r2, r3
 8004028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004036:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004044:	4649      	mov	r1, r9
 8004046:	008b      	lsls	r3, r1, #2
 8004048:	4641      	mov	r1, r8
 800404a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800404e:	4641      	mov	r1, r8
 8004050:	008a      	lsls	r2, r1, #2
 8004052:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004056:	f7fc f92b 	bl	80002b0 <__aeabi_uldivmod>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4611      	mov	r1, r2
 8004060:	4b38      	ldr	r3, [pc, #224]	@ (8004144 <UART_SetConfig+0x4e4>)
 8004062:	fba3 2301 	umull	r2, r3, r3, r1
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2264      	movs	r2, #100	@ 0x64
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	1acb      	subs	r3, r1, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	@ 0x32
 8004074:	4a33      	ldr	r2, [pc, #204]	@ (8004144 <UART_SetConfig+0x4e4>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004080:	441c      	add	r4, r3
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	673b      	str	r3, [r7, #112]	@ 0x70
 800408a:	677a      	str	r2, [r7, #116]	@ 0x74
 800408c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	1891      	adds	r1, r2, r2
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	415b      	adcs	r3, r3
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a0:	4641      	mov	r1, r8
 80040a2:	1851      	adds	r1, r2, r1
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	4649      	mov	r1, r9
 80040a8:	414b      	adcs	r3, r1
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040b8:	4659      	mov	r1, fp
 80040ba:	00cb      	lsls	r3, r1, #3
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c2:	4651      	mov	r1, sl
 80040c4:	00ca      	lsls	r2, r1, #3
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	4642      	mov	r2, r8
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040d2:	464b      	mov	r3, r9
 80040d4:	460a      	mov	r2, r1
 80040d6:	eb42 0303 	adc.w	r3, r2, r3
 80040da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80040e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040f4:	4649      	mov	r1, r9
 80040f6:	008b      	lsls	r3, r1, #2
 80040f8:	4641      	mov	r1, r8
 80040fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fe:	4641      	mov	r1, r8
 8004100:	008a      	lsls	r2, r1, #2
 8004102:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004106:	f7fc f8d3 	bl	80002b0 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4b0d      	ldr	r3, [pc, #52]	@ (8004144 <UART_SetConfig+0x4e4>)
 8004110:	fba3 1302 	umull	r1, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2164      	movs	r1, #100	@ 0x64
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3332      	adds	r3, #50	@ 0x32
 8004122:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <UART_SetConfig+0x4e4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4422      	add	r2, r4
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800413e:	46bd      	mov	sp, r7
 8004140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004144:	51eb851f 	.word	0x51eb851f

08004148 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800414c:	f001 fa08 	bl	8005560 <vTaskStartScheduler>
  
  return osOK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	bd80      	pop	{r7, pc}

08004156 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f103 0208 	add.w	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f04f 32ff 	mov.w	r2, #4294967295
 800416e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 0208 	add.w	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f103 0208 	add.w	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d103      	bne.n	8004218 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e00c      	b.n	8004232 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3308      	adds	r3, #8
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e002      	b.n	8004226 <vListInsert+0x2e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d2f6      	bcs.n	8004220 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6892      	ldr	r2, [r2, #8]
 8004280:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6852      	ldr	r2, [r2, #4]
 800428a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	d103      	bne.n	800429e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	1e5a      	subs	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042ec:	f002 fb04 	bl	80068f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	441a      	add	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431c:	3b01      	subs	r3, #1
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	441a      	add	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	22ff      	movs	r2, #255	@ 0xff
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	22ff      	movs	r2, #255	@ 0xff
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d114      	bne.n	800436c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01a      	beq.n	8004380 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3310      	adds	r3, #16
 800434e:	4618      	mov	r0, r3
 8004350:	f001 fb6e 	bl	8005a30 <xTaskRemoveFromEventList>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d012      	beq.n	8004380 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <xQueueGenericReset+0xd0>)
 800435c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	e009      	b.n	8004380 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3310      	adds	r3, #16
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fef0 	bl	8004156 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3324      	adds	r3, #36	@ 0x24
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff feeb 	bl	8004156 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004380:	f002 faec 	bl	800695c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004384:	2301      	movs	r3, #1
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	@ 0x28
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <xQueueGenericCreate+0x2c>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	613b      	str	r3, [r7, #16]
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	e7fd      	b.n	80043bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	fb02 f303 	mul.w	r3, r2, r3
 80043c8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3350      	adds	r3, #80	@ 0x50
 80043ce:	4618      	mov	r0, r3
 80043d0:	f002 fbb4 	bl	8006b3c <pvPortMalloc>
 80043d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d011      	beq.n	8004400 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3350      	adds	r3, #80	@ 0x50
 80043e4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ee:	79fa      	ldrb	r2, [r7, #7]
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f805 	bl	800440a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004400:	69bb      	ldr	r3, [r7, #24]
	}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e002      	b.n	800442c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004438:	2101      	movs	r1, #1
 800443a:	69b8      	ldr	r0, [r7, #24]
 800443c:	f7ff ff40 	bl	80042c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00e      	beq.n	800447c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004470:	2300      	movs	r3, #0
 8004472:	2200      	movs	r2, #0
 8004474:	2100      	movs	r1, #0
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f81c 	bl	80044b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800448e:	2301      	movs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	461a      	mov	r2, r3
 800449a:	6939      	ldr	r1, [r7, #16]
 800449c:	6978      	ldr	r0, [r7, #20]
 800449e:	f7ff ff79 	bl	8004394 <xQueueGenericCreate>
 80044a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff ffd3 	bl	8004450 <prvInitialiseMutex>

		return xNewQueue;
 80044aa:	68fb      	ldr	r3, [r7, #12]
	}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08e      	sub	sp, #56	@ 0x38
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044c2:	2300      	movs	r3, #0
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <xQueueGenericSend+0x34>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <xQueueGenericSend+0x42>
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <xQueueGenericSend+0x46>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <xQueueGenericSend+0x48>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <xQueueGenericSend+0x64>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d103      	bne.n	8004526 <xQueueGenericSend+0x72>
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <xQueueGenericSend+0x76>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <xQueueGenericSend+0x78>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <xQueueGenericSend+0x94>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	623b      	str	r3, [r7, #32]
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004548:	f001 fc6c 	bl	8005e24 <xTaskGetSchedulerState>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <xQueueGenericSend+0xa4>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <xQueueGenericSend+0xa8>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <xQueueGenericSend+0xaa>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <xQueueGenericSend+0xc6>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	61fb      	str	r3, [r7, #28]
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	e7fd      	b.n	8004576 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800457a:	f002 f9bd 	bl	80068f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <xQueueGenericSend+0xdc>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d129      	bne.n	80045e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004596:	f000 f9b7 	bl	8004908 <prvCopyDataToQueue>
 800459a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	3324      	adds	r3, #36	@ 0x24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f001 fa41 	bl	8005a30 <xTaskRemoveFromEventList>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d013      	beq.n	80045dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045b4:	4b3f      	ldr	r3, [pc, #252]	@ (80046b4 <xQueueGenericSend+0x200>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	e00a      	b.n	80045dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045cc:	4b39      	ldr	r3, [pc, #228]	@ (80046b4 <xQueueGenericSend+0x200>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045dc:	f002 f9be 	bl	800695c <vPortExitCritical>
				return pdPASS;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e063      	b.n	80046ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045ea:	f002 f9b7 	bl	800695c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e05c      	b.n	80046ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045f8:	f107 0314 	add.w	r3, r7, #20
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 faa3 	bl	8005b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004602:	2301      	movs	r3, #1
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004606:	f002 f9a9 	bl	800695c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800460a:	f001 f80d 	bl	8005628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800460e:	f002 f973 	bl	80068f8 <vPortEnterCritical>
 8004612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004618:	b25b      	sxtb	r3, r3
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d103      	bne.n	8004628 <xQueueGenericSend+0x174>
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800462e:	b25b      	sxtb	r3, r3
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d103      	bne.n	800463e <xQueueGenericSend+0x18a>
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800463e:	f002 f98d 	bl	800695c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004642:	1d3a      	adds	r2, r7, #4
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f001 fa92 	bl	8005b74 <xTaskCheckForTimeOut>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d124      	bne.n	80046a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004656:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004658:	f000 fa28 	bl	8004aac <prvIsQueueFull>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	3310      	adds	r3, #16
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f001 f9ba 	bl	80059e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004672:	f000 f9b3 	bl	80049dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004676:	f000 ffe5 	bl	8005644 <xTaskResumeAll>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	f47f af7c 	bne.w	800457a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004682:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <xQueueGenericSend+0x200>)
 8004684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	e772      	b.n	800457a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004696:	f000 f9a1 	bl	80049dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800469a:	f000 ffd3 	bl	8005644 <xTaskResumeAll>
 800469e:	e76c      	b.n	800457a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046a2:	f000 f99b 	bl	80049dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046a6:	f000 ffcd 	bl	8005644 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3738      	adds	r7, #56	@ 0x38
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08e      	sub	sp, #56	@ 0x38
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <xQueueSemaphoreTake+0x34>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	623b      	str	r3, [r7, #32]
}
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <xQueueSemaphoreTake+0x54>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	61fb      	str	r3, [r7, #28]
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800470c:	f001 fb8a 	bl	8005e24 <xTaskGetSchedulerState>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <xQueueSemaphoreTake+0x64>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <xQueueSemaphoreTake+0x68>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <xQueueSemaphoreTake+0x6a>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10b      	bne.n	800473e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	61bb      	str	r3, [r7, #24]
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800473e:	f002 f8db 	bl	80068f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d024      	beq.n	8004798 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004754:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800475e:	f001 fd0d 	bl	800617c <pvTaskIncrementMutexHeldCount>
 8004762:	4602      	mov	r2, r0
 8004764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004766:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00f      	beq.n	8004790 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004772:	3310      	adds	r3, #16
 8004774:	4618      	mov	r0, r3
 8004776:	f001 f95b 	bl	8005a30 <xTaskRemoveFromEventList>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004780:	4b54      	ldr	r3, [pc, #336]	@ (80048d4 <xQueueSemaphoreTake+0x21c>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004790:	f002 f8e4 	bl	800695c <vPortExitCritical>
				return pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	e098      	b.n	80048ca <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d112      	bne.n	80047c4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00b      	beq.n	80047bc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	617b      	str	r3, [r7, #20]
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047bc:	f002 f8ce 	bl	800695c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e082      	b.n	80048ca <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f9ba 	bl	8005b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047d8:	f002 f8c0 	bl	800695c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047dc:	f000 ff24 	bl	8005628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047e0:	f002 f88a 	bl	80068f8 <vPortEnterCritical>
 80047e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047ea:	b25b      	sxtb	r3, r3
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d103      	bne.n	80047fa <xQueueSemaphoreTake+0x142>
 80047f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004800:	b25b      	sxtb	r3, r3
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d103      	bne.n	8004810 <xQueueSemaphoreTake+0x158>
 8004808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004810:	f002 f8a4 	bl	800695c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004814:	463a      	mov	r2, r7
 8004816:	f107 030c 	add.w	r3, r7, #12
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f9a9 	bl	8005b74 <xTaskCheckForTimeOut>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d132      	bne.n	800488e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004828:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800482a:	f000 f929 	bl	8004a80 <prvIsQueueEmpty>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d026      	beq.n	8004882 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800483c:	f002 f85c 	bl	80068f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4618      	mov	r0, r3
 8004846:	f001 fb0b 	bl	8005e60 <xTaskPriorityInherit>
 800484a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800484c:	f002 f886 	bl	800695c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004852:	3324      	adds	r3, #36	@ 0x24
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f001 f8c3 	bl	80059e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800485e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004860:	f000 f8bc 	bl	80049dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004864:	f000 feee 	bl	8005644 <xTaskResumeAll>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	f47f af67 	bne.w	800473e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004870:	4b18      	ldr	r3, [pc, #96]	@ (80048d4 <xQueueSemaphoreTake+0x21c>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	e75d      	b.n	800473e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004882:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004884:	f000 f8aa 	bl	80049dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004888:	f000 fedc 	bl	8005644 <xTaskResumeAll>
 800488c:	e757      	b.n	800473e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800488e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004890:	f000 f8a4 	bl	80049dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004894:	f000 fed6 	bl	8005644 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004898:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800489a:	f000 f8f1 	bl	8004a80 <prvIsQueueEmpty>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f43f af4c 	beq.w	800473e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00d      	beq.n	80048c8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80048ac:	f002 f824 	bl	80068f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048b2:	f000 f811 	bl	80048d8 <prvGetDisinheritPriorityAfterTimeout>
 80048b6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 fbcc 	bl	800605c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048c4:	f002 f84a 	bl	800695c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3738      	adds	r7, #56	@ 0x38
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1c3 0307 	rsb	r3, r3, #7
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e001      	b.n	80048fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048fa:	68fb      	ldr	r3, [r7, #12]
	}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d14d      	bne.n	80049ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fb0a 	bl	8005f4c <xTaskPriorityDisinherit>
 8004938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	e043      	b.n	80049ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d119      	bne.n	800497c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6858      	ldr	r0, [r3, #4]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	461a      	mov	r2, r3
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	f002 fe38 	bl	80075c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	d32b      	bcc.n	80049ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	e026      	b.n	80049ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68d8      	ldr	r0, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	461a      	mov	r2, r3
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	f002 fe1e 	bl	80075c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	425b      	negs	r3, r3
 8004996:	441a      	add	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d207      	bcs.n	80049b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	425b      	negs	r3, r3
 80049b2:	441a      	add	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d105      	bne.n	80049ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80049d2:	697b      	ldr	r3, [r7, #20]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049e4:	f001 ff88 	bl	80068f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049f0:	e011      	b.n	8004a16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d012      	beq.n	8004a20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3324      	adds	r3, #36	@ 0x24
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 f816 	bl	8005a30 <xTaskRemoveFromEventList>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a0a:	f001 f917 	bl	8005c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dce9      	bgt.n	80049f2 <prvUnlockQueue+0x16>
 8004a1e:	e000      	b.n	8004a22 <prvUnlockQueue+0x46>
					break;
 8004a20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	22ff      	movs	r2, #255	@ 0xff
 8004a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a2a:	f001 ff97 	bl	800695c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a2e:	f001 ff63 	bl	80068f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a3a:	e011      	b.n	8004a60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d012      	beq.n	8004a6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3310      	adds	r3, #16
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fff1 	bl	8005a30 <xTaskRemoveFromEventList>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a54:	f001 f8f2 	bl	8005c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a58:	7bbb      	ldrb	r3, [r7, #14]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dce9      	bgt.n	8004a3c <prvUnlockQueue+0x60>
 8004a68:	e000      	b.n	8004a6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	22ff      	movs	r2, #255	@ 0xff
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a74:	f001 ff72 	bl	800695c <vPortExitCritical>
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a88:	f001 ff36 	bl	80068f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e001      	b.n	8004a9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a9e:	f001 ff5d 	bl	800695c <vPortExitCritical>

	return xReturn;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ab4:	f001 ff20 	bl	80068f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d102      	bne.n	8004aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e001      	b.n	8004ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ace:	f001 ff45 	bl	800695c <vPortExitCritical>

	return xReturn;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	@ 0x30
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d111      	bne.n	8004b12 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d81d      	bhi.n	8004b36 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	61fb      	str	r3, [r7, #28]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	61bb      	str	r3, [r7, #24]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d90b      	bls.n	8004b56 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	617b      	str	r3, [r7, #20]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3324      	adds	r3, #36	@ 0x24
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 ffe6 	bl	8006b3c <pvPortMalloc>
 8004b70:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8004b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6a38      	ldr	r0, [r7, #32]
 8004b8a:	f000 fb0b 	bl	80051a4 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
	}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3728      	adds	r7, #40	@ 0x28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60fb      	str	r3, [r7, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	e7fd      	b.n	8004bbe <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4413      	add	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d304      	bcc.n	8004bf2 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8004bf2:	697b      	ldr	r3, [r7, #20]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b090      	sub	sp, #64	@ 0x40
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <xStreamBufferSend+0x38>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8004c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <xStreamBufferSend+0x56>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	623b      	str	r3, [r7, #32]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c58:	7f1b      	ldrb	r3, [r3, #28]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	3304      	adds	r3, #4
 8004c66:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8004c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d80b      	bhi.n	8004c88 <xStreamBufferSend+0x88>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	61fb      	str	r3, [r7, #28]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03f      	beq.n	8004d0e <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8004c8e:	f107 0310 	add.w	r3, r7, #16
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 ff30 	bl	8005af8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8004c98:	f001 fe2e 	bl	80068f8 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004c9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c9e:	f7ff ff7b 	bl	8004b98 <xStreamBufferSpacesAvailable>
 8004ca2:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8004ca4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d218      	bcs.n	8004cde <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8004cac:	2000      	movs	r0, #0
 8004cae:	f001 fc67 	bl	8006580 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <xStreamBufferSend+0xd2>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	61bb      	str	r3, [r7, #24]
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	e7fd      	b.n	8004cce <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8004cd2:	f001 f897 	bl	8005e04 <xTaskGetCurrentTaskHandle>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cda:	615a      	str	r2, [r3, #20]
 8004cdc:	e002      	b.n	8004ce4 <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8004cde:	f001 fe3d 	bl	800695c <vPortExitCritical>
					break;
 8004ce2:	e014      	b.n	8004d0e <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 8004ce4:	f001 fe3a 	bl	800695c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2100      	movs	r1, #0
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f001 faa0 	bl	8006234 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8004cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8004cfa:	463a      	mov	r2, r7
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 ff36 	bl	8005b74 <xTaskCheckForTimeOut>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0c4      	beq.n	8004c98 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d103      	bne.n	8004d1c <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004d14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d16:	f7ff ff3f 	bl	8004b98 <xStreamBufferSpacesAvailable>
 8004d1a:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d28:	f000 f823 	bl	8004d72 <prvWriteMessageToBuffer>
 8004d2c:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <xStreamBufferSend+0x168>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004d34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d36:	f000 fa15 	bl	8005164 <prvBytesInBuffer>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d311      	bcc.n	8004d68 <xStreamBufferSend+0x168>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8004d44:	f000 fc70 	bl	8005628 <vTaskSuspendAll>
 8004d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <xStreamBufferSend+0x164>
 8004d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d52:	6918      	ldr	r0, [r3, #16]
 8004d54:	2300      	movs	r3, #0
 8004d56:	2200      	movs	r2, #0
 8004d58:	2100      	movs	r1, #0
 8004d5a:	f001 fac5 	bl	80062e8 <xTaskGenericNotify>
 8004d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d60:	2200      	movs	r2, #0
 8004d62:	611a      	str	r2, [r3, #16]
 8004d64:	f000 fc6e 	bl	8005644 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8004d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3738      	adds	r7, #56	@ 0x38
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b086      	sub	sp, #24
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e01d      	b.n	8004dc8 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	7f1b      	ldrb	r3, [r3, #28]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	bf28      	it	cs
 8004da4:	4613      	movcs	r3, r2
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	e00e      	b.n	8004dc8 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d308      	bcc.n	8004dc4 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8004db2:	2301      	movs	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004db6:	1d3b      	adds	r3, r7, #4
 8004db8:	2204      	movs	r2, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f8df 	bl	8004f80 <prvWriteBytesToBuffer>
 8004dc2:	e001      	b.n	8004dc8 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f8d3 	bl	8004f80 <prvWriteBytesToBuffer>
 8004dda:	6138      	str	r0, [r7, #16]
 8004ddc:	e001      	b.n	8004de2 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8004de2:	693b      	ldr	r3, [r7, #16]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08e      	sub	sp, #56	@ 0x38
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <xStreamBufferReceive+0x34>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	61fb      	str	r3, [r7, #28]
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <xStreamBufferReceive+0x52>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	61bb      	str	r3, [r7, #24]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	7f1b      	ldrb	r3, [r3, #28]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4e:	e001      	b.n	8004e54 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d035      	beq.n	8004ec6 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8004e5a:	f001 fd4d 	bl	80068f8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004e5e:	6a38      	ldr	r0, [r7, #32]
 8004e60:	f000 f980 	bl	8005164 <prvBytesInBuffer>
 8004e64:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d817      	bhi.n	8004e9e <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f001 fb86 	bl	8006580 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <xStreamBufferReceive+0xa8>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	617b      	str	r3, [r7, #20]
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8004e94:	f000 ffb6 	bl	8005e04 <xTaskGetCurrentTaskHandle>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004e9e:	f001 fd5d 	bl	800695c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d811      	bhi.n	8004ece <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f001 f9bf 	bl	8006234 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004ebc:	6a38      	ldr	r0, [r7, #32]
 8004ebe:	f000 f951 	bl	8005164 <prvBytesInBuffer>
 8004ec2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004ec4:	e003      	b.n	8004ece <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004ec6:	6a38      	ldr	r0, [r7, #32]
 8004ec8:	f000 f94c 	bl	8005164 <prvBytesInBuffer>
 8004ecc:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8004ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d91d      	bls.n	8004f12 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	6a38      	ldr	r0, [r7, #32]
 8004ee2:	f000 f81b 	bl	8004f1c <prvReadMessageFromBuffer>
 8004ee6:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d011      	beq.n	8004f12 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8004eee:	f000 fb9b 	bl	8005628 <vTaskSuspendAll>
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <xStreamBufferReceive+0x122>
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	6958      	ldr	r0, [r3, #20]
 8004efe:	2300      	movs	r3, #0
 8004f00:	2200      	movs	r2, #0
 8004f02:	2100      	movs	r1, #0
 8004f04:	f001 f9f0 	bl	80062e8 <xTaskGenericNotify>
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	615a      	str	r2, [r3, #20]
 8004f0e:	f000 fb99 	bl	8005644 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8004f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3730      	adds	r7, #48	@ 0x30
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8004f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d019      	beq.n	8004f64 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8004f36:	f107 0110 	add.w	r1, r7, #16
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f893 	bl	800506a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d907      	bls.n	8004f68 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e001      	b.n	8004f68 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f87b 	bl	800506a <prvReadBytesFromBuffer>
 8004f74:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8004f76:	697b      	ldr	r3, [r7, #20]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3720      	adds	r7, #32
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	@ 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	61fb      	str	r3, [r7, #28]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	bf28      	it	cs
 8004fbe:	4613      	movcs	r3, r2
 8004fc0:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	441a      	add	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d90b      	bls.n	8004fe8 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	61bb      	str	r3, [r7, #24]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	4413      	add	r3, r2
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 fae7 	bl	80075c8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d91d      	bls.n	800503e <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	429a      	cmp	r2, r3
 800500e:	d90b      	bls.n	8005028 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	617b      	str	r3, [r7, #20]
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6998      	ldr	r0, [r3, #24]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	18d1      	adds	r1, r2, r3
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	461a      	mov	r2, r3
 800503a:	f002 fac5 	bl	80075c8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800503e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504c:	429a      	cmp	r2, r3
 800504e:	d304      	bcc.n	800505a <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505e:	605a      	str	r2, [r3, #4]

	return xCount;
 8005060:	687b      	ldr	r3, [r7, #4]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3728      	adds	r7, #40	@ 0x28
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08a      	sub	sp, #40	@ 0x28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	4293      	cmp	r3, r2
 800507e:	bf28      	it	cs
 8005080:	4613      	movcs	r3, r2
 8005082:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d067      	beq.n	800515a <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	4293      	cmp	r3, r2
 800509c:	bf28      	it	cs
 800509e:	4613      	movcs	r3, r2
 80050a0:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d90b      	bls.n	80050c2 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	61bb      	str	r3, [r7, #24]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	441a      	add	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d90b      	bls.n	80050e8 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	617b      	str	r3, [r7, #20]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	4413      	add	r3, r2
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	4619      	mov	r1, r3
 80050f4:	68b8      	ldr	r0, [r7, #8]
 80050f6:	f002 fa67 	bl	80075c8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80050fa:	6a3a      	ldr	r2, [r7, #32]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d91a      	bls.n	8005138 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8005102:	6a3a      	ldr	r2, [r7, #32]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	d90b      	bls.n	8005122 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	613b      	str	r3, [r7, #16]
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	e7fd      	b.n	800511e <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	18d0      	adds	r0, r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6999      	ldr	r1, [r3, #24]
 800512c:	6a3a      	ldr	r2, [r7, #32]
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	461a      	mov	r2, r3
 8005134:	f002 fa48 	bl	80075c8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8005138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	4413      	add	r3, r2
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005146:	429a      	cmp	r2, r3
 8005148:	d304      	bcc.n	8005154 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005158:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800515a:	6a3b      	ldr	r3, [r7, #32]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3728      	adds	r7, #40	@ 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4413      	add	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	429a      	cmp	r2, r3
 800518a:	d304      	bcc.n	8005196 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80051b2:	2355      	movs	r3, #85	@ 0x55
 80051b4:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6979      	ldr	r1, [r7, #20]
 80051ba:	68b8      	ldr	r0, [r7, #8]
 80051bc:	f002 f9d0 	bl	8007560 <memset>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	613b      	str	r3, [r7, #16]
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80051e0:	2224      	movs	r2, #36	@ 0x24
 80051e2:	2100      	movs	r1, #0
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f002 f9bb 	bl	8007560 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005202:	771a      	strb	r2, [r3, #28]
}
 8005204:	bf00      	nop
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08e      	sub	sp, #56	@ 0x38
 8005210:	af04      	add	r7, sp, #16
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800521a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <xTaskCreateStatic+0x4a>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	61fb      	str	r3, [r7, #28]
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	e7fd      	b.n	8005252 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005256:	2364      	movs	r3, #100	@ 0x64
 8005258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b64      	cmp	r3, #100	@ 0x64
 800525e:	d00b      	beq.n	8005278 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61bb      	str	r3, [r7, #24]
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	e7fd      	b.n	8005274 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005278:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01e      	beq.n	80052be <xTaskCreateStatic+0xb2>
 8005280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01b      	beq.n	80052be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005298:	2300      	movs	r3, #0
 800529a:	9303      	str	r3, [sp, #12]
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	9302      	str	r3, [sp, #8]
 80052a0:	f107 0314 	add.w	r3, r7, #20
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f850 	bl	8005356 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052b8:	f000 f8e4 	bl	8005484 <prvAddNewTaskToReadyList>
 80052bc:	e001      	b.n	80052c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052c2:	697b      	ldr	r3, [r7, #20]
	}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3728      	adds	r7, #40	@ 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	@ 0x30
 80052d0:	af04      	add	r7, sp, #16
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 fc2b 	bl	8006b3c <pvPortMalloc>
 80052e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00e      	beq.n	800530c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052ee:	2064      	movs	r0, #100	@ 0x64
 80052f0:	f001 fc24 	bl	8006b3c <pvPortMalloc>
 80052f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
 8005302:	e005      	b.n	8005310 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005304:	6978      	ldr	r0, [r7, #20]
 8005306:	f001 fce7 	bl	8006cd8 <vPortFree>
 800530a:	e001      	b.n	8005310 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	2300      	movs	r3, #0
 8005322:	9303      	str	r3, [sp, #12]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	9302      	str	r3, [sp, #8]
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f80e 	bl	8005356 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800533a:	69f8      	ldr	r0, [r7, #28]
 800533c:	f000 f8a2 	bl	8005484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005340:	2301      	movs	r3, #1
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	e002      	b.n	800534c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005346:	f04f 33ff 	mov.w	r3, #4294967295
 800534a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800534c:	69bb      	ldr	r3, [r7, #24]
	}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b088      	sub	sp, #32
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	461a      	mov	r2, r3
 800536e:	21a5      	movs	r1, #165	@ 0xa5
 8005370:	f002 f8f6 	bl	8007560 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800537e:	3b01      	subs	r3, #1
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f023 0307 	bic.w	r3, r3, #7
 800538c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	617b      	str	r3, [r7, #20]
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01f      	beq.n	80053fc <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053bc:	2300      	movs	r3, #0
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	e012      	b.n	80053e8 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	7819      	ldrb	r1, [r3, #0]
 80053ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	3334      	adds	r3, #52	@ 0x34
 80053d2:	460a      	mov	r2, r1
 80053d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d006      	beq.n	80053f0 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3301      	adds	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b0f      	cmp	r3, #15
 80053ec:	d9e9      	bls.n	80053c2 <prvInitialiseNewTask+0x6c>
 80053ee:	e000      	b.n	80053f2 <prvInitialiseNewTask+0x9c>
			{
				break;
 80053f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053fa:	e003      	b.n	8005404 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	2b06      	cmp	r3, #6
 8005408:	d901      	bls.n	800540e <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800540a:	2306      	movs	r3, #6
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005412:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005418:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	2200      	movs	r2, #0
 800541e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005422:	3304      	adds	r3, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe feb6 	bl	8004196 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542c:	3318      	adds	r3, #24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe feb1 	bl	8004196 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005438:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	f1c3 0207 	rsb	r2, r3, #7
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005448:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	2200      	movs	r2, #0
 800544e:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	2200      	movs	r2, #0
 8005454:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	69b8      	ldr	r0, [r7, #24]
 8005464:	f001 f918 	bl	8006698 <pxPortInitialiseStack>
 8005468:	4602      	mov	r2, r0
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547a:	bf00      	nop
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800548c:	f001 fa34 	bl	80068f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005490:	4b2c      	ldr	r3, [pc, #176]	@ (8005544 <prvAddNewTaskToReadyList+0xc0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	4a2b      	ldr	r2, [pc, #172]	@ (8005544 <prvAddNewTaskToReadyList+0xc0>)
 8005498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800549a:	4b2b      	ldr	r3, [pc, #172]	@ (8005548 <prvAddNewTaskToReadyList+0xc4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054a2:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <prvAddNewTaskToReadyList+0xc4>)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054a8:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <prvAddNewTaskToReadyList+0xc0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d110      	bne.n	80054d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054b0:	f000 fbea 	bl	8005c88 <prvInitialiseTaskLists>
 80054b4:	e00d      	b.n	80054d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054b6:	4b25      	ldr	r3, [pc, #148]	@ (800554c <prvAddNewTaskToReadyList+0xc8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054be:	4b22      	ldr	r3, [pc, #136]	@ (8005548 <prvAddNewTaskToReadyList+0xc4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d802      	bhi.n	80054d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005548 <prvAddNewTaskToReadyList+0xc4>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <prvAddNewTaskToReadyList+0xcc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <prvAddNewTaskToReadyList+0xcc>)
 80054da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005550 <prvAddNewTaskToReadyList+0xcc>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	2201      	movs	r2, #1
 80054ea:	409a      	lsls	r2, r3
 80054ec:	4b19      	ldr	r3, [pc, #100]	@ (8005554 <prvAddNewTaskToReadyList+0xd0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	4a18      	ldr	r2, [pc, #96]	@ (8005554 <prvAddNewTaskToReadyList+0xd0>)
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <prvAddNewTaskToReadyList+0xd4>)
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3304      	adds	r3, #4
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7fe fe4f 	bl	80041b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005512:	f001 fa23 	bl	800695c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <prvAddNewTaskToReadyList+0xc8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00e      	beq.n	800553c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800551e:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <prvAddNewTaskToReadyList+0xc4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	429a      	cmp	r2, r3
 800552a:	d207      	bcs.n	800553c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800552c:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <prvAddNewTaskToReadyList+0xd8>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000524 	.word	0x20000524
 8005548:	20000424 	.word	0x20000424
 800554c:	20000530 	.word	0x20000530
 8005550:	20000540 	.word	0x20000540
 8005554:	2000052c 	.word	0x2000052c
 8005558:	20000428 	.word	0x20000428
 800555c:	e000ed04 	.word	0xe000ed04

08005560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	@ 0x28
 8005564:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800556e:	463a      	mov	r2, r7
 8005570:	1d39      	adds	r1, r7, #4
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	4618      	mov	r0, r3
 8005578:	f7fb f838 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	9202      	str	r2, [sp, #8]
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	2300      	movs	r3, #0
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2300      	movs	r3, #0
 800558c:	460a      	mov	r2, r1
 800558e:	4920      	ldr	r1, [pc, #128]	@ (8005610 <vTaskStartScheduler+0xb0>)
 8005590:	4820      	ldr	r0, [pc, #128]	@ (8005614 <vTaskStartScheduler+0xb4>)
 8005592:	f7ff fe3b 	bl	800520c <xTaskCreateStatic>
 8005596:	4603      	mov	r3, r0
 8005598:	4a1f      	ldr	r2, [pc, #124]	@ (8005618 <vTaskStartScheduler+0xb8>)
 800559a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800559c:	4b1e      	ldr	r3, [pc, #120]	@ (8005618 <vTaskStartScheduler+0xb8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055a4:	2301      	movs	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e001      	b.n	80055ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d118      	bne.n	80055e6 <vTaskStartScheduler+0x86>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	613b      	str	r3, [r7, #16]
}
 80055c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055c8:	4b14      	ldr	r3, [pc, #80]	@ (800561c <vTaskStartScheduler+0xbc>)
 80055ca:	f04f 32ff 	mov.w	r2, #4294967295
 80055ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <vTaskStartScheduler+0xc0>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055d6:	4b13      	ldr	r3, [pc, #76]	@ (8005624 <vTaskStartScheduler+0xc4>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80055dc:	f7fb f9ac 	bl	8000938 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055e0:	f001 f8e6 	bl	80067b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055e4:	e00f      	b.n	8005606 <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ec:	d10b      	bne.n	8005606 <vTaskStartScheduler+0xa6>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60fb      	str	r3, [r7, #12]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <vTaskStartScheduler+0xa2>
}
 8005606:	bf00      	nop
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08007e74 	.word	0x08007e74
 8005614:	08005c55 	.word	0x08005c55
 8005618:	20000548 	.word	0x20000548
 800561c:	20000544 	.word	0x20000544
 8005620:	20000530 	.word	0x20000530
 8005624:	20000528 	.word	0x20000528

08005628 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800562c:	4b04      	ldr	r3, [pc, #16]	@ (8005640 <vTaskSuspendAll+0x18>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	4a03      	ldr	r2, [pc, #12]	@ (8005640 <vTaskSuspendAll+0x18>)
 8005634:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	2000054c 	.word	0x2000054c

08005644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005652:	4b42      	ldr	r3, [pc, #264]	@ (800575c <xTaskResumeAll+0x118>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <xTaskResumeAll+0x2e>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	603b      	str	r3, [r7, #0]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005672:	f001 f941 	bl	80068f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005676:	4b39      	ldr	r3, [pc, #228]	@ (800575c <xTaskResumeAll+0x118>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3b01      	subs	r3, #1
 800567c:	4a37      	ldr	r2, [pc, #220]	@ (800575c <xTaskResumeAll+0x118>)
 800567e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005680:	4b36      	ldr	r3, [pc, #216]	@ (800575c <xTaskResumeAll+0x118>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d161      	bne.n	800574c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005688:	4b35      	ldr	r3, [pc, #212]	@ (8005760 <xTaskResumeAll+0x11c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d05d      	beq.n	800574c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005690:	e02e      	b.n	80056f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005692:	4b34      	ldr	r3, [pc, #208]	@ (8005764 <xTaskResumeAll+0x120>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3318      	adds	r3, #24
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fde3 	bl	800426a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe fdde 	bl	800426a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	2201      	movs	r2, #1
 80056b4:	409a      	lsls	r2, r3
 80056b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005768 <xTaskResumeAll+0x124>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005768 <xTaskResumeAll+0x124>)
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4a27      	ldr	r2, [pc, #156]	@ (800576c <xTaskResumeAll+0x128>)
 80056ce:	441a      	add	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	f7fe fd6a 	bl	80041b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e0:	4b23      	ldr	r3, [pc, #140]	@ (8005770 <xTaskResumeAll+0x12c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056ea:	4b22      	ldr	r3, [pc, #136]	@ (8005774 <xTaskResumeAll+0x130>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005764 <xTaskResumeAll+0x120>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1cc      	bne.n	8005692 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056fe:	f000 fb61 	bl	8005dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005702:	4b1d      	ldr	r3, [pc, #116]	@ (8005778 <xTaskResumeAll+0x134>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d010      	beq.n	8005730 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800570e:	f000 f837 	bl	8005780 <xTaskIncrementTick>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005718:	4b16      	ldr	r3, [pc, #88]	@ (8005774 <xTaskResumeAll+0x130>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3b01      	subs	r3, #1
 8005722:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f1      	bne.n	800570e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800572a:	4b13      	ldr	r3, [pc, #76]	@ (8005778 <xTaskResumeAll+0x134>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005730:	4b10      	ldr	r3, [pc, #64]	@ (8005774 <xTaskResumeAll+0x130>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800573c:	4b0f      	ldr	r3, [pc, #60]	@ (800577c <xTaskResumeAll+0x138>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800574c:	f001 f906 	bl	800695c <vPortExitCritical>

	return xAlreadyYielded;
 8005750:	68bb      	ldr	r3, [r7, #8]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	2000054c 	.word	0x2000054c
 8005760:	20000524 	.word	0x20000524
 8005764:	200004e4 	.word	0x200004e4
 8005768:	2000052c 	.word	0x2000052c
 800576c:	20000428 	.word	0x20000428
 8005770:	20000424 	.word	0x20000424
 8005774:	20000538 	.word	0x20000538
 8005778:	20000534 	.word	0x20000534
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578a:	4b4f      	ldr	r3, [pc, #316]	@ (80058c8 <xTaskIncrementTick+0x148>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 808f 	bne.w	80058b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005794:	4b4d      	ldr	r3, [pc, #308]	@ (80058cc <xTaskIncrementTick+0x14c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800579c:	4a4b      	ldr	r2, [pc, #300]	@ (80058cc <xTaskIncrementTick+0x14c>)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d121      	bne.n	80057ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057a8:	4b49      	ldr	r3, [pc, #292]	@ (80058d0 <xTaskIncrementTick+0x150>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	603b      	str	r3, [r7, #0]
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop
 80057c8:	e7fd      	b.n	80057c6 <xTaskIncrementTick+0x46>
 80057ca:	4b41      	ldr	r3, [pc, #260]	@ (80058d0 <xTaskIncrementTick+0x150>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	4b40      	ldr	r3, [pc, #256]	@ (80058d4 <xTaskIncrementTick+0x154>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a3e      	ldr	r2, [pc, #248]	@ (80058d0 <xTaskIncrementTick+0x150>)
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	4a3e      	ldr	r2, [pc, #248]	@ (80058d4 <xTaskIncrementTick+0x154>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	4b3e      	ldr	r3, [pc, #248]	@ (80058d8 <xTaskIncrementTick+0x158>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	4a3c      	ldr	r2, [pc, #240]	@ (80058d8 <xTaskIncrementTick+0x158>)
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	f000 faec 	bl	8005dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057ec:	4b3b      	ldr	r3, [pc, #236]	@ (80058dc <xTaskIncrementTick+0x15c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d348      	bcc.n	8005888 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f6:	4b36      	ldr	r3, [pc, #216]	@ (80058d0 <xTaskIncrementTick+0x150>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005800:	4b36      	ldr	r3, [pc, #216]	@ (80058dc <xTaskIncrementTick+0x15c>)
 8005802:	f04f 32ff 	mov.w	r2, #4294967295
 8005806:	601a      	str	r2, [r3, #0]
					break;
 8005808:	e03e      	b.n	8005888 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580a:	4b31      	ldr	r3, [pc, #196]	@ (80058d0 <xTaskIncrementTick+0x150>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	429a      	cmp	r2, r3
 8005820:	d203      	bcs.n	800582a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005822:	4a2e      	ldr	r2, [pc, #184]	@ (80058dc <xTaskIncrementTick+0x15c>)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005828:	e02e      	b.n	8005888 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fd1b 	bl	800426a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005838:	2b00      	cmp	r3, #0
 800583a:	d004      	beq.n	8005846 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	3318      	adds	r3, #24
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe fd12 	bl	800426a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584a:	2201      	movs	r2, #1
 800584c:	409a      	lsls	r2, r3
 800584e:	4b24      	ldr	r3, [pc, #144]	@ (80058e0 <xTaskIncrementTick+0x160>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	4a22      	ldr	r2, [pc, #136]	@ (80058e0 <xTaskIncrementTick+0x160>)
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <xTaskIncrementTick+0x164>)
 8005866:	441a      	add	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f7fe fc9e 	bl	80041b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005878:	4b1b      	ldr	r3, [pc, #108]	@ (80058e8 <xTaskIncrementTick+0x168>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	429a      	cmp	r2, r3
 8005880:	d3b9      	bcc.n	80057f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005882:	2301      	movs	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005886:	e7b6      	b.n	80057f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005888:	4b17      	ldr	r3, [pc, #92]	@ (80058e8 <xTaskIncrementTick+0x168>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588e:	4915      	ldr	r1, [pc, #84]	@ (80058e4 <xTaskIncrementTick+0x164>)
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d901      	bls.n	80058a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058a4:	4b11      	ldr	r3, [pc, #68]	@ (80058ec <xTaskIncrementTick+0x16c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e004      	b.n	80058bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058b2:	4b0f      	ldr	r3, [pc, #60]	@ (80058f0 <xTaskIncrementTick+0x170>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3301      	adds	r3, #1
 80058b8:	4a0d      	ldr	r2, [pc, #52]	@ (80058f0 <xTaskIncrementTick+0x170>)
 80058ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058bc:	697b      	ldr	r3, [r7, #20]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2000054c 	.word	0x2000054c
 80058cc:	20000528 	.word	0x20000528
 80058d0:	200004dc 	.word	0x200004dc
 80058d4:	200004e0 	.word	0x200004e0
 80058d8:	2000053c 	.word	0x2000053c
 80058dc:	20000544 	.word	0x20000544
 80058e0:	2000052c 	.word	0x2000052c
 80058e4:	20000428 	.word	0x20000428
 80058e8:	20000424 	.word	0x20000424
 80058ec:	20000538 	.word	0x20000538
 80058f0:	20000534 	.word	0x20000534

080058f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058fa:	4b33      	ldr	r3, [pc, #204]	@ (80059c8 <vTaskSwitchContext+0xd4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005902:	4b32      	ldr	r3, [pc, #200]	@ (80059cc <vTaskSwitchContext+0xd8>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005908:	e059      	b.n	80059be <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800590a:	4b30      	ldr	r3, [pc, #192]	@ (80059cc <vTaskSwitchContext+0xd8>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005910:	f7fb f81e 	bl	8000950 <getRunTimeCounterValue>
 8005914:	4603      	mov	r3, r0
 8005916:	4a2e      	ldr	r2, [pc, #184]	@ (80059d0 <vTaskSwitchContext+0xdc>)
 8005918:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800591a:	4b2d      	ldr	r3, [pc, #180]	@ (80059d0 <vTaskSwitchContext+0xdc>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b2d      	ldr	r3, [pc, #180]	@ (80059d4 <vTaskSwitchContext+0xe0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d909      	bls.n	800593a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005926:	4b2c      	ldr	r3, [pc, #176]	@ (80059d8 <vTaskSwitchContext+0xe4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800592c:	4a28      	ldr	r2, [pc, #160]	@ (80059d0 <vTaskSwitchContext+0xdc>)
 800592e:	6810      	ldr	r0, [r2, #0]
 8005930:	4a28      	ldr	r2, [pc, #160]	@ (80059d4 <vTaskSwitchContext+0xe0>)
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	1a82      	subs	r2, r0, r2
 8005936:	440a      	add	r2, r1
 8005938:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800593a:	4b25      	ldr	r3, [pc, #148]	@ (80059d0 <vTaskSwitchContext+0xdc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a25      	ldr	r2, [pc, #148]	@ (80059d4 <vTaskSwitchContext+0xe0>)
 8005940:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005942:	4b26      	ldr	r3, [pc, #152]	@ (80059dc <vTaskSwitchContext+0xe8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	fab3 f383 	clz	r3, r3
 800594e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	f1c3 031f 	rsb	r3, r3, #31
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	4921      	ldr	r1, [pc, #132]	@ (80059e0 <vTaskSwitchContext+0xec>)
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <vTaskSwitchContext+0x90>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	607b      	str	r3, [r7, #4]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <vTaskSwitchContext+0x8c>
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4a14      	ldr	r2, [pc, #80]	@ (80059e0 <vTaskSwitchContext+0xec>)
 8005990:	4413      	add	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3308      	adds	r3, #8
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d104      	bne.n	80059b4 <vTaskSwitchContext+0xc0>
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	4a07      	ldr	r2, [pc, #28]	@ (80059d8 <vTaskSwitchContext+0xe4>)
 80059bc:	6013      	str	r3, [r2, #0]
}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	2000054c 	.word	0x2000054c
 80059cc:	20000538 	.word	0x20000538
 80059d0:	20000554 	.word	0x20000554
 80059d4:	20000550 	.word	0x20000550
 80059d8:	20000424 	.word	0x20000424
 80059dc:	2000052c 	.word	0x2000052c
 80059e0:	20000428 	.word	0x20000428

080059e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60fb      	str	r3, [r7, #12]
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0c:	4b07      	ldr	r3, [pc, #28]	@ (8005a2c <vTaskPlaceOnEventList+0x48>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fe fbef 	bl	80041f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	6838      	ldr	r0, [r7, #0]
 8005a1e:	f000 fdd5 	bl	80065cc <prvAddCurrentTaskToDelayedList>
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000424 	.word	0x20000424

08005a30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60fb      	str	r3, [r7, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	3318      	adds	r3, #24
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fc01 	bl	800426a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a68:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae0 <xTaskRemoveFromEventList+0xb0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d11c      	bne.n	8005aaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe fbf8 	bl	800426a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	2201      	movs	r2, #1
 8005a80:	409a      	lsls	r2, r3
 8005a82:	4b18      	ldr	r3, [pc, #96]	@ (8005ae4 <xTaskRemoveFromEventList+0xb4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	4a16      	ldr	r2, [pc, #88]	@ (8005ae4 <xTaskRemoveFromEventList+0xb4>)
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4a13      	ldr	r2, [pc, #76]	@ (8005ae8 <xTaskRemoveFromEventList+0xb8>)
 8005a9a:	441a      	add	r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7fe fb84 	bl	80041b0 <vListInsertEnd>
 8005aa8:	e005      	b.n	8005ab6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3318      	adds	r3, #24
 8005aae:	4619      	mov	r1, r3
 8005ab0:	480e      	ldr	r0, [pc, #56]	@ (8005aec <xTaskRemoveFromEventList+0xbc>)
 8005ab2:	f7fe fb7d 	bl	80041b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aba:	4b0d      	ldr	r3, [pc, #52]	@ (8005af0 <xTaskRemoveFromEventList+0xc0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d905      	bls.n	8005ad0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <xTaskRemoveFromEventList+0xc4>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e001      	b.n	8005ad4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ad4:	697b      	ldr	r3, [r7, #20]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000054c 	.word	0x2000054c
 8005ae4:	2000052c 	.word	0x2000052c
 8005ae8:	20000428 	.word	0x20000428
 8005aec:	200004e4 	.word	0x200004e4
 8005af0:	20000424 	.word	0x20000424
 8005af4:	20000538 	.word	0x20000538

08005af8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	60fb      	str	r3, [r7, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005b1e:	f000 feeb 	bl	80068f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b22:	4b07      	ldr	r3, [pc, #28]	@ (8005b40 <vTaskSetTimeOutState+0x48>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005b2a:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <vTaskSetTimeOutState+0x4c>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005b32:	f000 ff13 	bl	800695c <vPortExitCritical>
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000053c 	.word	0x2000053c
 8005b44:	20000528 	.word	0x20000528

08005b48 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b50:	4b06      	ldr	r3, [pc, #24]	@ (8005b6c <vTaskInternalSetTimeOutState+0x24>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <vTaskInternalSetTimeOutState+0x28>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	605a      	str	r2, [r3, #4]
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	2000053c 	.word	0x2000053c
 8005b70:	20000528 	.word	0x20000528

08005b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10b      	bne.n	8005b9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	613b      	str	r3, [r7, #16]
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	e7fd      	b.n	8005b98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60fb      	str	r3, [r7, #12]
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	e7fd      	b.n	8005bb6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005bba:	f000 fe9d 	bl	80068f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c34 <xTaskCheckForTimeOut+0xc0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d102      	bne.n	8005bde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	e023      	b.n	8005c26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b15      	ldr	r3, [pc, #84]	@ (8005c38 <xTaskCheckForTimeOut+0xc4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d007      	beq.n	8005bfa <xTaskCheckForTimeOut+0x86>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d302      	bcc.n	8005bfa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	e015      	b.n	8005c26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d20b      	bcs.n	8005c1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	1ad2      	subs	r2, r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ff99 	bl	8005b48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	e004      	b.n	8005c26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c26:	f000 fe99 	bl	800695c <vPortExitCritical>

	return xReturn;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3720      	adds	r7, #32
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000528 	.word	0x20000528
 8005c38:	2000053c 	.word	0x2000053c

08005c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c40:	4b03      	ldr	r3, [pc, #12]	@ (8005c50 <vTaskMissedYield+0x14>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
}
 8005c46:	bf00      	nop
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	20000538 	.word	0x20000538

08005c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c5c:	f000 f854 	bl	8005d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c60:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <prvIdleTask+0x2c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d907      	bls.n	8005c78 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005c68:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <prvIdleTask+0x30>)
 8005c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005c78:	f7fa fcb0 	bl	80005dc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005c7c:	e7ee      	b.n	8005c5c <prvIdleTask+0x8>
 8005c7e:	bf00      	nop
 8005c80:	20000428 	.word	0x20000428
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	e00c      	b.n	8005cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ce8 <prvInitialiseTaskLists+0x60>)
 8005ca0:	4413      	add	r3, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe fa57 	bl	8004156 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3301      	adds	r3, #1
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b06      	cmp	r3, #6
 8005cb2:	d9ef      	bls.n	8005c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cb4:	480d      	ldr	r0, [pc, #52]	@ (8005cec <prvInitialiseTaskLists+0x64>)
 8005cb6:	f7fe fa4e 	bl	8004156 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cba:	480d      	ldr	r0, [pc, #52]	@ (8005cf0 <prvInitialiseTaskLists+0x68>)
 8005cbc:	f7fe fa4b 	bl	8004156 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cc0:	480c      	ldr	r0, [pc, #48]	@ (8005cf4 <prvInitialiseTaskLists+0x6c>)
 8005cc2:	f7fe fa48 	bl	8004156 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cc6:	480c      	ldr	r0, [pc, #48]	@ (8005cf8 <prvInitialiseTaskLists+0x70>)
 8005cc8:	f7fe fa45 	bl	8004156 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ccc:	480b      	ldr	r0, [pc, #44]	@ (8005cfc <prvInitialiseTaskLists+0x74>)
 8005cce:	f7fe fa42 	bl	8004156 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <prvInitialiseTaskLists+0x78>)
 8005cd4:	4a05      	ldr	r2, [pc, #20]	@ (8005cec <prvInitialiseTaskLists+0x64>)
 8005cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d04 <prvInitialiseTaskLists+0x7c>)
 8005cda:	4a05      	ldr	r2, [pc, #20]	@ (8005cf0 <prvInitialiseTaskLists+0x68>)
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000428 	.word	0x20000428
 8005cec:	200004b4 	.word	0x200004b4
 8005cf0:	200004c8 	.word	0x200004c8
 8005cf4:	200004e4 	.word	0x200004e4
 8005cf8:	200004f8 	.word	0x200004f8
 8005cfc:	20000510 	.word	0x20000510
 8005d00:	200004dc 	.word	0x200004dc
 8005d04:	200004e0 	.word	0x200004e0

08005d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d0e:	e019      	b.n	8005d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d10:	f000 fdf2 	bl	80068f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d14:	4b10      	ldr	r3, [pc, #64]	@ (8005d58 <prvCheckTasksWaitingTermination+0x50>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fe faa2 	bl	800426a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d26:	4b0d      	ldr	r3, [pc, #52]	@ (8005d5c <prvCheckTasksWaitingTermination+0x54>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d5c <prvCheckTasksWaitingTermination+0x54>)
 8005d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d30:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	4a0a      	ldr	r2, [pc, #40]	@ (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d3a:	f000 fe0f 	bl	800695c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f810 	bl	8005d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d44:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e1      	bne.n	8005d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	200004f8 	.word	0x200004f8
 8005d5c:	20000524 	.word	0x20000524
 8005d60:	2000050c 	.word	0x2000050c

08005d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d108      	bne.n	8005d88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 ffac 	bl	8006cd8 <vPortFree>
				vPortFree( pxTCB );
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 ffa9 	bl	8006cd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d86:	e019      	b.n	8005dbc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d103      	bne.n	8005d9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 ffa0 	bl	8006cd8 <vPortFree>
	}
 8005d98:	e010      	b.n	8005dbc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d00b      	beq.n	8005dbc <prvDeleteTCB+0x58>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	60fb      	str	r3, [r7, #12]
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	e7fd      	b.n	8005db8 <prvDeleteTCB+0x54>
	}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dca:	4b0c      	ldr	r3, [pc, #48]	@ (8005dfc <prvResetNextTaskUnblockTime+0x38>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <prvResetNextTaskUnblockTime+0x3c>)
 8005dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ddc:	e008      	b.n	8005df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dde:	4b07      	ldr	r3, [pc, #28]	@ (8005dfc <prvResetNextTaskUnblockTime+0x38>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4a04      	ldr	r2, [pc, #16]	@ (8005e00 <prvResetNextTaskUnblockTime+0x3c>)
 8005dee:	6013      	str	r3, [r2, #0]
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	200004dc 	.word	0x200004dc
 8005e00:	20000544 	.word	0x20000544

08005e04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005e0a:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <xTaskGetCurrentTaskHandle+0x1c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005e10:	687b      	ldr	r3, [r7, #4]
	}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000424 	.word	0x20000424

08005e24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <xTaskGetSchedulerState+0x34>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d102      	bne.n	8005e38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e32:	2301      	movs	r3, #1
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	e008      	b.n	8005e4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e38:	4b08      	ldr	r3, [pc, #32]	@ (8005e5c <xTaskGetSchedulerState+0x38>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d102      	bne.n	8005e46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e40:	2302      	movs	r3, #2
 8005e42:	607b      	str	r3, [r7, #4]
 8005e44:	e001      	b.n	8005e4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e46:	2300      	movs	r3, #0
 8005e48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e4a:	687b      	ldr	r3, [r7, #4]
	}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000530 	.word	0x20000530
 8005e5c:	2000054c 	.word	0x2000054c

08005e60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d05e      	beq.n	8005f34 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7a:	4b31      	ldr	r3, [pc, #196]	@ (8005f40 <xTaskPriorityInherit+0xe0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d24e      	bcs.n	8005f22 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	db06      	blt.n	8005e9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005f40 <xTaskPriorityInherit+0xe0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e92:	f1c3 0207 	rsb	r2, r3, #7
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6959      	ldr	r1, [r3, #20]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4a26      	ldr	r2, [pc, #152]	@ (8005f44 <xTaskPriorityInherit+0xe4>)
 8005eac:	4413      	add	r3, r2
 8005eae:	4299      	cmp	r1, r3
 8005eb0:	d12f      	bne.n	8005f12 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe f9d7 	bl	800426a <uxListRemove>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	43da      	mvns	r2, r3
 8005ece:	4b1e      	ldr	r3, [pc, #120]	@ (8005f48 <xTaskPriorityInherit+0xe8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f48 <xTaskPriorityInherit+0xe8>)
 8005ed6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ed8:	4b19      	ldr	r3, [pc, #100]	@ (8005f40 <xTaskPriorityInherit+0xe0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	409a      	lsls	r2, r3
 8005eea:	4b17      	ldr	r3, [pc, #92]	@ (8005f48 <xTaskPriorityInherit+0xe8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	4a15      	ldr	r2, [pc, #84]	@ (8005f48 <xTaskPriorityInherit+0xe8>)
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4a10      	ldr	r2, [pc, #64]	@ (8005f44 <xTaskPriorityInherit+0xe4>)
 8005f02:	441a      	add	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7fe f950 	bl	80041b0 <vListInsertEnd>
 8005f10:	e004      	b.n	8005f1c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f12:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <xTaskPriorityInherit+0xe0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e008      	b.n	8005f34 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f26:	4b06      	ldr	r3, [pc, #24]	@ (8005f40 <xTaskPriorityInherit+0xe0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d201      	bcs.n	8005f34 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f30:	2301      	movs	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f34:	68fb      	ldr	r3, [r7, #12]
	}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000424 	.word	0x20000424
 8005f44:	20000428 	.word	0x20000428
 8005f48:	2000052c 	.word	0x2000052c

08005f4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d070      	beq.n	8006044 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f62:	4b3b      	ldr	r3, [pc, #236]	@ (8006050 <xTaskPriorityDisinherit+0x104>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d00b      	beq.n	8005f84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60fb      	str	r3, [r7, #12]
}
 8005f7e:	bf00      	nop
 8005f80:	bf00      	nop
 8005f82:	e7fd      	b.n	8005f80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa8:	1e5a      	subs	r2, r3, #1
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d044      	beq.n	8006044 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d140      	bne.n	8006044 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fe f94f 	bl	800426a <uxListRemove>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d115      	bne.n	8005ffe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd6:	491f      	ldr	r1, [pc, #124]	@ (8006054 <xTaskPriorityDisinherit+0x108>)
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xTaskPriorityDisinherit+0xb2>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	2201      	movs	r2, #1
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	43da      	mvns	r2, r3
 8005ff4:	4b18      	ldr	r3, [pc, #96]	@ (8006058 <xTaskPriorityDisinherit+0x10c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	4a17      	ldr	r2, [pc, #92]	@ (8006058 <xTaskPriorityDisinherit+0x10c>)
 8005ffc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600a:	f1c3 0207 	rsb	r2, r3, #7
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	2201      	movs	r2, #1
 8006018:	409a      	lsls	r2, r3
 800601a:	4b0f      	ldr	r3, [pc, #60]	@ (8006058 <xTaskPriorityDisinherit+0x10c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4313      	orrs	r3, r2
 8006020:	4a0d      	ldr	r2, [pc, #52]	@ (8006058 <xTaskPriorityDisinherit+0x10c>)
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4a08      	ldr	r2, [pc, #32]	@ (8006054 <xTaskPriorityDisinherit+0x108>)
 8006032:	441a      	add	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f7fe f8b8 	bl	80041b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006040:	2301      	movs	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006044:	697b      	ldr	r3, [r7, #20]
	}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000424 	.word	0x20000424
 8006054:	20000428 	.word	0x20000428
 8006058:	2000052c 	.word	0x2000052c

0800605c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800606a:	2301      	movs	r3, #1
 800606c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d079      	beq.n	8006168 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60fb      	str	r3, [r7, #12]
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d902      	bls.n	80060a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e002      	b.n	80060aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d059      	beq.n	8006168 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d154      	bne.n	8006168 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80060be:	4b2c      	ldr	r3, [pc, #176]	@ (8006170 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d10b      	bne.n	80060e0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	60bb      	str	r3, [r7, #8]
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	e7fd      	b.n	80060dc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	db04      	blt.n	80060fe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f1c3 0207 	rsb	r2, r3, #7
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	6959      	ldr	r1, [r3, #20]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4a19      	ldr	r2, [pc, #100]	@ (8006174 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800610e:	4413      	add	r3, r2
 8006110:	4299      	cmp	r1, r3
 8006112:	d129      	bne.n	8006168 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe f8a6 	bl	800426a <uxListRemove>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	2201      	movs	r2, #1
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	43da      	mvns	r2, r3
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4013      	ands	r3, r2
 8006136:	4a10      	ldr	r2, [pc, #64]	@ (8006178 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006138:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	2201      	movs	r2, #1
 8006140:	409a      	lsls	r2, r3
 8006142:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4313      	orrs	r3, r2
 8006148:	4a0b      	ldr	r2, [pc, #44]	@ (8006178 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4a06      	ldr	r2, [pc, #24]	@ (8006174 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800615a:	441a      	add	r2, r3
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f7fe f824 	bl	80041b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006168:	bf00      	nop
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000424 	.word	0x20000424
 8006174:	20000428 	.word	0x20000428
 8006178:	2000052c 	.word	0x2000052c

0800617c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006188:	4b05      	ldr	r3, [pc, #20]	@ (80061a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800618e:	3201      	adds	r2, #1
 8006190:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 8006192:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006194:	681b      	ldr	r3, [r3, #0]
	}
 8006196:	4618      	mov	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20000424 	.word	0x20000424

080061a4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80061ae:	f000 fba3 	bl	80068f8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80061b2:	4b1e      	ldr	r3, [pc, #120]	@ (800622c <ulTaskNotifyTake+0x88>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d113      	bne.n	80061e4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80061bc:	4b1b      	ldr	r3, [pc, #108]	@ (800622c <ulTaskNotifyTake+0x88>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061cc:	2101      	movs	r1, #1
 80061ce:	6838      	ldr	r0, [r7, #0]
 80061d0:	f000 f9fc 	bl	80065cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80061d4:	4b16      	ldr	r3, [pc, #88]	@ (8006230 <ulTaskNotifyTake+0x8c>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80061e4:	f000 fbba 	bl	800695c <vPortExitCritical>

		taskENTER_CRITICAL();
 80061e8:	f000 fb86 	bl	80068f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80061ec:	4b0f      	ldr	r3, [pc, #60]	@ (800622c <ulTaskNotifyTake+0x88>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006200:	4b0a      	ldr	r3, [pc, #40]	@ (800622c <ulTaskNotifyTake+0x88>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2200      	movs	r2, #0
 8006206:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006208:	e004      	b.n	8006214 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800620a:	4b08      	ldr	r3, [pc, #32]	@ (800622c <ulTaskNotifyTake+0x88>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	3a01      	subs	r2, #1
 8006212:	65da      	str	r2, [r3, #92]	@ 0x5c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006214:	4b05      	ldr	r3, [pc, #20]	@ (800622c <ulTaskNotifyTake+0x88>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
		}
		taskEXIT_CRITICAL();
 800621e:	f000 fb9d 	bl	800695c <vPortExitCritical>

		return ulReturn;
 8006222:	68fb      	ldr	r3, [r7, #12]
	}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000424 	.word	0x20000424
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006242:	f000 fb59 	bl	80068f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006246:	4b26      	ldr	r3, [pc, #152]	@ (80062e0 <xTaskNotifyWait+0xac>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d01a      	beq.n	800628a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006254:	4b22      	ldr	r3, [pc, #136]	@ (80062e0 <xTaskNotifyWait+0xac>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	43d2      	mvns	r2, r2
 800625e:	400a      	ands	r2, r1
 8006260:	65da      	str	r2, [r3, #92]	@ 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006262:	4b1f      	ldr	r3, [pc, #124]	@ (80062e0 <xTaskNotifyWait+0xac>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006272:	2101      	movs	r1, #1
 8006274:	6838      	ldr	r0, [r7, #0]
 8006276:	f000 f9a9 	bl	80065cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800627a:	4b1a      	ldr	r3, [pc, #104]	@ (80062e4 <xTaskNotifyWait+0xb0>)
 800627c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800628a:	f000 fb67 	bl	800695c <vPortExitCritical>

		taskENTER_CRITICAL();
 800628e:	f000 fb33 	bl	80068f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006298:	4b11      	ldr	r3, [pc, #68]	@ (80062e0 <xTaskNotifyWait+0xac>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80062a2:	4b0f      	ldr	r3, [pc, #60]	@ (80062e0 <xTaskNotifyWait+0xac>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d002      	beq.n	80062b6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e008      	b.n	80062c8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80062b6:	4b0a      	ldr	r3, [pc, #40]	@ (80062e0 <xTaskNotifyWait+0xac>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	43d2      	mvns	r2, r2
 80062c0:	400a      	ands	r2, r1
 80062c2:	65da      	str	r2, [r3, #92]	@ 0x5c
				xReturn = pdTRUE;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062c8:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <xTaskNotifyWait+0xac>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
		}
		taskEXIT_CRITICAL();
 80062d2:	f000 fb43 	bl	800695c <vPortExitCritical>

		return xReturn;
 80062d6:	697b      	ldr	r3, [r7, #20]
	}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000424 	.word	0x20000424
 80062e4:	e000ed04 	.word	0xe000ed04

080062e8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	@ 0x28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80062f8:	2301      	movs	r3, #1
 80062fa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <xTaskGenericNotify+0x32>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	61bb      	str	r3, [r7, #24]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800631e:	f000 faeb 	bl	80068f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006336:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

			switch( eAction )
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b04      	cmp	r3, #4
 8006344:	d827      	bhi.n	8006396 <xTaskGenericNotify+0xae>
 8006346:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <xTaskGenericNotify+0x64>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	080063b9 	.word	0x080063b9
 8006350:	08006361 	.word	0x08006361
 8006354:	0800636f 	.word	0x0800636f
 8006358:	0800637b 	.word	0x0800637b
 800635c:	08006383 	.word	0x08006383
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	431a      	orrs	r2, r3
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	65da      	str	r2, [r3, #92]	@ 0x5c
					break;
 800636c:	e027      	b.n	80063be <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	65da      	str	r2, [r3, #92]	@ 0x5c
					break;
 8006378:	e021      	b.n	80063be <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	65da      	str	r2, [r3, #92]	@ 0x5c
					break;
 8006380:	e01d      	b.n	80063be <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006382:	7ffb      	ldrb	r3, [r7, #31]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d003      	beq.n	8006390 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	65da      	str	r2, [r3, #92]	@ 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800638e:	e016      	b.n	80063be <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006390:	2300      	movs	r3, #0
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006394:	e013      	b.n	80063be <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d00d      	beq.n	80063bc <xTaskGenericNotify+0xd4>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	617b      	str	r3, [r7, #20]
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	e7fd      	b.n	80063b4 <xTaskGenericNotify+0xcc>
					break;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <xTaskGenericNotify+0xd6>

					break;
 80063bc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063be:	7ffb      	ldrb	r3, [r7, #31]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d13a      	bne.n	800643a <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fd ff4e 	bl	800426a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	2201      	movs	r2, #1
 80063d4:	409a      	lsls	r2, r3
 80063d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006448 <xTaskGenericNotify+0x160>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4313      	orrs	r3, r2
 80063dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006448 <xTaskGenericNotify+0x160>)
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4a17      	ldr	r2, [pc, #92]	@ (800644c <xTaskGenericNotify+0x164>)
 80063ee:	441a      	add	r2, r3
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f7fd feda 	bl	80041b0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <xTaskGenericNotify+0x134>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	613b      	str	r3, [r7, #16]
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006420:	4b0b      	ldr	r3, [pc, #44]	@ (8006450 <xTaskGenericNotify+0x168>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006426:	429a      	cmp	r2, r3
 8006428:	d907      	bls.n	800643a <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800642a:	4b0a      	ldr	r3, [pc, #40]	@ (8006454 <xTaskGenericNotify+0x16c>)
 800642c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800643a:	f000 fa8f 	bl	800695c <vPortExitCritical>

		return xReturn;
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006440:	4618      	mov	r0, r3
 8006442:	3728      	adds	r7, #40	@ 0x28
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	2000052c 	.word	0x2000052c
 800644c:	20000428 	.word	0x20000428
 8006450:	20000424 	.word	0x20000424
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	@ 0x28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61bb      	str	r3, [r7, #24]
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	e7fd      	b.n	800647c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006480:	f000 fb1a 	bl	8006ab8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006488:	f3ef 8211 	mrs	r2, BASEPRI
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	617a      	str	r2, [r7, #20]
 800649e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064a0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064a2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80064aa:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	65da      	str	r2, [r3, #92]	@ 0x5c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80064be:	7ffb      	ldrb	r3, [r7, #31]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d146      	bne.n	8006552 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	60fb      	str	r3, [r7, #12]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e4:	4b20      	ldr	r3, [pc, #128]	@ (8006568 <vTaskNotifyGiveFromISR+0x110>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11c      	bne.n	8006526 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	3304      	adds	r3, #4
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fd feba 	bl	800426a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fa:	2201      	movs	r2, #1
 80064fc:	409a      	lsls	r2, r3
 80064fe:	4b1b      	ldr	r3, [pc, #108]	@ (800656c <vTaskNotifyGiveFromISR+0x114>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4313      	orrs	r3, r2
 8006504:	4a19      	ldr	r2, [pc, #100]	@ (800656c <vTaskNotifyGiveFromISR+0x114>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <vTaskNotifyGiveFromISR+0x118>)
 8006516:	441a      	add	r2, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fd fe46 	bl	80041b0 <vListInsertEnd>
 8006524:	e005      	b.n	8006532 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	3318      	adds	r3, #24
 800652a:	4619      	mov	r1, r3
 800652c:	4811      	ldr	r0, [pc, #68]	@ (8006574 <vTaskNotifyGiveFromISR+0x11c>)
 800652e:	f7fd fe3f 	bl	80041b0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006536:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <vTaskNotifyGiveFromISR+0x120>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	429a      	cmp	r2, r3
 800653e:	d908      	bls.n	8006552 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2201      	movs	r2, #1
 800654a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800654c:	4b0b      	ldr	r3, [pc, #44]	@ (800657c <vTaskNotifyGiveFromISR+0x124>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800655c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800655e:	bf00      	nop
 8006560:	3728      	adds	r7, #40	@ 0x28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	2000054c 	.word	0x2000054c
 800656c:	2000052c 	.word	0x2000052c
 8006570:	20000428 	.word	0x20000428
 8006574:	200004e4 	.word	0x200004e4
 8006578:	20000424 	.word	0x20000424
 800657c:	20000538 	.word	0x20000538

08006580 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <xTaskNotifyStateClear+0x14>
 800658e:	4b0e      	ldr	r3, [pc, #56]	@ (80065c8 <xTaskNotifyStateClear+0x48>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	e000      	b.n	8006596 <xTaskNotifyStateClear+0x16>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8006598:	f000 f9ae 	bl	80068f8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d106      	bne.n	80065b6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
				xReturn = pdPASS;
 80065b0:	2301      	movs	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e001      	b.n	80065ba <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80065ba:	f000 f9cf 	bl	800695c <vPortExitCritical>

		return xReturn;
 80065be:	68fb      	ldr	r3, [r7, #12]
	}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000424 	.word	0x20000424

080065cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065d6:	4b29      	ldr	r3, [pc, #164]	@ (800667c <prvAddCurrentTaskToDelayedList+0xb0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065dc:	4b28      	ldr	r3, [pc, #160]	@ (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fd fe41 	bl	800426a <uxListRemove>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065ee:	4b24      	ldr	r3, [pc, #144]	@ (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	2201      	movs	r2, #1
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43da      	mvns	r2, r3
 80065fc:	4b21      	ldr	r3, [pc, #132]	@ (8006684 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4013      	ands	r3, r2
 8006602:	4a20      	ldr	r2, [pc, #128]	@ (8006684 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006604:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660c:	d10a      	bne.n	8006624 <prvAddCurrentTaskToDelayedList+0x58>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006614:	4b1a      	ldr	r3, [pc, #104]	@ (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	481a      	ldr	r0, [pc, #104]	@ (8006688 <prvAddCurrentTaskToDelayedList+0xbc>)
 800661e:	f7fd fdc7 	bl	80041b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006622:	e026      	b.n	8006672 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4413      	add	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800662c:	4b14      	ldr	r3, [pc, #80]	@ (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	429a      	cmp	r2, r3
 800663a:	d209      	bcs.n	8006650 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800663c:	4b13      	ldr	r3, [pc, #76]	@ (800668c <prvAddCurrentTaskToDelayedList+0xc0>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	4b0f      	ldr	r3, [pc, #60]	@ (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3304      	adds	r3, #4
 8006646:	4619      	mov	r1, r3
 8006648:	4610      	mov	r0, r2
 800664a:	f7fd fdd5 	bl	80041f8 <vListInsert>
}
 800664e:	e010      	b.n	8006672 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006650:	4b0f      	ldr	r3, [pc, #60]	@ (8006690 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b0a      	ldr	r3, [pc, #40]	@ (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7fd fdcb 	bl	80041f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006662:	4b0c      	ldr	r3, [pc, #48]	@ (8006694 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d202      	bcs.n	8006672 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800666c:	4a09      	ldr	r2, [pc, #36]	@ (8006694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6013      	str	r3, [r2, #0]
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000528 	.word	0x20000528
 8006680:	20000424 	.word	0x20000424
 8006684:	2000052c 	.word	0x2000052c
 8006688:	20000510 	.word	0x20000510
 800668c:	200004e0 	.word	0x200004e0
 8006690:	200004dc 	.word	0x200004dc
 8006694:	20000544 	.word	0x20000544

08006698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3b04      	subs	r3, #4
 80066a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3b04      	subs	r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3b04      	subs	r3, #4
 80066c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066c8:	4a0c      	ldr	r2, [pc, #48]	@ (80066fc <pxPortInitialiseStack+0x64>)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3b14      	subs	r3, #20
 80066d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b04      	subs	r3, #4
 80066de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f06f 0202 	mvn.w	r2, #2
 80066e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3b20      	subs	r3, #32
 80066ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066ee:	68fb      	ldr	r3, [r7, #12]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	08006701 	.word	0x08006701

08006700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800670a:	4b13      	ldr	r3, [pc, #76]	@ (8006758 <prvTaskExitError+0x58>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d00b      	beq.n	800672c <prvTaskExitError+0x2c>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60fb      	str	r3, [r7, #12]
}
 8006726:	bf00      	nop
 8006728:	bf00      	nop
 800672a:	e7fd      	b.n	8006728 <prvTaskExitError+0x28>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60bb      	str	r3, [r7, #8]
}
 800673e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006740:	bf00      	nop
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0fc      	beq.n	8006742 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	2000000c 	.word	0x2000000c
 800675c:	00000000 	.word	0x00000000

08006760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006760:	4b07      	ldr	r3, [pc, #28]	@ (8006780 <pxCurrentTCBConst2>)
 8006762:	6819      	ldr	r1, [r3, #0]
 8006764:	6808      	ldr	r0, [r1, #0]
 8006766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	f380 8809 	msr	PSP, r0
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8811 	msr	BASEPRI, r0
 800677a:	4770      	bx	lr
 800677c:	f3af 8000 	nop.w

08006780 <pxCurrentTCBConst2>:
 8006780:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006788:	4808      	ldr	r0, [pc, #32]	@ (80067ac <prvPortStartFirstTask+0x24>)
 800678a:	6800      	ldr	r0, [r0, #0]
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	f380 8808 	msr	MSP, r0
 8006792:	f04f 0000 	mov.w	r0, #0
 8006796:	f380 8814 	msr	CONTROL, r0
 800679a:	b662      	cpsie	i
 800679c:	b661      	cpsie	f
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	df00      	svc	0
 80067a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067aa:	bf00      	nop
 80067ac:	e000ed08 	.word	0xe000ed08

080067b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067b6:	4b47      	ldr	r3, [pc, #284]	@ (80068d4 <xPortStartScheduler+0x124>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a47      	ldr	r2, [pc, #284]	@ (80068d8 <xPortStartScheduler+0x128>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10b      	bne.n	80067d8 <xPortStartScheduler+0x28>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60fb      	str	r3, [r7, #12]
}
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	e7fd      	b.n	80067d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067d8:	4b3e      	ldr	r3, [pc, #248]	@ (80068d4 <xPortStartScheduler+0x124>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a3f      	ldr	r2, [pc, #252]	@ (80068dc <xPortStartScheduler+0x12c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10b      	bne.n	80067fa <xPortStartScheduler+0x4a>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	613b      	str	r3, [r7, #16]
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067fa:	4b39      	ldr	r3, [pc, #228]	@ (80068e0 <xPortStartScheduler+0x130>)
 80067fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	22ff      	movs	r2, #255	@ 0xff
 800680a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800681c:	b2da      	uxtb	r2, r3
 800681e:	4b31      	ldr	r3, [pc, #196]	@ (80068e4 <xPortStartScheduler+0x134>)
 8006820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006822:	4b31      	ldr	r3, [pc, #196]	@ (80068e8 <xPortStartScheduler+0x138>)
 8006824:	2207      	movs	r2, #7
 8006826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006828:	e009      	b.n	800683e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800682a:	4b2f      	ldr	r3, [pc, #188]	@ (80068e8 <xPortStartScheduler+0x138>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3b01      	subs	r3, #1
 8006830:	4a2d      	ldr	r2, [pc, #180]	@ (80068e8 <xPortStartScheduler+0x138>)
 8006832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	b2db      	uxtb	r3, r3
 800683c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006846:	2b80      	cmp	r3, #128	@ 0x80
 8006848:	d0ef      	beq.n	800682a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800684a:	4b27      	ldr	r3, [pc, #156]	@ (80068e8 <xPortStartScheduler+0x138>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1c3 0307 	rsb	r3, r3, #7
 8006852:	2b04      	cmp	r3, #4
 8006854:	d00b      	beq.n	800686e <xPortStartScheduler+0xbe>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	60bb      	str	r3, [r7, #8]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800686e:	4b1e      	ldr	r3, [pc, #120]	@ (80068e8 <xPortStartScheduler+0x138>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	4a1c      	ldr	r2, [pc, #112]	@ (80068e8 <xPortStartScheduler+0x138>)
 8006876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006878:	4b1b      	ldr	r3, [pc, #108]	@ (80068e8 <xPortStartScheduler+0x138>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006880:	4a19      	ldr	r2, [pc, #100]	@ (80068e8 <xPortStartScheduler+0x138>)
 8006882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800688c:	4b17      	ldr	r3, [pc, #92]	@ (80068ec <xPortStartScheduler+0x13c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a16      	ldr	r2, [pc, #88]	@ (80068ec <xPortStartScheduler+0x13c>)
 8006892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006898:	4b14      	ldr	r3, [pc, #80]	@ (80068ec <xPortStartScheduler+0x13c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a13      	ldr	r2, [pc, #76]	@ (80068ec <xPortStartScheduler+0x13c>)
 800689e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068a4:	f000 f8da 	bl	8006a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068a8:	4b11      	ldr	r3, [pc, #68]	@ (80068f0 <xPortStartScheduler+0x140>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068ae:	f000 f8f9 	bl	8006aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068b2:	4b10      	ldr	r3, [pc, #64]	@ (80068f4 <xPortStartScheduler+0x144>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a0f      	ldr	r2, [pc, #60]	@ (80068f4 <xPortStartScheduler+0x144>)
 80068b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068be:	f7ff ff63 	bl	8006788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068c2:	f7ff f817 	bl	80058f4 <vTaskSwitchContext>
	prvTaskExitError();
 80068c6:	f7ff ff1b 	bl	8006700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	e000ed00 	.word	0xe000ed00
 80068d8:	410fc271 	.word	0x410fc271
 80068dc:	410fc270 	.word	0x410fc270
 80068e0:	e000e400 	.word	0xe000e400
 80068e4:	20000558 	.word	0x20000558
 80068e8:	2000055c 	.word	0x2000055c
 80068ec:	e000ed20 	.word	0xe000ed20
 80068f0:	2000000c 	.word	0x2000000c
 80068f4:	e000ef34 	.word	0xe000ef34

080068f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	607b      	str	r3, [r7, #4]
}
 8006910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006912:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <vPortEnterCritical+0x5c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3301      	adds	r3, #1
 8006918:	4a0e      	ldr	r2, [pc, #56]	@ (8006954 <vPortEnterCritical+0x5c>)
 800691a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800691c:	4b0d      	ldr	r3, [pc, #52]	@ (8006954 <vPortEnterCritical+0x5c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d110      	bne.n	8006946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006924:	4b0c      	ldr	r3, [pc, #48]	@ (8006958 <vPortEnterCritical+0x60>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <vPortEnterCritical+0x4e>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	603b      	str	r3, [r7, #0]
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <vPortEnterCritical+0x4a>
	}
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	2000000c 	.word	0x2000000c
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006962:	4b12      	ldr	r3, [pc, #72]	@ (80069ac <vPortExitCritical+0x50>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10b      	bne.n	8006982 <vPortExitCritical+0x26>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	607b      	str	r3, [r7, #4]
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	e7fd      	b.n	800697e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006982:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <vPortExitCritical+0x50>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3b01      	subs	r3, #1
 8006988:	4a08      	ldr	r2, [pc, #32]	@ (80069ac <vPortExitCritical+0x50>)
 800698a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800698c:	4b07      	ldr	r3, [pc, #28]	@ (80069ac <vPortExitCritical+0x50>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <vPortExitCritical+0x44>
 8006994:	2300      	movs	r3, #0
 8006996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	2000000c 	.word	0x2000000c

080069b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069b0:	f3ef 8009 	mrs	r0, PSP
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	4b15      	ldr	r3, [pc, #84]	@ (8006a10 <pxCurrentTCBConst>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	f01e 0f10 	tst.w	lr, #16
 80069c0:	bf08      	it	eq
 80069c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	6010      	str	r0, [r2, #0]
 80069cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80069d4:	f380 8811 	msr	BASEPRI, r0
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f7fe ff88 	bl	80058f4 <vTaskSwitchContext>
 80069e4:	f04f 0000 	mov.w	r0, #0
 80069e8:	f380 8811 	msr	BASEPRI, r0
 80069ec:	bc09      	pop	{r0, r3}
 80069ee:	6819      	ldr	r1, [r3, #0]
 80069f0:	6808      	ldr	r0, [r1, #0]
 80069f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f6:	f01e 0f10 	tst.w	lr, #16
 80069fa:	bf08      	it	eq
 80069fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a00:	f380 8809 	msr	PSP, r0
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	f3af 8000 	nop.w

08006a10 <pxCurrentTCBConst>:
 8006a10:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	607b      	str	r3, [r7, #4]
}
 8006a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a32:	f7fe fea5 	bl	8005780 <xTaskIncrementTick>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a3c:	4b06      	ldr	r3, [pc, #24]	@ (8006a58 <SysTick_Handler+0x40>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	2300      	movs	r3, #0
 8006a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f383 8811 	msr	BASEPRI, r3
}
 8006a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	e000ed04 	.word	0xe000ed04

08006a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a60:	4b0b      	ldr	r3, [pc, #44]	@ (8006a90 <vPortSetupTimerInterrupt+0x34>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a66:	4b0b      	ldr	r3, [pc, #44]	@ (8006a94 <vPortSetupTimerInterrupt+0x38>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a98 <vPortSetupTimerInterrupt+0x3c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a0a      	ldr	r2, [pc, #40]	@ (8006a9c <vPortSetupTimerInterrupt+0x40>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	4a09      	ldr	r2, [pc, #36]	@ (8006aa0 <vPortSetupTimerInterrupt+0x44>)
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a7e:	4b04      	ldr	r3, [pc, #16]	@ (8006a90 <vPortSetupTimerInterrupt+0x34>)
 8006a80:	2207      	movs	r2, #7
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	e000e010 	.word	0xe000e010
 8006a94:	e000e018 	.word	0xe000e018
 8006a98:	20000000 	.word	0x20000000
 8006a9c:	10624dd3 	.word	0x10624dd3
 8006aa0:	e000e014 	.word	0xe000e014

08006aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ab4 <vPortEnableVFP+0x10>
 8006aa8:	6801      	ldr	r1, [r0, #0]
 8006aaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006aae:	6001      	str	r1, [r0, #0]
 8006ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ab2:	bf00      	nop
 8006ab4:	e000ed88 	.word	0xe000ed88

08006ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006abe:	f3ef 8305 	mrs	r3, IPSR
 8006ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b0f      	cmp	r3, #15
 8006ac8:	d915      	bls.n	8006af6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aca:	4a18      	ldr	r2, [pc, #96]	@ (8006b2c <vPortValidateInterruptPriority+0x74>)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ad4:	4b16      	ldr	r3, [pc, #88]	@ (8006b30 <vPortValidateInterruptPriority+0x78>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	7afa      	ldrb	r2, [r7, #11]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d20b      	bcs.n	8006af6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	607b      	str	r3, [r7, #4]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006af6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b34 <vPortValidateInterruptPriority+0x7c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006afe:	4b0e      	ldr	r3, [pc, #56]	@ (8006b38 <vPortValidateInterruptPriority+0x80>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d90b      	bls.n	8006b1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	603b      	str	r3, [r7, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <vPortValidateInterruptPriority+0x62>
	}
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	e000e3f0 	.word	0xe000e3f0
 8006b30:	20000558 	.word	0x20000558
 8006b34:	e000ed0c 	.word	0xe000ed0c
 8006b38:	2000055c 	.word	0x2000055c

08006b3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	@ 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b48:	f7fe fd6e 	bl	8005628 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8006cc0 <pvPortMalloc+0x184>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b54:	f000 f924 	bl	8006da0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b58:	4b5a      	ldr	r3, [pc, #360]	@ (8006cc4 <pvPortMalloc+0x188>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f040 8095 	bne.w	8006c90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01e      	beq.n	8006baa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4413      	add	r3, r2
 8006b72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d015      	beq.n	8006baa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	3308      	adds	r3, #8
 8006b86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <pvPortMalloc+0x6e>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	617b      	str	r3, [r7, #20]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d06f      	beq.n	8006c90 <pvPortMalloc+0x154>
 8006bb0:	4b45      	ldr	r3, [pc, #276]	@ (8006cc8 <pvPortMalloc+0x18c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d86a      	bhi.n	8006c90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bba:	4b44      	ldr	r3, [pc, #272]	@ (8006ccc <pvPortMalloc+0x190>)
 8006bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bbe:	4b43      	ldr	r3, [pc, #268]	@ (8006ccc <pvPortMalloc+0x190>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bc4:	e004      	b.n	8006bd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d903      	bls.n	8006be2 <pvPortMalloc+0xa6>
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f1      	bne.n	8006bc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006be2:	4b37      	ldr	r3, [pc, #220]	@ (8006cc0 <pvPortMalloc+0x184>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d051      	beq.n	8006c90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	4413      	add	r3, r2
 8006bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	1ad2      	subs	r2, r2, r3
 8006c06:	2308      	movs	r3, #8
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d920      	bls.n	8006c50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4413      	add	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00b      	beq.n	8006c38 <pvPortMalloc+0xfc>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	613b      	str	r3, [r7, #16]
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	e7fd      	b.n	8006c34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	1ad2      	subs	r2, r2, r3
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c4a:	69b8      	ldr	r0, [r7, #24]
 8006c4c:	f000 f90a 	bl	8006e64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c50:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc8 <pvPortMalloc+0x18c>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cc8 <pvPortMalloc+0x18c>)
 8006c5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc8 <pvPortMalloc+0x18c>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd0 <pvPortMalloc+0x194>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d203      	bcs.n	8006c72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c6a:	4b17      	ldr	r3, [pc, #92]	@ (8006cc8 <pvPortMalloc+0x18c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a18      	ldr	r2, [pc, #96]	@ (8006cd0 <pvPortMalloc+0x194>)
 8006c70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	4b13      	ldr	r3, [pc, #76]	@ (8006cc4 <pvPortMalloc+0x188>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c86:	4b13      	ldr	r3, [pc, #76]	@ (8006cd4 <pvPortMalloc+0x198>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	4a11      	ldr	r2, [pc, #68]	@ (8006cd4 <pvPortMalloc+0x198>)
 8006c8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c90:	f7fe fcd8 	bl	8005644 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <pvPortMalloc+0x17a>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	60fb      	str	r3, [r7, #12]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <pvPortMalloc+0x176>
	return pvReturn;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3728      	adds	r7, #40	@ 0x28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20004168 	.word	0x20004168
 8006cc4:	2000417c 	.word	0x2000417c
 8006cc8:	2000416c 	.word	0x2000416c
 8006ccc:	20004160 	.word	0x20004160
 8006cd0:	20004170 	.word	0x20004170
 8006cd4:	20004174 	.word	0x20004174

08006cd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d04f      	beq.n	8006d8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cea:	2308      	movs	r3, #8
 8006cec:	425b      	negs	r3, r3
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b25      	ldr	r3, [pc, #148]	@ (8006d94 <vPortFree+0xbc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4013      	ands	r3, r2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <vPortFree+0x46>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60fb      	str	r3, [r7, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	e7fd      	b.n	8006d1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00b      	beq.n	8006d3e <vPortFree+0x66>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	60bb      	str	r3, [r7, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	4b14      	ldr	r3, [pc, #80]	@ (8006d94 <vPortFree+0xbc>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01e      	beq.n	8006d8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d11a      	bne.n	8006d8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	4b0e      	ldr	r3, [pc, #56]	@ (8006d94 <vPortFree+0xbc>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	401a      	ands	r2, r3
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d64:	f7fe fc60 	bl	8005628 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <vPortFree+0xc0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4413      	add	r3, r2
 8006d72:	4a09      	ldr	r2, [pc, #36]	@ (8006d98 <vPortFree+0xc0>)
 8006d74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d76:	6938      	ldr	r0, [r7, #16]
 8006d78:	f000 f874 	bl	8006e64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d7c:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <vPortFree+0xc4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3301      	adds	r3, #1
 8006d82:	4a06      	ldr	r2, [pc, #24]	@ (8006d9c <vPortFree+0xc4>)
 8006d84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d86:	f7fe fc5d 	bl	8005644 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d8a:	bf00      	nop
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	2000417c 	.word	0x2000417c
 8006d98:	2000416c 	.word	0x2000416c
 8006d9c:	20004178 	.word	0x20004178

08006da0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006da6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006daa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006dac:	4b27      	ldr	r3, [pc, #156]	@ (8006e4c <prvHeapInit+0xac>)
 8006dae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00c      	beq.n	8006dd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3307      	adds	r3, #7
 8006dbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0307 	bic.w	r3, r3, #7
 8006dc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	4a1f      	ldr	r2, [pc, #124]	@ (8006e4c <prvHeapInit+0xac>)
 8006dd0:	4413      	add	r3, r2
 8006dd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e50 <prvHeapInit+0xb0>)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dde:	4b1c      	ldr	r3, [pc, #112]	@ (8006e50 <prvHeapInit+0xb0>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4413      	add	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dec:	2208      	movs	r2, #8
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0307 	bic.w	r3, r3, #7
 8006dfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a15      	ldr	r2, [pc, #84]	@ (8006e54 <prvHeapInit+0xb4>)
 8006e00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e02:	4b14      	ldr	r3, [pc, #80]	@ (8006e54 <prvHeapInit+0xb4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e0a:	4b12      	ldr	r3, [pc, #72]	@ (8006e54 <prvHeapInit+0xb4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	1ad2      	subs	r2, r2, r3
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e20:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <prvHeapInit+0xb4>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e58 <prvHeapInit+0xb8>)
 8006e2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4a09      	ldr	r2, [pc, #36]	@ (8006e5c <prvHeapInit+0xbc>)
 8006e36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e38:	4b09      	ldr	r3, [pc, #36]	@ (8006e60 <prvHeapInit+0xc0>)
 8006e3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e3e:	601a      	str	r2, [r3, #0]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20000560 	.word	0x20000560
 8006e50:	20004160 	.word	0x20004160
 8006e54:	20004168 	.word	0x20004168
 8006e58:	20004170 	.word	0x20004170
 8006e5c:	2000416c 	.word	0x2000416c
 8006e60:	2000417c 	.word	0x2000417c

08006e64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e6c:	4b28      	ldr	r3, [pc, #160]	@ (8006f10 <prvInsertBlockIntoFreeList+0xac>)
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e002      	b.n	8006e78 <prvInsertBlockIntoFreeList+0x14>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d8f7      	bhi.n	8006e72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d108      	bne.n	8006ea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	441a      	add	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d118      	bne.n	8006eec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b15      	ldr	r3, [pc, #84]	@ (8006f14 <prvInsertBlockIntoFreeList+0xb0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d00d      	beq.n	8006ee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	441a      	add	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e008      	b.n	8006ef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f14 <prvInsertBlockIntoFreeList+0xb0>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e003      	b.n	8006ef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d002      	beq.n	8006f02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20004160 	.word	0x20004160
 8006f14:	20004168 	.word	0x20004168

08006f18 <app_init>:

/********************** external data declaration *****************************/

/********************** external functions definition ************************/
void app_init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
      /* 1) Inicialización de HW específico del UART (clocks/GPIO/USART/DMA deben
           estar configurados por CubeMX; acá solo confirmamos/afinamos si hace falta) */
    port_uart_hw_init();
 8006f1c:	f000 f834 	bl	8006f88 <port_uart_hw_init>

    /* 2) Crear el AO dueño del UART (cola/stream + task) */
    if (!ao_uart_create()) {
 8006f20:	f000 f86e 	bl	8007000 <ao_uart_create>
        /* Si querés, podés hacer un fallback o quedarte en error */
        // for(;;);
    }

    /* 3) Inicializar el logger y suscribir el sink hacia el AO UART */
    log_init();
 8006f24:	f000 f952 	bl	80071cc <log_init>
    /* Enviará solo INFO+ por UART. Cambiá LOG_INFO por LOG_DEBUG si querés todo. */
    (void)log_subscribe(logger_sink_uart, LOG_INFO, NULL);
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	4810      	ldr	r0, [pc, #64]	@ (8006f70 <app_init+0x58>)
 8006f2e:	f000 f965 	bl	80071fc <log_subscribe>

    /* 4) Logs de smoke test */
    log_printf(LOG_INFO,  "Logger listo. AO UART activo.\r\n");
 8006f32:	4910      	ldr	r1, [pc, #64]	@ (8006f74 <app_init+0x5c>)
 8006f34:	2001      	movs	r0, #1
 8006f36:	f000 fa4b 	bl	80073d0 <log_printf>
    log_printf(LOG_WARN,  "Ejemplo WARN: nivel de batería bajo (simulado).\r\n");
 8006f3a:	490f      	ldr	r1, [pc, #60]	@ (8006f78 <app_init+0x60>)
 8006f3c:	2002      	movs	r0, #2
 8006f3e:	f000 fa47 	bl	80073d0 <log_printf>
    log_printf(LOG_ERROR, "Ejemplo ERROR: código=%d (simulado).\r\n", 42);
 8006f42:	222a      	movs	r2, #42	@ 0x2a
 8006f44:	490d      	ldr	r1, [pc, #52]	@ (8006f7c <app_init+0x64>)
 8006f46:	2003      	movs	r0, #3
 8006f48:	f000 fa42 	bl	80073d0 <log_printf>
    //LOGGER_ERROR("Failed to create button task");
    //while(1);
  //}

  //LOGGER_INFO("Initializing cycle counter...");
  cycle_counter_init();
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <app_init+0x68>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4a0b      	ldr	r2, [pc, #44]	@ (8006f80 <app_init+0x68>)
 8006f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f56:	60d3      	str	r3, [r2, #12]
 8006f58:	4b0a      	ldr	r3, [pc, #40]	@ (8006f84 <app_init+0x6c>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
 8006f5e:	4b09      	ldr	r3, [pc, #36]	@ (8006f84 <app_init+0x6c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a08      	ldr	r2, [pc, #32]	@ (8006f84 <app_init+0x6c>)
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6013      	str	r3, [r2, #0]
  
  //LOGGER_INFO("Application initialization complete");
}
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	0800745d 	.word	0x0800745d
 8006f74:	08007ea4 	.word	0x08007ea4
 8006f78:	08007ec4 	.word	0x08007ec4
 8006f7c:	08007ef8 	.word	0x08007ef8
 8006f80:	e000edf0 	.word	0xe000edf0
 8006f84:	e0001000 	.word	0xe0001000

08006f88 <port_uart_hw_init>:

#define PORT_UART_HANDLE   (&huart2)

/* ----------- API ----------------------------------------------------------- */
void port_uart_hw_init(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
       If your project already calls MX_USART2_UART_Init() in main, you can leave
       this function empty or use it to assert the handle is ready. */
    /* Example (uncomment if you expose the MX init):
       MX_USART2_UART_Init();
    */
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
	...

08006f98 <port_uart_dma_start>:

void port_uart_dma_start(const uint8_t* buf, size_t len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
    if (!buf || len == 0) return;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <port_uart_dma_start+0x26>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <port_uart_dma_start+0x26>
    /* HAL UART DMA expects uint16_t length on some families; cast is safe if <= 0xFFFF */
    HAL_UART_Transmit_DMA(PORT_UART_HANDLE, (uint8_t*)buf, (uint16_t)len);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	4804      	ldr	r0, [pc, #16]	@ (8006fc8 <port_uart_dma_start+0x30>)
 8006fb8:	f7fc f8a4 	bl	8003104 <HAL_UART_Transmit_DMA>
 8006fbc:	e000      	b.n	8006fc0 <port_uart_dma_start+0x28>
    if (!buf || len == 0) return;
 8006fbe:	bf00      	nop
}
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000328 	.word	0x20000328

08006fcc <HAL_UART_TxCpltCallback>:

/* ----------- HAL Callbacks ------------------------------------------------- */
/* HAL calls this from the DMA TX complete interrupt context.
 * We translate it to AO UART notification. */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
    if (huart == PORT_UART_HANDLE) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a04      	ldr	r2, [pc, #16]	@ (8006fe8 <HAL_UART_TxCpltCallback+0x1c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d101      	bne.n	8006fe0 <HAL_UART_TxCpltCallback+0x14>
        ao_uart_on_tx_complete_isr();
 8006fdc:	f000 f878 	bl	80070d0 <ao_uart_on_tx_complete_isr>
    }
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000328 	.word	0x20000328

08006fec <HAL_UART_ErrorCallback>:

/* Optional: error callback to observe UART errors (framing, overrun, etc.) */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
    if (huart == PORT_UART_HANDLE) {
        /* You might log an error or reset state if needed. */
        /* (Do not block here) */
    }
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <ao_uart_create>:
static volatile bool        s_tx_inflight = false;

static void ao_uart_task(void* arg);

bool ao_uart_create(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af02      	add	r7, sp, #8
    if (!s_tx_stream) {
 8007006:	4b16      	ldr	r3, [pc, #88]	@ (8007060 <ao_uart_create+0x60>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10e      	bne.n	800702c <ao_uart_create+0x2c>
        s_tx_stream = xStreamBufferCreate(AO_UART_STREAM_CAPACITY, 1 /* trigger */);
 800700e:	2200      	movs	r2, #0
 8007010:	2101      	movs	r1, #1
 8007012:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007016:	f7fd fd61 	bl	8004adc <xStreamBufferGenericCreate>
 800701a:	4603      	mov	r3, r0
 800701c:	4a10      	ldr	r2, [pc, #64]	@ (8007060 <ao_uart_create+0x60>)
 800701e:	6013      	str	r3, [r2, #0]
        if (!s_tx_stream) return false;
 8007020:	4b0f      	ldr	r3, [pc, #60]	@ (8007060 <ao_uart_create+0x60>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <ao_uart_create+0x2c>
 8007028:	2300      	movs	r3, #0
 800702a:	e015      	b.n	8007058 <ao_uart_create+0x58>
    }
    if (!s_task) {
 800702c:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <ao_uart_create+0x64>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d110      	bne.n	8007056 <ao_uart_create+0x56>
        BaseType_t ok = xTaskCreate(ao_uart_task, AO_UART_TASK_NAME,
 8007034:	4b0b      	ldr	r3, [pc, #44]	@ (8007064 <ao_uart_create+0x64>)
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	2302      	movs	r3, #2
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2300      	movs	r3, #0
 800703e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8007042:	4909      	ldr	r1, [pc, #36]	@ (8007068 <ao_uart_create+0x68>)
 8007044:	4809      	ldr	r0, [pc, #36]	@ (800706c <ao_uart_create+0x6c>)
 8007046:	f7fe f941 	bl	80052cc <xTaskCreate>
 800704a:	6078      	str	r0, [r7, #4]
                                    AO_UART_TASK_STACK, NULL,
                                    AO_UART_TASK_PRIO, &s_task);
        if (ok != pdPASS) return false;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d001      	beq.n	8007056 <ao_uart_create+0x56>
 8007052:	2300      	movs	r3, #0
 8007054:	e000      	b.n	8007058 <ao_uart_create+0x58>
    }
    return true;
 8007056:	2301      	movs	r3, #1
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20004184 	.word	0x20004184
 8007064:	20004180 	.word	0x20004180
 8007068:	08007f20 	.word	0x08007f20
 800706c:	08007121 	.word	0x08007121

08007070 <ao_uart_post>:

size_t ao_uart_post(const uint8_t* data, size_t len)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
    if (!data || len == 0 || !s_tx_stream) return 0;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <ao_uart_post+0x1e>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <ao_uart_post+0x1e>
 8007086:	4b10      	ldr	r3, [pc, #64]	@ (80070c8 <ao_uart_post+0x58>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <ao_uart_post+0x22>
 800708e:	2300      	movs	r3, #0
 8007090:	e016      	b.n	80070c0 <ao_uart_post+0x50>
    size_t wrote = xStreamBufferSend(s_tx_stream, data, len, 0);
 8007092:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <ao_uart_post+0x58>)
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	2300      	movs	r3, #0
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	f7fd fdb0 	bl	8004c00 <xStreamBufferSend>
 80070a0:	60f8      	str	r0, [r7, #12]
    /* Poke AO in case it is waiting */
    if (wrote && s_task) xTaskNotifyGive(s_task);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <ao_uart_post+0x4e>
 80070a8:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <ao_uart_post+0x5c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d006      	beq.n	80070be <ao_uart_post+0x4e>
 80070b0:	4b06      	ldr	r3, [pc, #24]	@ (80070cc <ao_uart_post+0x5c>)
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	2300      	movs	r3, #0
 80070b6:	2202      	movs	r2, #2
 80070b8:	2100      	movs	r1, #0
 80070ba:	f7ff f915 	bl	80062e8 <xTaskGenericNotify>
    return wrote;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20004184 	.word	0x20004184
 80070cc:	20004180 	.word	0x20004180

080070d0 <ao_uart_on_tx_complete_isr>:
        vTaskDelay(pdMS_TO_TICKS(1));
    }
}

void ao_uart_on_tx_complete_isr(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
    BaseType_t xHigher = pdFALSE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	607b      	str	r3, [r7, #4]
    s_tx_inflight = false;
 80070da:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <ao_uart_on_tx_complete_isr+0x44>)
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
    if (s_task) vTaskNotifyGiveFromISR(s_task, &xHigher);
 80070e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007118 <ao_uart_on_tx_complete_isr+0x48>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d006      	beq.n	80070f6 <ao_uart_on_tx_complete_isr+0x26>
 80070e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007118 <ao_uart_on_tx_complete_isr+0x48>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	1d3a      	adds	r2, r7, #4
 80070ee:	4611      	mov	r1, r2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff f9b1 	bl	8006458 <vTaskNotifyGiveFromISR>
    portYIELD_FROM_ISR(xHigher);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <ao_uart_on_tx_complete_isr+0x3c>
 80070fc:	4b07      	ldr	r3, [pc, #28]	@ (800711c <ao_uart_on_tx_complete_isr+0x4c>)
 80070fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	f3bf 8f6f 	isb	sy
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20004188 	.word	0x20004188
 8007118:	20004180 	.word	0x20004180
 800711c:	e000ed04 	.word	0xe000ed04

08007120 <ao_uart_task>:

static void ao_uart_task(void* arg)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b0c4      	sub	sp, #272	@ 0x110
 8007124:	af00      	add	r7, sp, #0
 8007126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800712a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800712e:	6018      	str	r0, [r3, #0]
    (void)arg;
    uint8_t chunk[AO_UART_DMA_CHUNK_MAX];

    for (;;) {
        /* Try receive some bytes; if none, block until notified (producer or ISR). */
        size_t n = xStreamBufferReceive(s_tx_stream, chunk, sizeof(chunk), pdMS_TO_TICKS(10));
 8007130:	4b12      	ldr	r3, [pc, #72]	@ (800717c <ao_uart_task+0x5c>)
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	f107 010c 	add.w	r1, r7, #12
 8007138:	230a      	movs	r3, #10
 800713a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800713e:	f7fd fe55 	bl	8004dec <xStreamBufferReceive>
 8007142:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        if (n == 0) {
 8007146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d105      	bne.n	800715a <ao_uart_task+0x3a>
            ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800714e:	f04f 31ff 	mov.w	r1, #4294967295
 8007152:	2001      	movs	r0, #1
 8007154:	f7ff f826 	bl	80061a4 <ulTaskNotifyTake>
            continue;
 8007158:	e00e      	b.n	8007178 <ao_uart_task+0x58>
        }

        s_tx_inflight = true;
 800715a:	4b09      	ldr	r3, [pc, #36]	@ (8007180 <ao_uart_task+0x60>)
 800715c:	2201      	movs	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
        port_uart_dma_start(chunk, n);
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff ff15 	bl	8006f98 <port_uart_dma_start>

        /* Wait until DMA complete ISR wakes us */
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800716e:	f04f 31ff 	mov.w	r1, #4294967295
 8007172:	2001      	movs	r0, #1
 8007174:	f7ff f816 	bl	80061a4 <ulTaskNotifyTake>
    for (;;) {
 8007178:	e7da      	b.n	8007130 <ao_uart_task+0x10>
 800717a:	bf00      	nop
 800717c:	20004184 	.word	0x20004184
 8007180:	20004188 	.word	0x20004188

08007184 <lock>:

#if LOG_USE_FREERTOS
  #include "FreeRTOS.h"
  #include "semphr.h"
  static SemaphoreHandle_t s_log_mtx = NULL;
  static inline void lock(void){ if (s_log_mtx) xSemaphoreTake(s_log_mtx, portMAX_DELAY); }
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
 8007188:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <lock+0x20>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d006      	beq.n	800719e <lock+0x1a>
 8007190:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <lock+0x20>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f04f 31ff 	mov.w	r1, #4294967295
 8007198:	4618      	mov	r0, r3
 800719a:	f7fd fa8d 	bl	80046b8 <xQueueSemaphoreTake>
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	2000418c 	.word	0x2000418c

080071a8 <unlock>:
  static inline void unlock(void){ if (s_log_mtx) xSemaphoreGive(s_log_mtx); }
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <unlock+0x20>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <unlock+0x1a>
 80071b4:	4b04      	ldr	r3, [pc, #16]	@ (80071c8 <unlock+0x20>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	f7fd f979 	bl	80044b4 <xQueueGenericSend>
 80071c2:	bf00      	nop
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	2000418c 	.word	0x2000418c

080071cc <log_init>:

static subscriber_t s_subs[LOG_MAX_SUBSCRIBERS];
static char s_buf[LOG_MAX_MESSAGE_LENGTH];

void log_init(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
    memset(s_subs, 0, sizeof(s_subs));
 80071d0:	2240      	movs	r2, #64	@ 0x40
 80071d2:	2100      	movs	r1, #0
 80071d4:	4807      	ldr	r0, [pc, #28]	@ (80071f4 <log_init+0x28>)
 80071d6:	f000 f9c3 	bl	8007560 <memset>
#if LOG_USE_FREERTOS
    if (!s_log_mtx) s_log_mtx = xSemaphoreCreateMutex();
 80071da:	4b07      	ldr	r3, [pc, #28]	@ (80071f8 <log_init+0x2c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d105      	bne.n	80071ee <log_init+0x22>
 80071e2:	2001      	movs	r0, #1
 80071e4:	f7fd f94e 	bl	8004484 <xQueueCreateMutex>
 80071e8:	4603      	mov	r3, r0
 80071ea:	4a03      	ldr	r2, [pc, #12]	@ (80071f8 <log_init+0x2c>)
 80071ec:	6013      	str	r3, [r2, #0]
#endif
}
 80071ee:	bf00      	nop
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20004190 	.word	0x20004190
 80071f8:	2000418c 	.word	0x2000418c

080071fc <log_subscribe>:

int log_subscribe(log_sink_fn fn, log_level_t min_level, void* user_ctx)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	460b      	mov	r3, r1
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	72fb      	strb	r3, [r7, #11]
    if (!fn) return -1;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <log_subscribe+0x1a>
 8007210:	f04f 33ff 	mov.w	r3, #4294967295
 8007214:	e036      	b.n	8007284 <log_subscribe+0x88>
    lock();
 8007216:	f7ff ffb5 	bl	8007184 <lock>
    int h = -1;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	617b      	str	r3, [r7, #20]
    for (int i=0;i<LOG_MAX_SUBSCRIBERS;i++){
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	e028      	b.n	8007278 <log_subscribe+0x7c>
        if (!s_subs[i].in_use){
 8007226:	4a19      	ldr	r2, [pc, #100]	@ (800728c <log_subscribe+0x90>)
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	4413      	add	r3, r2
 800722e:	330c      	adds	r3, #12
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d11d      	bne.n	8007272 <log_subscribe+0x76>
            s_subs[i].fn = fn; s_subs[i].min_level = min_level;
 8007236:	4a15      	ldr	r2, [pc, #84]	@ (800728c <log_subscribe+0x90>)
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	4413      	add	r3, r2
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	4a12      	ldr	r2, [pc, #72]	@ (800728c <log_subscribe+0x90>)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	4413      	add	r3, r2
 800724a:	3304      	adds	r3, #4
 800724c:	7afa      	ldrb	r2, [r7, #11]
 800724e:	701a      	strb	r2, [r3, #0]
            s_subs[i].user = user_ctx; s_subs[i].in_use = 1;
 8007250:	4a0e      	ldr	r2, [pc, #56]	@ (800728c <log_subscribe+0x90>)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	4413      	add	r3, r2
 8007258:	3308      	adds	r3, #8
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	4a0b      	ldr	r2, [pc, #44]	@ (800728c <log_subscribe+0x90>)
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	4413      	add	r3, r2
 8007266:	330c      	adds	r3, #12
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
            h = i; break;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e005      	b.n	800727e <log_subscribe+0x82>
    for (int i=0;i<LOG_MAX_SUBSCRIBERS;i++){
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3301      	adds	r3, #1
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b03      	cmp	r3, #3
 800727c:	ddd3      	ble.n	8007226 <log_subscribe+0x2a>
        }
    }
    unlock();
 800727e:	f7ff ff93 	bl	80071a8 <unlock>
    return h;
 8007282:	697b      	ldr	r3, [r7, #20]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20004190 	.word	0x20004190

08007290 <format_prefix>:
    unlock();
    return 0;
}

static size_t format_prefix(char* dst, size_t cap, log_level_t level)
{
 8007290:	b5b0      	push	{r4, r5, r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
    size_t n = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]
#if LOG_INCLUDE_TIMESTAMP
    n += (size_t)snprintf(dst+n, (cap>n?cap-n:0), "[%10lu] ", (unsigned long)log_get_timestamp_ms());
#endif
    n += (size_t)snprintf(dst+n, (cap>n?cap-n:0), "[%s] ", log_level_str(level));
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	18d5      	adds	r5, r2, r3
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d903      	bls.n	80072b8 <format_prefix+0x28>
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	1ad4      	subs	r4, r2, r3
 80072b6:	e000      	b.n	80072ba <format_prefix+0x2a>
 80072b8:	2400      	movs	r4, #0
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f89f 	bl	8007400 <log_level_str>
 80072c2:	4603      	mov	r3, r0
 80072c4:	4a09      	ldr	r2, [pc, #36]	@ (80072ec <format_prefix+0x5c>)
 80072c6:	4621      	mov	r1, r4
 80072c8:	4628      	mov	r0, r5
 80072ca:	f000 f8d7 	bl	800747c <sniprintf>
 80072ce:	4603      	mov	r3, r0
 80072d0:	461a      	mov	r2, r3
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	4413      	add	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]
    return (n>cap?cap:n);
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4293      	cmp	r3, r2
 80072de:	bf28      	it	cs
 80072e0:	4613      	movcs	r3, r2
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bdb0      	pop	{r4, r5, r7, pc}
 80072ea:	bf00      	nop
 80072ec:	08007f28 	.word	0x08007f28

080072f0 <log_vprintf>:

size_t log_vprintf(log_level_t level, const char* fmt, va_list ap)
{
 80072f0:	b590      	push	{r4, r7, lr}
 80072f2:	b089      	sub	sp, #36	@ 0x24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	73fb      	strb	r3, [r7, #15]
    if (level < LOG_DEBUG || level > LOG_ERROR) return 0;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d901      	bls.n	8007308 <log_vprintf+0x18>
 8007304:	2300      	movs	r3, #0
 8007306:	e05a      	b.n	80073be <log_vprintf+0xce>
    lock();
 8007308:	f7ff ff3c 	bl	8007184 <lock>
    size_t n = format_prefix(s_buf, sizeof(s_buf), level);
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	461a      	mov	r2, r3
 8007310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007314:	482c      	ldr	r0, [pc, #176]	@ (80073c8 <log_vprintf+0xd8>)
 8007316:	f7ff ffbb 	bl	8007290 <format_prefix>
 800731a:	61f8      	str	r0, [r7, #28]
    int wrote = vsnprintf(s_buf+n, sizeof(s_buf)-n, fmt, ap);
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4a2a      	ldr	r2, [pc, #168]	@ (80073c8 <log_vprintf+0xd8>)
 8007320:	1898      	adds	r0, r3, r2
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	f000 f90a 	bl	8007544 <vsniprintf>
 8007330:	61b8      	str	r0, [r7, #24]
    if (wrote < 0) wrote = 0;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	da01      	bge.n	800733c <log_vprintf+0x4c>
 8007338:	2300      	movs	r3, #0
 800733a:	61bb      	str	r3, [r7, #24]
    n += (size_t)wrote;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	61fb      	str	r3, [r7, #28]
    if (n >= sizeof(s_buf)) n = sizeof(s_buf)-1;
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	2bff      	cmp	r3, #255	@ 0xff
 8007348:	d901      	bls.n	800734e <log_vprintf+0x5e>
 800734a:	23ff      	movs	r3, #255	@ 0xff
 800734c:	61fb      	str	r3, [r7, #28]
    s_buf[n] = '\0';
 800734e:	4a1e      	ldr	r2, [pc, #120]	@ (80073c8 <log_vprintf+0xd8>)
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	4413      	add	r3, r2
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]

    for (int i=0;i<LOG_MAX_SUBSCRIBERS;i++){
 8007358:	2300      	movs	r3, #0
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e029      	b.n	80073b2 <log_vprintf+0xc2>
        if (s_subs[i].in_use && s_subs[i].fn && level >= s_subs[i].min_level){
 800735e:	4a1b      	ldr	r2, [pc, #108]	@ (80073cc <log_vprintf+0xdc>)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	4413      	add	r3, r2
 8007366:	330c      	adds	r3, #12
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01e      	beq.n	80073ac <log_vprintf+0xbc>
 800736e:	4a17      	ldr	r2, [pc, #92]	@ (80073cc <log_vprintf+0xdc>)
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	4413      	add	r3, r2
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d017      	beq.n	80073ac <log_vprintf+0xbc>
 800737c:	4a13      	ldr	r2, [pc, #76]	@ (80073cc <log_vprintf+0xdc>)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	4413      	add	r3, r2
 8007384:	3304      	adds	r3, #4
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	7bfa      	ldrb	r2, [r7, #15]
 800738a:	429a      	cmp	r2, r3
 800738c:	d30e      	bcc.n	80073ac <log_vprintf+0xbc>
            s_subs[i].fn(level, s_buf, n, s_subs[i].user);
 800738e:	4a0f      	ldr	r2, [pc, #60]	@ (80073cc <log_vprintf+0xdc>)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	4413      	add	r3, r2
 8007396:	681c      	ldr	r4, [r3, #0]
 8007398:	4a0c      	ldr	r2, [pc, #48]	@ (80073cc <log_vprintf+0xdc>)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	4413      	add	r3, r2
 80073a0:	3308      	adds	r3, #8
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	7bf8      	ldrb	r0, [r7, #15]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	4907      	ldr	r1, [pc, #28]	@ (80073c8 <log_vprintf+0xd8>)
 80073aa:	47a0      	blx	r4
    for (int i=0;i<LOG_MAX_SUBSCRIBERS;i++){
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	3301      	adds	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	ddd2      	ble.n	800735e <log_vprintf+0x6e>
        }
    }
    unlock();
 80073b8:	f7ff fef6 	bl	80071a8 <unlock>
    return n;
 80073bc:	69fb      	ldr	r3, [r7, #28]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3724      	adds	r7, #36	@ 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd90      	pop	{r4, r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200041d0 	.word	0x200041d0
 80073cc:	20004190 	.word	0x20004190

080073d0 <log_printf>:

size_t log_printf(log_level_t level, const char* fmt, ...)
{
 80073d0:	b40e      	push	{r1, r2, r3}
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	4603      	mov	r3, r0
 80073da:	71fb      	strb	r3, [r7, #7]
    va_list ap;
    va_start(ap, fmt);
 80073dc:	f107 0320 	add.w	r3, r7, #32
 80073e0:	60bb      	str	r3, [r7, #8]
    size_t n = log_vprintf(level, fmt, ap);
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	69f9      	ldr	r1, [r7, #28]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff ff81 	bl	80072f0 <log_vprintf>
 80073ee:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return n;
 80073f0:	68fb      	ldr	r3, [r7, #12]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073fc:	b003      	add	sp, #12
 80073fe:	4770      	bx	lr

08007400 <log_level_str>:

const char* log_level_str(log_level_t level)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	71fb      	strb	r3, [r7, #7]
    switch (level){
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	2b03      	cmp	r3, #3
 800740e:	d813      	bhi.n	8007438 <log_level_str+0x38>
 8007410:	a201      	add	r2, pc, #4	@ (adr r2, 8007418 <log_level_str+0x18>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	08007429 	.word	0x08007429
 800741c:	0800742d 	.word	0x0800742d
 8007420:	08007431 	.word	0x08007431
 8007424:	08007435 	.word	0x08007435
        case LOG_DEBUG: return "DEBUG";
 8007428:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <log_level_str+0x48>)
 800742a:	e006      	b.n	800743a <log_level_str+0x3a>
        case LOG_INFO:  return "INFO";
 800742c:	4b07      	ldr	r3, [pc, #28]	@ (800744c <log_level_str+0x4c>)
 800742e:	e004      	b.n	800743a <log_level_str+0x3a>
        case LOG_WARN:  return "WARN";
 8007430:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <log_level_str+0x50>)
 8007432:	e002      	b.n	800743a <log_level_str+0x3a>
        case LOG_ERROR: return "ERROR";
 8007434:	4b07      	ldr	r3, [pc, #28]	@ (8007454 <log_level_str+0x54>)
 8007436:	e000      	b.n	800743a <log_level_str+0x3a>
        default:        return "?";
 8007438:	4b07      	ldr	r3, [pc, #28]	@ (8007458 <log_level_str+0x58>)
    }
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	08007f30 	.word	0x08007f30
 800744c:	08007f38 	.word	0x08007f38
 8007450:	08007f40 	.word	0x08007f40
 8007454:	08007f48 	.word	0x08007f48
 8007458:	08007f50 	.word	0x08007f50

0800745c <logger_sink_uart>:
 */
#include "logger_sink_uart.h"
#include "ao_uart.h"

void logger_sink_uart(log_level_t level, const char* msg, size_t len, void* user_ctx)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
    (void)level; (void)user_ctx;
    (void)ao_uart_post((const uint8_t*)msg, len);
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	68b8      	ldr	r0, [r7, #8]
 8007470:	f7ff fdfe 	bl	8007070 <ao_uart_post>
}
 8007474:	bf00      	nop
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <sniprintf>:
 800747c:	b40c      	push	{r2, r3}
 800747e:	b530      	push	{r4, r5, lr}
 8007480:	4b18      	ldr	r3, [pc, #96]	@ (80074e4 <sniprintf+0x68>)
 8007482:	1e0c      	subs	r4, r1, #0
 8007484:	681d      	ldr	r5, [r3, #0]
 8007486:	b09d      	sub	sp, #116	@ 0x74
 8007488:	da08      	bge.n	800749c <sniprintf+0x20>
 800748a:	238b      	movs	r3, #139	@ 0x8b
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	f04f 30ff 	mov.w	r0, #4294967295
 8007492:	b01d      	add	sp, #116	@ 0x74
 8007494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007498:	b002      	add	sp, #8
 800749a:	4770      	bx	lr
 800749c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80074a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80074aa:	bf14      	ite	ne
 80074ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074b0:	4623      	moveq	r3, r4
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	9307      	str	r3, [sp, #28]
 80074b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074ba:	9002      	str	r0, [sp, #8]
 80074bc:	9006      	str	r0, [sp, #24]
 80074be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80074c4:	ab21      	add	r3, sp, #132	@ 0x84
 80074c6:	a902      	add	r1, sp, #8
 80074c8:	4628      	mov	r0, r5
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	f000 f9de 	bl	800788c <_svfiprintf_r>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	bfbc      	itt	lt
 80074d4:	238b      	movlt	r3, #139	@ 0x8b
 80074d6:	602b      	strlt	r3, [r5, #0]
 80074d8:	2c00      	cmp	r4, #0
 80074da:	d0da      	beq.n	8007492 <sniprintf+0x16>
 80074dc:	9b02      	ldr	r3, [sp, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	e7d6      	b.n	8007492 <sniprintf+0x16>
 80074e4:	20000010 	.word	0x20000010

080074e8 <_vsniprintf_r>:
 80074e8:	b530      	push	{r4, r5, lr}
 80074ea:	4614      	mov	r4, r2
 80074ec:	2c00      	cmp	r4, #0
 80074ee:	b09b      	sub	sp, #108	@ 0x6c
 80074f0:	4605      	mov	r5, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	da05      	bge.n	8007502 <_vsniprintf_r+0x1a>
 80074f6:	238b      	movs	r3, #139	@ 0x8b
 80074f8:	6003      	str	r3, [r0, #0]
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
 80074fe:	b01b      	add	sp, #108	@ 0x6c
 8007500:	bd30      	pop	{r4, r5, pc}
 8007502:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007506:	f8ad 300c 	strh.w	r3, [sp, #12]
 800750a:	f04f 0300 	mov.w	r3, #0
 800750e:	9319      	str	r3, [sp, #100]	@ 0x64
 8007510:	bf14      	ite	ne
 8007512:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007516:	4623      	moveq	r3, r4
 8007518:	9302      	str	r3, [sp, #8]
 800751a:	9305      	str	r3, [sp, #20]
 800751c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007520:	9100      	str	r1, [sp, #0]
 8007522:	9104      	str	r1, [sp, #16]
 8007524:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007528:	4669      	mov	r1, sp
 800752a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800752c:	f000 f9ae 	bl	800788c <_svfiprintf_r>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	bfbc      	itt	lt
 8007534:	238b      	movlt	r3, #139	@ 0x8b
 8007536:	602b      	strlt	r3, [r5, #0]
 8007538:	2c00      	cmp	r4, #0
 800753a:	d0e0      	beq.n	80074fe <_vsniprintf_r+0x16>
 800753c:	9b00      	ldr	r3, [sp, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	e7dc      	b.n	80074fe <_vsniprintf_r+0x16>

08007544 <vsniprintf>:
 8007544:	b507      	push	{r0, r1, r2, lr}
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	4613      	mov	r3, r2
 800754a:	460a      	mov	r2, r1
 800754c:	4601      	mov	r1, r0
 800754e:	4803      	ldr	r0, [pc, #12]	@ (800755c <vsniprintf+0x18>)
 8007550:	6800      	ldr	r0, [r0, #0]
 8007552:	f7ff ffc9 	bl	80074e8 <_vsniprintf_r>
 8007556:	b003      	add	sp, #12
 8007558:	f85d fb04 	ldr.w	pc, [sp], #4
 800755c:	20000010 	.word	0x20000010

08007560 <memset>:
 8007560:	4402      	add	r2, r0
 8007562:	4603      	mov	r3, r0
 8007564:	4293      	cmp	r3, r2
 8007566:	d100      	bne.n	800756a <memset+0xa>
 8007568:	4770      	bx	lr
 800756a:	f803 1b01 	strb.w	r1, [r3], #1
 800756e:	e7f9      	b.n	8007564 <memset+0x4>

08007570 <__errno>:
 8007570:	4b01      	ldr	r3, [pc, #4]	@ (8007578 <__errno+0x8>)
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	20000010 	.word	0x20000010

0800757c <__libc_init_array>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	4d0d      	ldr	r5, [pc, #52]	@ (80075b4 <__libc_init_array+0x38>)
 8007580:	4c0d      	ldr	r4, [pc, #52]	@ (80075b8 <__libc_init_array+0x3c>)
 8007582:	1b64      	subs	r4, r4, r5
 8007584:	10a4      	asrs	r4, r4, #2
 8007586:	2600      	movs	r6, #0
 8007588:	42a6      	cmp	r6, r4
 800758a:	d109      	bne.n	80075a0 <__libc_init_array+0x24>
 800758c:	4d0b      	ldr	r5, [pc, #44]	@ (80075bc <__libc_init_array+0x40>)
 800758e:	4c0c      	ldr	r4, [pc, #48]	@ (80075c0 <__libc_init_array+0x44>)
 8007590:	f000 fc64 	bl	8007e5c <_init>
 8007594:	1b64      	subs	r4, r4, r5
 8007596:	10a4      	asrs	r4, r4, #2
 8007598:	2600      	movs	r6, #0
 800759a:	42a6      	cmp	r6, r4
 800759c:	d105      	bne.n	80075aa <__libc_init_array+0x2e>
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a4:	4798      	blx	r3
 80075a6:	3601      	adds	r6, #1
 80075a8:	e7ee      	b.n	8007588 <__libc_init_array+0xc>
 80075aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ae:	4798      	blx	r3
 80075b0:	3601      	adds	r6, #1
 80075b2:	e7f2      	b.n	800759a <__libc_init_array+0x1e>
 80075b4:	08007fb0 	.word	0x08007fb0
 80075b8:	08007fb0 	.word	0x08007fb0
 80075bc:	08007fb0 	.word	0x08007fb0
 80075c0:	08007fb4 	.word	0x08007fb4

080075c4 <__retarget_lock_acquire_recursive>:
 80075c4:	4770      	bx	lr

080075c6 <__retarget_lock_release_recursive>:
 80075c6:	4770      	bx	lr

080075c8 <memcpy>:
 80075c8:	440a      	add	r2, r1
 80075ca:	4291      	cmp	r1, r2
 80075cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80075d0:	d100      	bne.n	80075d4 <memcpy+0xc>
 80075d2:	4770      	bx	lr
 80075d4:	b510      	push	{r4, lr}
 80075d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075de:	4291      	cmp	r1, r2
 80075e0:	d1f9      	bne.n	80075d6 <memcpy+0xe>
 80075e2:	bd10      	pop	{r4, pc}

080075e4 <_free_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4605      	mov	r5, r0
 80075e8:	2900      	cmp	r1, #0
 80075ea:	d041      	beq.n	8007670 <_free_r+0x8c>
 80075ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f0:	1f0c      	subs	r4, r1, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bfb8      	it	lt
 80075f6:	18e4      	addlt	r4, r4, r3
 80075f8:	f000 f8e0 	bl	80077bc <__malloc_lock>
 80075fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007674 <_free_r+0x90>)
 80075fe:	6813      	ldr	r3, [r2, #0]
 8007600:	b933      	cbnz	r3, 8007610 <_free_r+0x2c>
 8007602:	6063      	str	r3, [r4, #4]
 8007604:	6014      	str	r4, [r2, #0]
 8007606:	4628      	mov	r0, r5
 8007608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800760c:	f000 b8dc 	b.w	80077c8 <__malloc_unlock>
 8007610:	42a3      	cmp	r3, r4
 8007612:	d908      	bls.n	8007626 <_free_r+0x42>
 8007614:	6820      	ldr	r0, [r4, #0]
 8007616:	1821      	adds	r1, r4, r0
 8007618:	428b      	cmp	r3, r1
 800761a:	bf01      	itttt	eq
 800761c:	6819      	ldreq	r1, [r3, #0]
 800761e:	685b      	ldreq	r3, [r3, #4]
 8007620:	1809      	addeq	r1, r1, r0
 8007622:	6021      	streq	r1, [r4, #0]
 8007624:	e7ed      	b.n	8007602 <_free_r+0x1e>
 8007626:	461a      	mov	r2, r3
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	b10b      	cbz	r3, 8007630 <_free_r+0x4c>
 800762c:	42a3      	cmp	r3, r4
 800762e:	d9fa      	bls.n	8007626 <_free_r+0x42>
 8007630:	6811      	ldr	r1, [r2, #0]
 8007632:	1850      	adds	r0, r2, r1
 8007634:	42a0      	cmp	r0, r4
 8007636:	d10b      	bne.n	8007650 <_free_r+0x6c>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	4401      	add	r1, r0
 800763c:	1850      	adds	r0, r2, r1
 800763e:	4283      	cmp	r3, r0
 8007640:	6011      	str	r1, [r2, #0]
 8007642:	d1e0      	bne.n	8007606 <_free_r+0x22>
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	6053      	str	r3, [r2, #4]
 800764a:	4408      	add	r0, r1
 800764c:	6010      	str	r0, [r2, #0]
 800764e:	e7da      	b.n	8007606 <_free_r+0x22>
 8007650:	d902      	bls.n	8007658 <_free_r+0x74>
 8007652:	230c      	movs	r3, #12
 8007654:	602b      	str	r3, [r5, #0]
 8007656:	e7d6      	b.n	8007606 <_free_r+0x22>
 8007658:	6820      	ldr	r0, [r4, #0]
 800765a:	1821      	adds	r1, r4, r0
 800765c:	428b      	cmp	r3, r1
 800765e:	bf04      	itt	eq
 8007660:	6819      	ldreq	r1, [r3, #0]
 8007662:	685b      	ldreq	r3, [r3, #4]
 8007664:	6063      	str	r3, [r4, #4]
 8007666:	bf04      	itt	eq
 8007668:	1809      	addeq	r1, r1, r0
 800766a:	6021      	streq	r1, [r4, #0]
 800766c:	6054      	str	r4, [r2, #4]
 800766e:	e7ca      	b.n	8007606 <_free_r+0x22>
 8007670:	bd38      	pop	{r3, r4, r5, pc}
 8007672:	bf00      	nop
 8007674:	20004414 	.word	0x20004414

08007678 <sbrk_aligned>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4e0f      	ldr	r6, [pc, #60]	@ (80076b8 <sbrk_aligned+0x40>)
 800767c:	460c      	mov	r4, r1
 800767e:	6831      	ldr	r1, [r6, #0]
 8007680:	4605      	mov	r5, r0
 8007682:	b911      	cbnz	r1, 800768a <sbrk_aligned+0x12>
 8007684:	f000 fba4 	bl	8007dd0 <_sbrk_r>
 8007688:	6030      	str	r0, [r6, #0]
 800768a:	4621      	mov	r1, r4
 800768c:	4628      	mov	r0, r5
 800768e:	f000 fb9f 	bl	8007dd0 <_sbrk_r>
 8007692:	1c43      	adds	r3, r0, #1
 8007694:	d103      	bne.n	800769e <sbrk_aligned+0x26>
 8007696:	f04f 34ff 	mov.w	r4, #4294967295
 800769a:	4620      	mov	r0, r4
 800769c:	bd70      	pop	{r4, r5, r6, pc}
 800769e:	1cc4      	adds	r4, r0, #3
 80076a0:	f024 0403 	bic.w	r4, r4, #3
 80076a4:	42a0      	cmp	r0, r4
 80076a6:	d0f8      	beq.n	800769a <sbrk_aligned+0x22>
 80076a8:	1a21      	subs	r1, r4, r0
 80076aa:	4628      	mov	r0, r5
 80076ac:	f000 fb90 	bl	8007dd0 <_sbrk_r>
 80076b0:	3001      	adds	r0, #1
 80076b2:	d1f2      	bne.n	800769a <sbrk_aligned+0x22>
 80076b4:	e7ef      	b.n	8007696 <sbrk_aligned+0x1e>
 80076b6:	bf00      	nop
 80076b8:	20004410 	.word	0x20004410

080076bc <_malloc_r>:
 80076bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	1ccd      	adds	r5, r1, #3
 80076c2:	f025 0503 	bic.w	r5, r5, #3
 80076c6:	3508      	adds	r5, #8
 80076c8:	2d0c      	cmp	r5, #12
 80076ca:	bf38      	it	cc
 80076cc:	250c      	movcc	r5, #12
 80076ce:	2d00      	cmp	r5, #0
 80076d0:	4606      	mov	r6, r0
 80076d2:	db01      	blt.n	80076d8 <_malloc_r+0x1c>
 80076d4:	42a9      	cmp	r1, r5
 80076d6:	d904      	bls.n	80076e2 <_malloc_r+0x26>
 80076d8:	230c      	movs	r3, #12
 80076da:	6033      	str	r3, [r6, #0]
 80076dc:	2000      	movs	r0, #0
 80076de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077b8 <_malloc_r+0xfc>
 80076e6:	f000 f869 	bl	80077bc <__malloc_lock>
 80076ea:	f8d8 3000 	ldr.w	r3, [r8]
 80076ee:	461c      	mov	r4, r3
 80076f0:	bb44      	cbnz	r4, 8007744 <_malloc_r+0x88>
 80076f2:	4629      	mov	r1, r5
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff ffbf 	bl	8007678 <sbrk_aligned>
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	4604      	mov	r4, r0
 80076fe:	d158      	bne.n	80077b2 <_malloc_r+0xf6>
 8007700:	f8d8 4000 	ldr.w	r4, [r8]
 8007704:	4627      	mov	r7, r4
 8007706:	2f00      	cmp	r7, #0
 8007708:	d143      	bne.n	8007792 <_malloc_r+0xd6>
 800770a:	2c00      	cmp	r4, #0
 800770c:	d04b      	beq.n	80077a6 <_malloc_r+0xea>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	4639      	mov	r1, r7
 8007712:	4630      	mov	r0, r6
 8007714:	eb04 0903 	add.w	r9, r4, r3
 8007718:	f000 fb5a 	bl	8007dd0 <_sbrk_r>
 800771c:	4581      	cmp	r9, r0
 800771e:	d142      	bne.n	80077a6 <_malloc_r+0xea>
 8007720:	6821      	ldr	r1, [r4, #0]
 8007722:	1a6d      	subs	r5, r5, r1
 8007724:	4629      	mov	r1, r5
 8007726:	4630      	mov	r0, r6
 8007728:	f7ff ffa6 	bl	8007678 <sbrk_aligned>
 800772c:	3001      	adds	r0, #1
 800772e:	d03a      	beq.n	80077a6 <_malloc_r+0xea>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	442b      	add	r3, r5
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	f8d8 3000 	ldr.w	r3, [r8]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	bb62      	cbnz	r2, 8007798 <_malloc_r+0xdc>
 800773e:	f8c8 7000 	str.w	r7, [r8]
 8007742:	e00f      	b.n	8007764 <_malloc_r+0xa8>
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	1b52      	subs	r2, r2, r5
 8007748:	d420      	bmi.n	800778c <_malloc_r+0xd0>
 800774a:	2a0b      	cmp	r2, #11
 800774c:	d917      	bls.n	800777e <_malloc_r+0xc2>
 800774e:	1961      	adds	r1, r4, r5
 8007750:	42a3      	cmp	r3, r4
 8007752:	6025      	str	r5, [r4, #0]
 8007754:	bf18      	it	ne
 8007756:	6059      	strne	r1, [r3, #4]
 8007758:	6863      	ldr	r3, [r4, #4]
 800775a:	bf08      	it	eq
 800775c:	f8c8 1000 	streq.w	r1, [r8]
 8007760:	5162      	str	r2, [r4, r5]
 8007762:	604b      	str	r3, [r1, #4]
 8007764:	4630      	mov	r0, r6
 8007766:	f000 f82f 	bl	80077c8 <__malloc_unlock>
 800776a:	f104 000b 	add.w	r0, r4, #11
 800776e:	1d23      	adds	r3, r4, #4
 8007770:	f020 0007 	bic.w	r0, r0, #7
 8007774:	1ac2      	subs	r2, r0, r3
 8007776:	bf1c      	itt	ne
 8007778:	1a1b      	subne	r3, r3, r0
 800777a:	50a3      	strne	r3, [r4, r2]
 800777c:	e7af      	b.n	80076de <_malloc_r+0x22>
 800777e:	6862      	ldr	r2, [r4, #4]
 8007780:	42a3      	cmp	r3, r4
 8007782:	bf0c      	ite	eq
 8007784:	f8c8 2000 	streq.w	r2, [r8]
 8007788:	605a      	strne	r2, [r3, #4]
 800778a:	e7eb      	b.n	8007764 <_malloc_r+0xa8>
 800778c:	4623      	mov	r3, r4
 800778e:	6864      	ldr	r4, [r4, #4]
 8007790:	e7ae      	b.n	80076f0 <_malloc_r+0x34>
 8007792:	463c      	mov	r4, r7
 8007794:	687f      	ldr	r7, [r7, #4]
 8007796:	e7b6      	b.n	8007706 <_malloc_r+0x4a>
 8007798:	461a      	mov	r2, r3
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	42a3      	cmp	r3, r4
 800779e:	d1fb      	bne.n	8007798 <_malloc_r+0xdc>
 80077a0:	2300      	movs	r3, #0
 80077a2:	6053      	str	r3, [r2, #4]
 80077a4:	e7de      	b.n	8007764 <_malloc_r+0xa8>
 80077a6:	230c      	movs	r3, #12
 80077a8:	6033      	str	r3, [r6, #0]
 80077aa:	4630      	mov	r0, r6
 80077ac:	f000 f80c 	bl	80077c8 <__malloc_unlock>
 80077b0:	e794      	b.n	80076dc <_malloc_r+0x20>
 80077b2:	6005      	str	r5, [r0, #0]
 80077b4:	e7d6      	b.n	8007764 <_malloc_r+0xa8>
 80077b6:	bf00      	nop
 80077b8:	20004414 	.word	0x20004414

080077bc <__malloc_lock>:
 80077bc:	4801      	ldr	r0, [pc, #4]	@ (80077c4 <__malloc_lock+0x8>)
 80077be:	f7ff bf01 	b.w	80075c4 <__retarget_lock_acquire_recursive>
 80077c2:	bf00      	nop
 80077c4:	2000440c 	.word	0x2000440c

080077c8 <__malloc_unlock>:
 80077c8:	4801      	ldr	r0, [pc, #4]	@ (80077d0 <__malloc_unlock+0x8>)
 80077ca:	f7ff befc 	b.w	80075c6 <__retarget_lock_release_recursive>
 80077ce:	bf00      	nop
 80077d0:	2000440c 	.word	0x2000440c

080077d4 <__ssputs_r>:
 80077d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	688e      	ldr	r6, [r1, #8]
 80077da:	461f      	mov	r7, r3
 80077dc:	42be      	cmp	r6, r7
 80077de:	680b      	ldr	r3, [r1, #0]
 80077e0:	4682      	mov	sl, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	4690      	mov	r8, r2
 80077e6:	d82d      	bhi.n	8007844 <__ssputs_r+0x70>
 80077e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077f0:	d026      	beq.n	8007840 <__ssputs_r+0x6c>
 80077f2:	6965      	ldr	r5, [r4, #20]
 80077f4:	6909      	ldr	r1, [r1, #16]
 80077f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077fa:	eba3 0901 	sub.w	r9, r3, r1
 80077fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007802:	1c7b      	adds	r3, r7, #1
 8007804:	444b      	add	r3, r9
 8007806:	106d      	asrs	r5, r5, #1
 8007808:	429d      	cmp	r5, r3
 800780a:	bf38      	it	cc
 800780c:	461d      	movcc	r5, r3
 800780e:	0553      	lsls	r3, r2, #21
 8007810:	d527      	bpl.n	8007862 <__ssputs_r+0x8e>
 8007812:	4629      	mov	r1, r5
 8007814:	f7ff ff52 	bl	80076bc <_malloc_r>
 8007818:	4606      	mov	r6, r0
 800781a:	b360      	cbz	r0, 8007876 <__ssputs_r+0xa2>
 800781c:	6921      	ldr	r1, [r4, #16]
 800781e:	464a      	mov	r2, r9
 8007820:	f7ff fed2 	bl	80075c8 <memcpy>
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800782a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	6126      	str	r6, [r4, #16]
 8007832:	6165      	str	r5, [r4, #20]
 8007834:	444e      	add	r6, r9
 8007836:	eba5 0509 	sub.w	r5, r5, r9
 800783a:	6026      	str	r6, [r4, #0]
 800783c:	60a5      	str	r5, [r4, #8]
 800783e:	463e      	mov	r6, r7
 8007840:	42be      	cmp	r6, r7
 8007842:	d900      	bls.n	8007846 <__ssputs_r+0x72>
 8007844:	463e      	mov	r6, r7
 8007846:	6820      	ldr	r0, [r4, #0]
 8007848:	4632      	mov	r2, r6
 800784a:	4641      	mov	r1, r8
 800784c:	f000 faa6 	bl	8007d9c <memmove>
 8007850:	68a3      	ldr	r3, [r4, #8]
 8007852:	1b9b      	subs	r3, r3, r6
 8007854:	60a3      	str	r3, [r4, #8]
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	4433      	add	r3, r6
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	2000      	movs	r0, #0
 800785e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007862:	462a      	mov	r2, r5
 8007864:	f000 fac4 	bl	8007df0 <_realloc_r>
 8007868:	4606      	mov	r6, r0
 800786a:	2800      	cmp	r0, #0
 800786c:	d1e0      	bne.n	8007830 <__ssputs_r+0x5c>
 800786e:	6921      	ldr	r1, [r4, #16]
 8007870:	4650      	mov	r0, sl
 8007872:	f7ff feb7 	bl	80075e4 <_free_r>
 8007876:	230c      	movs	r3, #12
 8007878:	f8ca 3000 	str.w	r3, [sl]
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	f04f 30ff 	mov.w	r0, #4294967295
 8007888:	e7e9      	b.n	800785e <__ssputs_r+0x8a>
	...

0800788c <_svfiprintf_r>:
 800788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007890:	4698      	mov	r8, r3
 8007892:	898b      	ldrh	r3, [r1, #12]
 8007894:	061b      	lsls	r3, r3, #24
 8007896:	b09d      	sub	sp, #116	@ 0x74
 8007898:	4607      	mov	r7, r0
 800789a:	460d      	mov	r5, r1
 800789c:	4614      	mov	r4, r2
 800789e:	d510      	bpl.n	80078c2 <_svfiprintf_r+0x36>
 80078a0:	690b      	ldr	r3, [r1, #16]
 80078a2:	b973      	cbnz	r3, 80078c2 <_svfiprintf_r+0x36>
 80078a4:	2140      	movs	r1, #64	@ 0x40
 80078a6:	f7ff ff09 	bl	80076bc <_malloc_r>
 80078aa:	6028      	str	r0, [r5, #0]
 80078ac:	6128      	str	r0, [r5, #16]
 80078ae:	b930      	cbnz	r0, 80078be <_svfiprintf_r+0x32>
 80078b0:	230c      	movs	r3, #12
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	b01d      	add	sp, #116	@ 0x74
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	2340      	movs	r3, #64	@ 0x40
 80078c0:	616b      	str	r3, [r5, #20]
 80078c2:	2300      	movs	r3, #0
 80078c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c6:	2320      	movs	r3, #32
 80078c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d0:	2330      	movs	r3, #48	@ 0x30
 80078d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a70 <_svfiprintf_r+0x1e4>
 80078d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078da:	f04f 0901 	mov.w	r9, #1
 80078de:	4623      	mov	r3, r4
 80078e0:	469a      	mov	sl, r3
 80078e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e6:	b10a      	cbz	r2, 80078ec <_svfiprintf_r+0x60>
 80078e8:	2a25      	cmp	r2, #37	@ 0x25
 80078ea:	d1f9      	bne.n	80078e0 <_svfiprintf_r+0x54>
 80078ec:	ebba 0b04 	subs.w	fp, sl, r4
 80078f0:	d00b      	beq.n	800790a <_svfiprintf_r+0x7e>
 80078f2:	465b      	mov	r3, fp
 80078f4:	4622      	mov	r2, r4
 80078f6:	4629      	mov	r1, r5
 80078f8:	4638      	mov	r0, r7
 80078fa:	f7ff ff6b 	bl	80077d4 <__ssputs_r>
 80078fe:	3001      	adds	r0, #1
 8007900:	f000 80a7 	beq.w	8007a52 <_svfiprintf_r+0x1c6>
 8007904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007906:	445a      	add	r2, fp
 8007908:	9209      	str	r2, [sp, #36]	@ 0x24
 800790a:	f89a 3000 	ldrb.w	r3, [sl]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 809f 	beq.w	8007a52 <_svfiprintf_r+0x1c6>
 8007914:	2300      	movs	r3, #0
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800791e:	f10a 0a01 	add.w	sl, sl, #1
 8007922:	9304      	str	r3, [sp, #16]
 8007924:	9307      	str	r3, [sp, #28]
 8007926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800792a:	931a      	str	r3, [sp, #104]	@ 0x68
 800792c:	4654      	mov	r4, sl
 800792e:	2205      	movs	r2, #5
 8007930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007934:	484e      	ldr	r0, [pc, #312]	@ (8007a70 <_svfiprintf_r+0x1e4>)
 8007936:	f7f8 fc6b 	bl	8000210 <memchr>
 800793a:	9a04      	ldr	r2, [sp, #16]
 800793c:	b9d8      	cbnz	r0, 8007976 <_svfiprintf_r+0xea>
 800793e:	06d0      	lsls	r0, r2, #27
 8007940:	bf44      	itt	mi
 8007942:	2320      	movmi	r3, #32
 8007944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007948:	0711      	lsls	r1, r2, #28
 800794a:	bf44      	itt	mi
 800794c:	232b      	movmi	r3, #43	@ 0x2b
 800794e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007952:	f89a 3000 	ldrb.w	r3, [sl]
 8007956:	2b2a      	cmp	r3, #42	@ 0x2a
 8007958:	d015      	beq.n	8007986 <_svfiprintf_r+0xfa>
 800795a:	9a07      	ldr	r2, [sp, #28]
 800795c:	4654      	mov	r4, sl
 800795e:	2000      	movs	r0, #0
 8007960:	f04f 0c0a 	mov.w	ip, #10
 8007964:	4621      	mov	r1, r4
 8007966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800796a:	3b30      	subs	r3, #48	@ 0x30
 800796c:	2b09      	cmp	r3, #9
 800796e:	d94b      	bls.n	8007a08 <_svfiprintf_r+0x17c>
 8007970:	b1b0      	cbz	r0, 80079a0 <_svfiprintf_r+0x114>
 8007972:	9207      	str	r2, [sp, #28]
 8007974:	e014      	b.n	80079a0 <_svfiprintf_r+0x114>
 8007976:	eba0 0308 	sub.w	r3, r0, r8
 800797a:	fa09 f303 	lsl.w	r3, r9, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	46a2      	mov	sl, r4
 8007984:	e7d2      	b.n	800792c <_svfiprintf_r+0xa0>
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	1d19      	adds	r1, r3, #4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	9103      	str	r1, [sp, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	bfbb      	ittet	lt
 8007992:	425b      	neglt	r3, r3
 8007994:	f042 0202 	orrlt.w	r2, r2, #2
 8007998:	9307      	strge	r3, [sp, #28]
 800799a:	9307      	strlt	r3, [sp, #28]
 800799c:	bfb8      	it	lt
 800799e:	9204      	strlt	r2, [sp, #16]
 80079a0:	7823      	ldrb	r3, [r4, #0]
 80079a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80079a4:	d10a      	bne.n	80079bc <_svfiprintf_r+0x130>
 80079a6:	7863      	ldrb	r3, [r4, #1]
 80079a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079aa:	d132      	bne.n	8007a12 <_svfiprintf_r+0x186>
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	1d1a      	adds	r2, r3, #4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	9203      	str	r2, [sp, #12]
 80079b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079b8:	3402      	adds	r4, #2
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a80 <_svfiprintf_r+0x1f4>
 80079c0:	7821      	ldrb	r1, [r4, #0]
 80079c2:	2203      	movs	r2, #3
 80079c4:	4650      	mov	r0, sl
 80079c6:	f7f8 fc23 	bl	8000210 <memchr>
 80079ca:	b138      	cbz	r0, 80079dc <_svfiprintf_r+0x150>
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	eba0 000a 	sub.w	r0, r0, sl
 80079d2:	2240      	movs	r2, #64	@ 0x40
 80079d4:	4082      	lsls	r2, r0
 80079d6:	4313      	orrs	r3, r2
 80079d8:	3401      	adds	r4, #1
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e0:	4824      	ldr	r0, [pc, #144]	@ (8007a74 <_svfiprintf_r+0x1e8>)
 80079e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079e6:	2206      	movs	r2, #6
 80079e8:	f7f8 fc12 	bl	8000210 <memchr>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d036      	beq.n	8007a5e <_svfiprintf_r+0x1d2>
 80079f0:	4b21      	ldr	r3, [pc, #132]	@ (8007a78 <_svfiprintf_r+0x1ec>)
 80079f2:	bb1b      	cbnz	r3, 8007a3c <_svfiprintf_r+0x1b0>
 80079f4:	9b03      	ldr	r3, [sp, #12]
 80079f6:	3307      	adds	r3, #7
 80079f8:	f023 0307 	bic.w	r3, r3, #7
 80079fc:	3308      	adds	r3, #8
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a02:	4433      	add	r3, r6
 8007a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a06:	e76a      	b.n	80078de <_svfiprintf_r+0x52>
 8007a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e7a8      	b.n	8007964 <_svfiprintf_r+0xd8>
 8007a12:	2300      	movs	r3, #0
 8007a14:	3401      	adds	r4, #1
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f04f 0c0a 	mov.w	ip, #10
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a24:	3a30      	subs	r2, #48	@ 0x30
 8007a26:	2a09      	cmp	r2, #9
 8007a28:	d903      	bls.n	8007a32 <_svfiprintf_r+0x1a6>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0c6      	beq.n	80079bc <_svfiprintf_r+0x130>
 8007a2e:	9105      	str	r1, [sp, #20]
 8007a30:	e7c4      	b.n	80079bc <_svfiprintf_r+0x130>
 8007a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a36:	4604      	mov	r4, r0
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e7f0      	b.n	8007a1e <_svfiprintf_r+0x192>
 8007a3c:	ab03      	add	r3, sp, #12
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	462a      	mov	r2, r5
 8007a42:	4b0e      	ldr	r3, [pc, #56]	@ (8007a7c <_svfiprintf_r+0x1f0>)
 8007a44:	a904      	add	r1, sp, #16
 8007a46:	4638      	mov	r0, r7
 8007a48:	f3af 8000 	nop.w
 8007a4c:	1c42      	adds	r2, r0, #1
 8007a4e:	4606      	mov	r6, r0
 8007a50:	d1d6      	bne.n	8007a00 <_svfiprintf_r+0x174>
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	065b      	lsls	r3, r3, #25
 8007a56:	f53f af2d 	bmi.w	80078b4 <_svfiprintf_r+0x28>
 8007a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a5c:	e72c      	b.n	80078b8 <_svfiprintf_r+0x2c>
 8007a5e:	ab03      	add	r3, sp, #12
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	462a      	mov	r2, r5
 8007a64:	4b05      	ldr	r3, [pc, #20]	@ (8007a7c <_svfiprintf_r+0x1f0>)
 8007a66:	a904      	add	r1, sp, #16
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f000 f879 	bl	8007b60 <_printf_i>
 8007a6e:	e7ed      	b.n	8007a4c <_svfiprintf_r+0x1c0>
 8007a70:	08007f74 	.word	0x08007f74
 8007a74:	08007f7e 	.word	0x08007f7e
 8007a78:	00000000 	.word	0x00000000
 8007a7c:	080077d5 	.word	0x080077d5
 8007a80:	08007f7a 	.word	0x08007f7a

08007a84 <_printf_common>:
 8007a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a88:	4616      	mov	r6, r2
 8007a8a:	4698      	mov	r8, r3
 8007a8c:	688a      	ldr	r2, [r1, #8]
 8007a8e:	690b      	ldr	r3, [r1, #16]
 8007a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a94:	4293      	cmp	r3, r2
 8007a96:	bfb8      	it	lt
 8007a98:	4613      	movlt	r3, r2
 8007a9a:	6033      	str	r3, [r6, #0]
 8007a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007aa0:	4607      	mov	r7, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	b10a      	cbz	r2, 8007aaa <_printf_common+0x26>
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	6033      	str	r3, [r6, #0]
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	0699      	lsls	r1, r3, #26
 8007aae:	bf42      	ittt	mi
 8007ab0:	6833      	ldrmi	r3, [r6, #0]
 8007ab2:	3302      	addmi	r3, #2
 8007ab4:	6033      	strmi	r3, [r6, #0]
 8007ab6:	6825      	ldr	r5, [r4, #0]
 8007ab8:	f015 0506 	ands.w	r5, r5, #6
 8007abc:	d106      	bne.n	8007acc <_printf_common+0x48>
 8007abe:	f104 0a19 	add.w	sl, r4, #25
 8007ac2:	68e3      	ldr	r3, [r4, #12]
 8007ac4:	6832      	ldr	r2, [r6, #0]
 8007ac6:	1a9b      	subs	r3, r3, r2
 8007ac8:	42ab      	cmp	r3, r5
 8007aca:	dc26      	bgt.n	8007b1a <_printf_common+0x96>
 8007acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ad0:	6822      	ldr	r2, [r4, #0]
 8007ad2:	3b00      	subs	r3, #0
 8007ad4:	bf18      	it	ne
 8007ad6:	2301      	movne	r3, #1
 8007ad8:	0692      	lsls	r2, r2, #26
 8007ada:	d42b      	bmi.n	8007b34 <_printf_common+0xb0>
 8007adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	47c8      	blx	r9
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d01e      	beq.n	8007b28 <_printf_common+0xa4>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	6922      	ldr	r2, [r4, #16]
 8007aee:	f003 0306 	and.w	r3, r3, #6
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	bf02      	ittt	eq
 8007af6:	68e5      	ldreq	r5, [r4, #12]
 8007af8:	6833      	ldreq	r3, [r6, #0]
 8007afa:	1aed      	subeq	r5, r5, r3
 8007afc:	68a3      	ldr	r3, [r4, #8]
 8007afe:	bf0c      	ite	eq
 8007b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b04:	2500      	movne	r5, #0
 8007b06:	4293      	cmp	r3, r2
 8007b08:	bfc4      	itt	gt
 8007b0a:	1a9b      	subgt	r3, r3, r2
 8007b0c:	18ed      	addgt	r5, r5, r3
 8007b0e:	2600      	movs	r6, #0
 8007b10:	341a      	adds	r4, #26
 8007b12:	42b5      	cmp	r5, r6
 8007b14:	d11a      	bne.n	8007b4c <_printf_common+0xc8>
 8007b16:	2000      	movs	r0, #0
 8007b18:	e008      	b.n	8007b2c <_printf_common+0xa8>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4652      	mov	r2, sl
 8007b1e:	4641      	mov	r1, r8
 8007b20:	4638      	mov	r0, r7
 8007b22:	47c8      	blx	r9
 8007b24:	3001      	adds	r0, #1
 8007b26:	d103      	bne.n	8007b30 <_printf_common+0xac>
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b30:	3501      	adds	r5, #1
 8007b32:	e7c6      	b.n	8007ac2 <_printf_common+0x3e>
 8007b34:	18e1      	adds	r1, r4, r3
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	2030      	movs	r0, #48	@ 0x30
 8007b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b3e:	4422      	add	r2, r4
 8007b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b48:	3302      	adds	r3, #2
 8007b4a:	e7c7      	b.n	8007adc <_printf_common+0x58>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	4622      	mov	r2, r4
 8007b50:	4641      	mov	r1, r8
 8007b52:	4638      	mov	r0, r7
 8007b54:	47c8      	blx	r9
 8007b56:	3001      	adds	r0, #1
 8007b58:	d0e6      	beq.n	8007b28 <_printf_common+0xa4>
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7d9      	b.n	8007b12 <_printf_common+0x8e>
	...

08007b60 <_printf_i>:
 8007b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b64:	7e0f      	ldrb	r7, [r1, #24]
 8007b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b68:	2f78      	cmp	r7, #120	@ 0x78
 8007b6a:	4691      	mov	r9, r2
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	469a      	mov	sl, r3
 8007b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b76:	d807      	bhi.n	8007b88 <_printf_i+0x28>
 8007b78:	2f62      	cmp	r7, #98	@ 0x62
 8007b7a:	d80a      	bhi.n	8007b92 <_printf_i+0x32>
 8007b7c:	2f00      	cmp	r7, #0
 8007b7e:	f000 80d1 	beq.w	8007d24 <_printf_i+0x1c4>
 8007b82:	2f58      	cmp	r7, #88	@ 0x58
 8007b84:	f000 80b8 	beq.w	8007cf8 <_printf_i+0x198>
 8007b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b90:	e03a      	b.n	8007c08 <_printf_i+0xa8>
 8007b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b96:	2b15      	cmp	r3, #21
 8007b98:	d8f6      	bhi.n	8007b88 <_printf_i+0x28>
 8007b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8007ba0 <_printf_i+0x40>)
 8007b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ba0:	08007bf9 	.word	0x08007bf9
 8007ba4:	08007c0d 	.word	0x08007c0d
 8007ba8:	08007b89 	.word	0x08007b89
 8007bac:	08007b89 	.word	0x08007b89
 8007bb0:	08007b89 	.word	0x08007b89
 8007bb4:	08007b89 	.word	0x08007b89
 8007bb8:	08007c0d 	.word	0x08007c0d
 8007bbc:	08007b89 	.word	0x08007b89
 8007bc0:	08007b89 	.word	0x08007b89
 8007bc4:	08007b89 	.word	0x08007b89
 8007bc8:	08007b89 	.word	0x08007b89
 8007bcc:	08007d0b 	.word	0x08007d0b
 8007bd0:	08007c37 	.word	0x08007c37
 8007bd4:	08007cc5 	.word	0x08007cc5
 8007bd8:	08007b89 	.word	0x08007b89
 8007bdc:	08007b89 	.word	0x08007b89
 8007be0:	08007d2d 	.word	0x08007d2d
 8007be4:	08007b89 	.word	0x08007b89
 8007be8:	08007c37 	.word	0x08007c37
 8007bec:	08007b89 	.word	0x08007b89
 8007bf0:	08007b89 	.word	0x08007b89
 8007bf4:	08007ccd 	.word	0x08007ccd
 8007bf8:	6833      	ldr	r3, [r6, #0]
 8007bfa:	1d1a      	adds	r2, r3, #4
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6032      	str	r2, [r6, #0]
 8007c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e09c      	b.n	8007d46 <_printf_i+0x1e6>
 8007c0c:	6833      	ldr	r3, [r6, #0]
 8007c0e:	6820      	ldr	r0, [r4, #0]
 8007c10:	1d19      	adds	r1, r3, #4
 8007c12:	6031      	str	r1, [r6, #0]
 8007c14:	0606      	lsls	r6, r0, #24
 8007c16:	d501      	bpl.n	8007c1c <_printf_i+0xbc>
 8007c18:	681d      	ldr	r5, [r3, #0]
 8007c1a:	e003      	b.n	8007c24 <_printf_i+0xc4>
 8007c1c:	0645      	lsls	r5, r0, #25
 8007c1e:	d5fb      	bpl.n	8007c18 <_printf_i+0xb8>
 8007c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c24:	2d00      	cmp	r5, #0
 8007c26:	da03      	bge.n	8007c30 <_printf_i+0xd0>
 8007c28:	232d      	movs	r3, #45	@ 0x2d
 8007c2a:	426d      	negs	r5, r5
 8007c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c30:	4858      	ldr	r0, [pc, #352]	@ (8007d94 <_printf_i+0x234>)
 8007c32:	230a      	movs	r3, #10
 8007c34:	e011      	b.n	8007c5a <_printf_i+0xfa>
 8007c36:	6821      	ldr	r1, [r4, #0]
 8007c38:	6833      	ldr	r3, [r6, #0]
 8007c3a:	0608      	lsls	r0, r1, #24
 8007c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c40:	d402      	bmi.n	8007c48 <_printf_i+0xe8>
 8007c42:	0649      	lsls	r1, r1, #25
 8007c44:	bf48      	it	mi
 8007c46:	b2ad      	uxthmi	r5, r5
 8007c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c4a:	4852      	ldr	r0, [pc, #328]	@ (8007d94 <_printf_i+0x234>)
 8007c4c:	6033      	str	r3, [r6, #0]
 8007c4e:	bf14      	ite	ne
 8007c50:	230a      	movne	r3, #10
 8007c52:	2308      	moveq	r3, #8
 8007c54:	2100      	movs	r1, #0
 8007c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c5a:	6866      	ldr	r6, [r4, #4]
 8007c5c:	60a6      	str	r6, [r4, #8]
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	db05      	blt.n	8007c6e <_printf_i+0x10e>
 8007c62:	6821      	ldr	r1, [r4, #0]
 8007c64:	432e      	orrs	r6, r5
 8007c66:	f021 0104 	bic.w	r1, r1, #4
 8007c6a:	6021      	str	r1, [r4, #0]
 8007c6c:	d04b      	beq.n	8007d06 <_printf_i+0x1a6>
 8007c6e:	4616      	mov	r6, r2
 8007c70:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c74:	fb03 5711 	mls	r7, r3, r1, r5
 8007c78:	5dc7      	ldrb	r7, [r0, r7]
 8007c7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c7e:	462f      	mov	r7, r5
 8007c80:	42bb      	cmp	r3, r7
 8007c82:	460d      	mov	r5, r1
 8007c84:	d9f4      	bls.n	8007c70 <_printf_i+0x110>
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d10b      	bne.n	8007ca2 <_printf_i+0x142>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	07df      	lsls	r7, r3, #31
 8007c8e:	d508      	bpl.n	8007ca2 <_printf_i+0x142>
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	6861      	ldr	r1, [r4, #4]
 8007c94:	4299      	cmp	r1, r3
 8007c96:	bfde      	ittt	le
 8007c98:	2330      	movle	r3, #48	@ 0x30
 8007c9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ca2:	1b92      	subs	r2, r2, r6
 8007ca4:	6122      	str	r2, [r4, #16]
 8007ca6:	f8cd a000 	str.w	sl, [sp]
 8007caa:	464b      	mov	r3, r9
 8007cac:	aa03      	add	r2, sp, #12
 8007cae:	4621      	mov	r1, r4
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	f7ff fee7 	bl	8007a84 <_printf_common>
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d14a      	bne.n	8007d50 <_printf_i+0x1f0>
 8007cba:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbe:	b004      	add	sp, #16
 8007cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	f043 0320 	orr.w	r3, r3, #32
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	4832      	ldr	r0, [pc, #200]	@ (8007d98 <_printf_i+0x238>)
 8007cce:	2778      	movs	r7, #120	@ 0x78
 8007cd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	6831      	ldr	r1, [r6, #0]
 8007cd8:	061f      	lsls	r7, r3, #24
 8007cda:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cde:	d402      	bmi.n	8007ce6 <_printf_i+0x186>
 8007ce0:	065f      	lsls	r7, r3, #25
 8007ce2:	bf48      	it	mi
 8007ce4:	b2ad      	uxthmi	r5, r5
 8007ce6:	6031      	str	r1, [r6, #0]
 8007ce8:	07d9      	lsls	r1, r3, #31
 8007cea:	bf44      	itt	mi
 8007cec:	f043 0320 	orrmi.w	r3, r3, #32
 8007cf0:	6023      	strmi	r3, [r4, #0]
 8007cf2:	b11d      	cbz	r5, 8007cfc <_printf_i+0x19c>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	e7ad      	b.n	8007c54 <_printf_i+0xf4>
 8007cf8:	4826      	ldr	r0, [pc, #152]	@ (8007d94 <_printf_i+0x234>)
 8007cfa:	e7e9      	b.n	8007cd0 <_printf_i+0x170>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	f023 0320 	bic.w	r3, r3, #32
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	e7f6      	b.n	8007cf4 <_printf_i+0x194>
 8007d06:	4616      	mov	r6, r2
 8007d08:	e7bd      	b.n	8007c86 <_printf_i+0x126>
 8007d0a:	6833      	ldr	r3, [r6, #0]
 8007d0c:	6825      	ldr	r5, [r4, #0]
 8007d0e:	6961      	ldr	r1, [r4, #20]
 8007d10:	1d18      	adds	r0, r3, #4
 8007d12:	6030      	str	r0, [r6, #0]
 8007d14:	062e      	lsls	r6, r5, #24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	d501      	bpl.n	8007d1e <_printf_i+0x1be>
 8007d1a:	6019      	str	r1, [r3, #0]
 8007d1c:	e002      	b.n	8007d24 <_printf_i+0x1c4>
 8007d1e:	0668      	lsls	r0, r5, #25
 8007d20:	d5fb      	bpl.n	8007d1a <_printf_i+0x1ba>
 8007d22:	8019      	strh	r1, [r3, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	6123      	str	r3, [r4, #16]
 8007d28:	4616      	mov	r6, r2
 8007d2a:	e7bc      	b.n	8007ca6 <_printf_i+0x146>
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	6032      	str	r2, [r6, #0]
 8007d32:	681e      	ldr	r6, [r3, #0]
 8007d34:	6862      	ldr	r2, [r4, #4]
 8007d36:	2100      	movs	r1, #0
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7f8 fa69 	bl	8000210 <memchr>
 8007d3e:	b108      	cbz	r0, 8007d44 <_printf_i+0x1e4>
 8007d40:	1b80      	subs	r0, r0, r6
 8007d42:	6060      	str	r0, [r4, #4]
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d4e:	e7aa      	b.n	8007ca6 <_printf_i+0x146>
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	4632      	mov	r2, r6
 8007d54:	4649      	mov	r1, r9
 8007d56:	4640      	mov	r0, r8
 8007d58:	47d0      	blx	sl
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d0ad      	beq.n	8007cba <_printf_i+0x15a>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	079b      	lsls	r3, r3, #30
 8007d62:	d413      	bmi.n	8007d8c <_printf_i+0x22c>
 8007d64:	68e0      	ldr	r0, [r4, #12]
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	4298      	cmp	r0, r3
 8007d6a:	bfb8      	it	lt
 8007d6c:	4618      	movlt	r0, r3
 8007d6e:	e7a6      	b.n	8007cbe <_printf_i+0x15e>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4632      	mov	r2, r6
 8007d74:	4649      	mov	r1, r9
 8007d76:	4640      	mov	r0, r8
 8007d78:	47d0      	blx	sl
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d09d      	beq.n	8007cba <_printf_i+0x15a>
 8007d7e:	3501      	adds	r5, #1
 8007d80:	68e3      	ldr	r3, [r4, #12]
 8007d82:	9903      	ldr	r1, [sp, #12]
 8007d84:	1a5b      	subs	r3, r3, r1
 8007d86:	42ab      	cmp	r3, r5
 8007d88:	dcf2      	bgt.n	8007d70 <_printf_i+0x210>
 8007d8a:	e7eb      	b.n	8007d64 <_printf_i+0x204>
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	f104 0619 	add.w	r6, r4, #25
 8007d92:	e7f5      	b.n	8007d80 <_printf_i+0x220>
 8007d94:	08007f85 	.word	0x08007f85
 8007d98:	08007f96 	.word	0x08007f96

08007d9c <memmove>:
 8007d9c:	4288      	cmp	r0, r1
 8007d9e:	b510      	push	{r4, lr}
 8007da0:	eb01 0402 	add.w	r4, r1, r2
 8007da4:	d902      	bls.n	8007dac <memmove+0x10>
 8007da6:	4284      	cmp	r4, r0
 8007da8:	4623      	mov	r3, r4
 8007daa:	d807      	bhi.n	8007dbc <memmove+0x20>
 8007dac:	1e43      	subs	r3, r0, #1
 8007dae:	42a1      	cmp	r1, r4
 8007db0:	d008      	beq.n	8007dc4 <memmove+0x28>
 8007db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dba:	e7f8      	b.n	8007dae <memmove+0x12>
 8007dbc:	4402      	add	r2, r0
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	428a      	cmp	r2, r1
 8007dc2:	d100      	bne.n	8007dc6 <memmove+0x2a>
 8007dc4:	bd10      	pop	{r4, pc}
 8007dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dce:	e7f7      	b.n	8007dc0 <memmove+0x24>

08007dd0 <_sbrk_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4d06      	ldr	r5, [pc, #24]	@ (8007dec <_sbrk_r+0x1c>)
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	4608      	mov	r0, r1
 8007dda:	602b      	str	r3, [r5, #0]
 8007ddc:	f7f8 ff72 	bl	8000cc4 <_sbrk>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_sbrk_r+0x1a>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_sbrk_r+0x1a>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	20004408 	.word	0x20004408

08007df0 <_realloc_r>:
 8007df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df4:	4607      	mov	r7, r0
 8007df6:	4614      	mov	r4, r2
 8007df8:	460d      	mov	r5, r1
 8007dfa:	b921      	cbnz	r1, 8007e06 <_realloc_r+0x16>
 8007dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e00:	4611      	mov	r1, r2
 8007e02:	f7ff bc5b 	b.w	80076bc <_malloc_r>
 8007e06:	b92a      	cbnz	r2, 8007e14 <_realloc_r+0x24>
 8007e08:	f7ff fbec 	bl	80075e4 <_free_r>
 8007e0c:	4625      	mov	r5, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e14:	f000 f81a 	bl	8007e4c <_malloc_usable_size_r>
 8007e18:	4284      	cmp	r4, r0
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	d802      	bhi.n	8007e24 <_realloc_r+0x34>
 8007e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e22:	d8f4      	bhi.n	8007e0e <_realloc_r+0x1e>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4638      	mov	r0, r7
 8007e28:	f7ff fc48 	bl	80076bc <_malloc_r>
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	b908      	cbnz	r0, 8007e34 <_realloc_r+0x44>
 8007e30:	4645      	mov	r5, r8
 8007e32:	e7ec      	b.n	8007e0e <_realloc_r+0x1e>
 8007e34:	42b4      	cmp	r4, r6
 8007e36:	4622      	mov	r2, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	bf28      	it	cs
 8007e3c:	4632      	movcs	r2, r6
 8007e3e:	f7ff fbc3 	bl	80075c8 <memcpy>
 8007e42:	4629      	mov	r1, r5
 8007e44:	4638      	mov	r0, r7
 8007e46:	f7ff fbcd 	bl	80075e4 <_free_r>
 8007e4a:	e7f1      	b.n	8007e30 <_realloc_r+0x40>

08007e4c <_malloc_usable_size_r>:
 8007e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e50:	1f18      	subs	r0, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	bfbc      	itt	lt
 8007e56:	580b      	ldrlt	r3, [r1, r0]
 8007e58:	18c0      	addlt	r0, r0, r3
 8007e5a:	4770      	bx	lr

08007e5c <_init>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr

08007e68 <_fini>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	bf00      	nop
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr
